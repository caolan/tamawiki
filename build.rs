#[macro_use] extern crate quote;
extern crate proc_macro2;
extern crate serde_json;
extern crate rustfmt;
extern crate syn;

use syn::Ident;
use proc_macro2::Span;
use std::io::{BufRead, BufReader, Write};
use std::path::Path;
use std::fs::File;
use std::env;
use rustfmt::Input;
use std::default::Default;


const SHARED_TESTS_DIR: &'static str = "./tests/shared";


fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let out_path = Path::new(&out_dir).join("shared_tests.rs");
    let mut outfile = File::create(&out_path).unwrap();
    
    let index_filename = Path::new(SHARED_TESTS_DIR).join("INDEX.txt");
    let index = File::open(&index_filename).unwrap();
    println!("cargo:rerun-if-changed={}", index_filename.to_str().unwrap());

    outfile.write(b"// WARNING this file is auto-generated by build.rs. Do not edit directly!\n").unwrap();
    outfile.write(b"// Instead, see the JSON test specifications in tests/shared\n\n").unwrap();
    
    for line in BufReader::new(index).lines() {
        let filename = Path::new(SHARED_TESTS_DIR).join(line.unwrap());
        let test_file = File::open(&filename).unwrap();
        println!("cargo:rerun-if-changed={}", filename.to_str().unwrap());
        
        let name = filename.file_stem().unwrap().to_str().unwrap();
        let config: serde_json::Value = serde_json::from_reader(test_file).unwrap();
        
        write_test(&mut outfile, name, config);
    }

    // Format the generated tests using rustfmt, otherwise the test
    // functions are each collapsed onto one line only, making
    // tracking down test errors more painful.
    assert!(
        rustfmt::run(
            Input::File(out_path),
            &Default::default()
        ).has_no_errors()
    );
}


fn write_test(mut output: &File, name: &str, config: serde_json::Value) {
    let name = Ident::new(name, Span::call_site());
    let test_type = config.get("type").unwrap().as_str().unwrap();

    match test_type {
        "apply" => {
            write!(output, "{}\n", quote! {
                #[test]
                fn #name() {
                    assert_eq!(#test_type, "NOPE");
                }
            }).unwrap();
        },
        other => {
            panic!("unknown test type for {}: {:?}", name, other);
        }
    }
}
