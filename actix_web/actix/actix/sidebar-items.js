initSidebarItems({"enum":[["ActorState","Actor execution state"],["MailboxError","Set of error that can occurred during message delivery process"],["Running",""]],"mod":[["dev","The `actix` prelude for library developers"],["fut","Custom `Future` implementation with `Actix` support"],["msgs","Actix system messages"]],"struct":[["Addr","Address of the actor"],["Arbiter","Event loop controller"],["Condition",""],["Context","Actor execution context"],["MessageResult","Helper type that implements `MessageResponse` trait"],["Recipient","`Recipient` type allows to send one specific message to an actor."],["RecipientRequest","`RecipientRequest` is a `Future` which represents asynchronous message sending process."],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["SyncArbiter","Sync arbiter"],["SyncContext","Sync actor execution context"],["System","System is an actor which manages runtime."]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["AsyncContext","Asynchronous execution context"],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Handler","Message handler"],["SystemService","Trait defines system's service."]],"type":[["ResponseActFuture","A specialized actor future for async message handler"],["ResponseFuture","A specialized future for async message handler"]]});