var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",7,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",7,[[["self"],["f"]]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["arrayref"]={"doc":"This package contains just four macros, which enable the creation of array references to portions of arrays or slices (or things that can be sliced).","items":[[14,"array_ref","arrayref","You can use `array_ref` to generate an array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",N,N],[14,"array_refs","","You can use `array_refs` to generate a series of array references to an input array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping arrays. `array_refs` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array.  This macro will never panic, since the sizes are all checked at compile time.",N,N],[14,"mut_array_refs","","You can use `mut_array_refs` to generate a series of mutable array references to an input mutable array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping mutable array references.  Like `array_refs!`, `mut_array_refs!` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array. This macro will never panic, since the sizes are all checked at compile time.",N,N],[14,"array_mut_ref","","You can use `array_mut_ref` to generate a mutable array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",N,N]],"paths":[]};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N]],"paths":[]};
searchIndex["base64"]={"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"DecodeError","","Errors that can occur while decoding.",N,N],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,N],[13,"InvalidLength","","The length of the input is invalid.",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,N],[4,"LineEnding","","Line ending used in optional line wrapping.",N,N],[13,"LF","","Unix-style \\n",2,N],[13,"CRLF","","Windows-style \\r\\n",2,N],[4,"LineWrap","","Line wrap configuration.",N,N],[13,"NoWrap","","Don't wrap.",3,N],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",N,[[["t"],["config"],["string"]]]],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",N,N],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[5,"decode_config_slice","","Decode the input into the provided output slice.",N,N],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",N,N],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",N,N],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",N,N],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["displayerror"]],["bool"]]],[11,"with_config","","Create a `Base64Display` with the provided config.",5,N],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,N],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","base64","",0,[[["self"]],["decodeerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[17,"STANDARD","","Standard character set with padding.",N,N],[17,"STANDARD_NO_PAD","","Standard character set without padding.",N,N],[17,"MIME","","As per standards for MIME encoded messages",N,N],[17,"URL_SAFE","","URL-safe character set with padding",N,N],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",N,N],[17,"CRYPT","","As per `crypt(3)` requirements",N,N],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["lineending"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["linewrap"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Config`.",6,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["block_buffer"]={"doc":"","items":[[3,"UnpadError","block_buffer","Error for indicating failed unpadding process",N,N],[3,"BlockBuffer128","","",N,N],[3,"BlockBuffer256","","",N,N],[3,"BlockBuffer512","","",N,N],[3,"BlockBuffer1024","","",N,N],[3,"BlockBuffer576","","",N,N],[3,"BlockBuffer832","","",N,N],[3,"BlockBuffer1088","","",N,N],[3,"BlockBuffer1152","","",N,N],[3,"BlockBuffer1344","","",N,N],[4,"ZeroPadding","","",N,N],[4,"Pkcs7","","",N,N],[4,"AnsiX923","","",N,N],[4,"Iso7816","","",N,N],[11,"clone","","",0,[[["self"]],["unpaderror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"cmp","","",0,[[["self"],["unpaderror"]],["ordering"]]],[11,"eq","","",0,[[["self"],["unpaderror"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["unpaderror"]],["option",["ordering"]]]],[11,"clone","","",1,[[["self"]],["zeropadding"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"cmp","","",1,[[["self"],["zeropadding"]],["ordering"]]],[11,"eq","","",1,[[["self"],["zeropadding"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["zeropadding"]],["option",["ordering"]]]],[11,"pad","","",1,N],[11,"unpad","","",1,N],[11,"clone","","",2,[[["self"]],["pkcs7"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"cmp","","",2,[[["self"],["pkcs7"]],["ordering"]]],[11,"eq","","",2,[[["self"],["pkcs7"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["pkcs7"]],["option",["ordering"]]]],[11,"pad","","",2,N],[11,"unpad","","",2,N],[11,"clone","","",3,[[["self"]],["ansix923"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["ansix923"]],["ordering"]]],[11,"eq","","",3,[[["self"],["ansix923"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["ansix923"]],["option",["ordering"]]]],[11,"pad","","",3,N],[11,"unpad","","",3,N],[11,"clone","","",4,[[["self"]],["iso7816"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["iso7816"]],["ordering"]]],[11,"eq","","",4,[[["self"],["iso7816"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["iso7816"]],["option",["ordering"]]]],[11,"pad","","",4,N],[11,"unpad","","",4,N],[8,"Padding","","Trait for padding messages divided into blocks",N,N],[10,"pad","","Pads `block` filled with data up to `pos`",5,N],[8,"Unpadding","","Trait for extracting oringinal message from padded medium",N,N],[10,"unpad","","Unpad given `data` by truncating it according to the used padding. In case of the malformed padding will return `UnpadError`",6,N],[11,"clone","","",7,[[["self"]],["self"]]],[11,"default","","",7,[[],["self"]]],[11,"input","","",7,N],[11,"len_padding","","Will pad message with message length in big-endian format",7,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",7,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",7,N],[11,"size","","",7,[[["self"]],["usize"]]],[11,"position","","",7,[[["self"]],["usize"]]],[11,"remaining","","",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"default","","",8,[[],["self"]]],[11,"input","","",8,N],[11,"len_padding","","Will pad message with message length in big-endian format",8,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",8,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",8,N],[11,"size","","",8,[[["self"]],["usize"]]],[11,"position","","",8,[[["self"]],["usize"]]],[11,"remaining","","",8,[[["self"]],["usize"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"default","","",9,[[],["self"]]],[11,"input","","",9,N],[11,"len_padding","","Will pad message with message length in big-endian format",9,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",9,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",9,N],[11,"size","","",9,[[["self"]],["usize"]]],[11,"position","","",9,[[["self"]],["usize"]]],[11,"remaining","","",9,[[["self"]],["usize"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"default","","",10,[[],["self"]]],[11,"input","","",10,N],[11,"len_padding","","Will pad message with message length in big-endian format",10,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",10,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",10,N],[11,"size","","",10,[[["self"]],["usize"]]],[11,"position","","",10,[[["self"]],["usize"]]],[11,"remaining","","",10,[[["self"]],["usize"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"default","","",11,[[],["self"]]],[11,"input","","",11,N],[11,"len_padding","","Will pad message with message length in big-endian format",11,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",11,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",11,N],[11,"size","","",11,[[["self"]],["usize"]]],[11,"position","","",11,[[["self"]],["usize"]]],[11,"remaining","","",11,[[["self"]],["usize"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"default","","",12,[[],["self"]]],[11,"input","","",12,N],[11,"len_padding","","Will pad message with message length in big-endian format",12,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",12,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",12,N],[11,"size","","",12,[[["self"]],["usize"]]],[11,"position","","",12,[[["self"]],["usize"]]],[11,"remaining","","",12,[[["self"]],["usize"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"default","","",13,[[],["self"]]],[11,"input","","",13,N],[11,"len_padding","","Will pad message with message length in big-endian format",13,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",13,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",13,N],[11,"size","","",13,[[["self"]],["usize"]]],[11,"position","","",13,[[["self"]],["usize"]]],[11,"remaining","","",13,[[["self"]],["usize"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"default","","",14,[[],["self"]]],[11,"input","","",14,N],[11,"len_padding","","Will pad message with message length in big-endian format",14,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",14,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",14,N],[11,"size","","",14,[[["self"]],["usize"]]],[11,"position","","",14,[[["self"]],["usize"]]],[11,"remaining","","",14,[[["self"]],["usize"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"default","","",15,[[],["self"]]],[11,"input","","",15,N],[11,"len_padding","","Will pad message with message length in big-endian format",15,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",15,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",15,N],[11,"size","","",15,[[["self"]],["usize"]]],[11,"position","","",15,[[["self"]],["usize"]]],[11,"remaining","","",15,[[["self"]],["usize"]]]],"paths":[[3,"UnpadError"],[4,"ZeroPadding"],[4,"Pkcs7"],[4,"AnsiX923"],[4,"Iso7816"],[8,"Padding"],[8,"Unpadding"],[3,"BlockBuffer128"],[3,"BlockBuffer256"],[3,"BlockBuffer512"],[3,"BlockBuffer1024"],[3,"BlockBuffer576"],[3,"BlockBuffer832"],[3,"BlockBuffer1088"],[3,"BlockBuffer1152"],[3,"BlockBuffer1344"]]};
searchIndex["byte_tools"]={"doc":"","items":[[5,"read_u32_le","byte_tools","Read the value of a vector of bytes as a u32 value in little-endian format.",N,N],[5,"read_u32_be","","Read the value of a vector of bytes as a u32 value in big-endian format.",N,N],[5,"read_u64_le","","Read the value of a vector of bytes as a u64 value in little-endian format.",N,N],[5,"read_u64_be","","Read the value of a vector of bytes as a u64 value in big-endian format.",N,N],[5,"write_u32_le","","Write a u32 into a vector, which must be 4 bytes long. The value is written in little-endian format.",N,N],[5,"write_u32_be","","Write a u32 into a vector, which must be 4 bytes long. The value is written in big-endian format.",N,N],[5,"write_u64_le","","Write a u64 into a vector, which must be 8 bytes long. The value is written in little-endian format.",N,N],[5,"write_u64_be","","Write a u64 into a vector, which must be 8 bytes long. The value is written in big-endian format.",N,N],[5,"read_u32v_le","","Read a vector of bytes into a vector of u32s. The values are read in little-endian format.",N,N],[5,"read_u32v_be","","Read a vector of bytes into a vector of u32s. The values are read in big-endian format.",N,N],[5,"read_u64v_le","","Read a vector of bytes into a vector of u64s. The values are read in little-endian format.",N,N],[5,"read_u64v_be","","Read a vector of bytes into a vector of u64s. The values are read in big-endian format.",N,N],[5,"write_u32v_le","","Write a vector of u32s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"write_u32v_be","","Write a vector of u32s into a vector of bytes. The values are written in big-endian format.",N,N],[5,"write_u64v_le","","Write a vector of u64s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"write_u64v_be","","Write a vector of u64s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"copy_memory","","Copy bytes from src to dest",N,N],[5,"zero","","Zero all bytes in dst",N,N],[5,"set","","Sets all bytes in `dst` equal to `value`",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"from_buf","bytes","",1,[[["t"]],["self"]]],[11,"from_buf","","",2,[[["t"]],["self"]]],[11,"fmt","bytes::buf","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,N],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"bytes","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"bytes_vec","","",3,N],[11,"remaining_mut","","",3,[[["self"]],["usize"]]],[11,"bytes_mut","","",3,N],[11,"advance_mut","","",3,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"next","","",4,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,[[["self"]],["b"]]],[11,"read","","",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",6,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,[[["self"],["usize"]]]],[11,"remaining","","",6,[[["self"]],["usize"]]],[11,"bytes","","",6,N],[11,"advance","","",6,[[["self"],["usize"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,[[["self"]],["b"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",10,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",1,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",1,N],[11,"split_off","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",1,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",1,N],[11,"into_buf","","",1,N],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"as_ref","","",1,N],[11,"deref","","",1,N],[11,"from","","",1,[[["bytesmut"]],["bytes"]]],[11,"from","","",1,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",1,[[["string"]],["bytes"]]],[11,"from","","",1,N],[11,"from","","",1,[[["str"]],["bytes"]]],[11,"from_iter","","",2,[[["t"]],["self"]]],[11,"from_iter","","",1,[[["t"]],["self"]]],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["bytes"]],["ordering"]]],[11,"default","","",1,[[],["bytes"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"borrow","","",1,N],[11,"into_iter","","",1,N],[11,"extend","","",1,[[["self"],["t"]]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",2,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",2,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",2,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",2,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,[[["self"],["bytesmut"]]]],[11,"remaining_mut","","",2,[[["self"]],["usize"]]],[11,"advance_mut","","",2,[[["self"],["usize"]]]],[11,"bytes_mut","","",2,N],[11,"put_slice","","",2,N],[11,"put_u8","","",2,[[["self"],["u8"]]]],[11,"put_i8","","",2,[[["self"],["i8"]]]],[11,"into_buf","","",2,N],[11,"as_ref","","",2,N],[11,"deref","","",2,N],[11,"as_mut","","",2,N],[11,"deref_mut","","",2,N],[11,"from","","",2,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",2,[[["string"]],["bytesmut"]]],[11,"from","","",2,N],[11,"from","","",2,[[["str"]],["bytesmut"]]],[11,"from","","",2,[[["bytes"]],["bytesmut"]]],[11,"eq","","",2,[[["self"],["bytesmut"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["bytesmut"]],["ordering"]]],[11,"default","","",2,[[],["bytesmut"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"borrow","","",2,N],[11,"borrow_mut","","",2,N],[11,"write_str","","",2,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",2,[[["self"],["arguments"]],["result"]]],[11,"clone","","",2,[[["self"]],["bytesmut"]]],[11,"into_iter","","",2,N],[11,"extend","","",2,[[["self"],["t"]]]],[11,"extend","","",2,[[["self"],["t"]]]],[11,"eq","","",2,N],[11,"partial_cmp","","",2,N],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,N],[11,"partial_cmp","","",1,N],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",2,[[["self"],["bytes"]],["bool"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","bytes","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"clone","","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"default","","",12,[[],["bigendian"]]],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono: Date and Time for Rust","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"Date","","ISO 8601 calendar date with time zone.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",N,N],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",N,N],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,N],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,N],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,N],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,N],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",1,N],[13,"Tue","","Tuesday.",1,N],[13,"Wed","","Wednesday.",1,N],[13,"Thu","","Thursday.",1,N],[13,"Fri","","Friday.",1,N],[13,"Sat","","Saturday.",1,N],[13,"Sun","","Sunday.",1,N],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",N,N],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",N,N],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",N,N],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,N],[13,"Single","","Given local time representation has a single unique result.",2,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,N],[11,"clone","","",3,[[["self"]],["utc"]]],[11,"eq","","",3,[[["self"],["utc"]],["bool"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",3,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,[[],["datetime",["utc"]]]],[11,"from_offset","","",3,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["utc"]]],[11,"fix","","",3,[[["self"]],["fixedoffset"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fixedoffset"]]],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,[[["self"]],["i32"]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,[[["self"]],["i32"]]],[11,"from_offset","","",4,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"fix","","",4,[[["self"]],["fixedoffset"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"add","chrono","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"clone","chrono::offset","",6,[[["self"]],["local"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",6,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,[[],["datetime",["local"]]]],[11,"from_offset","","",6,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",6,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",6,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[8,"Offset","","The offset from the local time to UTC.",N,N],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,[[["self"]],["fixedoffset"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",8,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedatetime"]],["datetime"]]],[11,"clone","","",2,[[["self"]],["localresult"]]],[11,"eq","","",2,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["localresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[3,"IsoWeek","","ISO 8601 week.",N,N],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",N,N],[11,"eq","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"hash","","",9,N],[11,"partial_cmp","","",9,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"cmp","","",9,[[["self"],["naivedate"]],["ordering"]]],[11,"clone","","",9,[[["self"]],["naivedate"]]],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",9,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",9,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",9,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",9,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",9,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",9,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",9,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",9,[[["self"]],["weekday"]]],[11,"iso_week","","",9,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"add","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"add_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"sub_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["parseresult",["naivedate"]]]],[11,"eq","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ne","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["isoweek"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"le","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"gt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ge","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"cmp","","",10,[[["self"],["isoweek"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["isoweek"]]],[11,"year","","Returns the year number for this ISO week.",10,[[["self"]],["i32"]]],[11,"week","","Returns the ISO week number starting from 1.",10,[[["self"]],["u32"]]],[11,"week0","","Returns the ISO week number starting from 0.",10,[[["self"]],["u32"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"cmp","","",11,[[["self"],["naivetime"]],["ordering"]]],[11,"clone","","",11,[[["self"]],["naivetime"]]],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"hour","","Returns the hour number from 0 to 23.",11,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,[[["self"]],["u32"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"add","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"add_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"sub_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",11,[[["str"]],["parseresult",["naivetime"]]]],[11,"eq","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"cmp","","",12,[[["self"],["naivedatetime"]],["ordering"]]],[11,"clone","","",12,[[["self"]],["naivedatetime"]]],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",12,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",12,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",12,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",12,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",12,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",12,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",12,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",12,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",12,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",12,[[["self"]],["weekday"]]],[11,"iso_week","","",12,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","","Returns the hour number from 0 to 23.",12,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"add","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"add_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"sub_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",12,[[["str"]],["parseresult",["naivedatetime"]]]],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"clone","chrono","",13,[[["self"]],["date"]]],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",13,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",13,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",13,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",13,N],[11,"timezone","","Retrieves an associated time zone.",13,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,[[["self"],["tz2"]],["date"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,[[["self"],["date"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC date.",13,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",13,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",13,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",13,[[["self"]],["i32"]]],[11,"month","","",13,[[["self"]],["u32"]]],[11,"month0","","",13,[[["self"]],["u32"]]],[11,"day","","",13,[[["self"]],["u32"]]],[11,"day0","","",13,[[["self"]],["u32"]]],[11,"ordinal","","",13,[[["self"]],["u32"]]],[11,"ordinal0","","",13,[[["self"]],["u32"]]],[11,"weekday","","",13,[[["self"]],["weekday"]]],[11,"iso_week","","",13,[[["self"]],["isoweek"]]],[11,"with_year","","",13,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"eq","","",13,[[["self"],["date"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["date"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["date"]],["ordering"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"add","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["date"]],["oldduration"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["secondsformat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["secondsformat"]],["bool"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,N],[11,"date","","Retrieves a date component.",5,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",5,N],[11,"timezone","","Retrieves an associated time zone.",5,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,[[["self"],["datetime"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",5,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",5,[[["self"]],["i32"]]],[11,"month","","",5,[[["self"]],["u32"]]],[11,"month0","","",5,[[["self"]],["u32"]]],[11,"day","","",5,[[["self"]],["u32"]]],[11,"day0","","",5,[[["self"]],["u32"]]],[11,"ordinal","","",5,[[["self"]],["u32"]]],[11,"ordinal0","","",5,[[["self"]],["u32"]]],[11,"weekday","","",5,[[["self"]],["weekday"]]],[11,"iso_week","","",5,[[["self"]],["isoweek"]]],[11,"with_year","","",5,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","","",5,[[["self"]],["u32"]]],[11,"minute","","",5,[[["self"]],["u32"]]],[11,"second","","",5,[[["self"]],["u32"]]],[11,"nanosecond","","",5,[[["self"]],["u32"]]],[11,"with_hour","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["datetime"]],["ordering"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"add","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["datetime"]],["oldduration"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["local"]]]],[0,"format","","Formatting (and parsing) utilities for date and time.",N,N],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",14,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear","","Year in the ISO week date.",14,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"month","","Month (1--12).",14,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,N],[12,"weekday","","Day of the week.",14,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,N],[12,"minute","","Minute number (0--59).",14,N],[12,"second","","Second number (0--60, accounting for leap seconds).",14,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,N],[12,"offset","","Offset from the local time to UTC, in seconds.",14,N],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",N,N],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",N,N],[3,"ParseError","","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",15,N],[13,"Zero","","Zero (`0`) padding.",15,N],[13,"Space","","Space padding.",15,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"Month","","Month (FW=PW=2).",16,N],[13,"Day","","Day of the month (FW=PW=2).",16,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,N],[13,"Ordinal","","Day of the year (FW=PW=3).",16,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,N],[13,"Internal","","Internal uses only.",16,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",17,N],[13,"LongMonthName","","Full month names.",17,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,N],[13,"LongWeekdayName","","Full day of the week names.",17,N],[13,"LowerAmPm","","AM/PM.",17,N],[13,"UpperAmPm","","AM/PM.",17,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,N],[13,"TimezoneName","","Timezone name.",17,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,N],[13,"Internal","","Internal uses only.",17,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",18,N],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,N],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,N],[13,"Fixed","","Fixed-format item.",18,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[11,"clone","","",14,[[["self"]],["parsed"]]],[11,"eq","","",14,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",14,[[["self"],["parsed"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["parsed"]]],[11,"new","","Returns the initial value of parsed parts.",14,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"clone","","",19,[[["self"]],["strftimeitems"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,[[["str"]],["strftimeitems"]]],[11,"next","","",19,[[["self"]],["option",["item"]]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"clone","","",15,[[["self"]],["pad"]]],[11,"eq","","",15,[[["self"],["pad"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["numeric"]]],[11,"eq","","",16,[[["self"],["numeric"]],["bool"]]],[11,"ne","","",16,[[["self"],["numeric"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["internalnumeric"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["fixed"]]],[11,"eq","","",17,[[["self"],["fixed"]],["bool"]]],[11,"ne","","",17,[[["self"],["fixed"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["internalfixed"]]],[11,"eq","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"ne","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"clone","","",18,[[["self"]],["item"]]],[11,"eq","","",18,[[["self"],["item"]],["bool"]]],[11,"ne","","",18,[[["self"],["item"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["parseerror"]]],[11,"eq","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from_str","chrono","",1,[[["str"]],["result"]]],[17,"MIN_DATE","","The minimum possible `Date`.",N,N],[17,"MAX_DATE","","The maximum possible `Date`.",N,N],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",N,N],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,[[["self"],["u16"]],["self"]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,[[["self"],["u16"]],["self"]]],[8,"Datelike","","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",25,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,N],[10,"month","","Returns the month number starting from 1.",25,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",25,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",25,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",25,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",25,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",25,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",25,[[["self"]],["weekday"]]],[10,"iso_week","","Returns the ISO week.",25,[[["self"]],["isoweek"]]],[10,"with_year","","Makes a new value with the year number changed.",25,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, Year 1 (aka Day 1) in the proleptic Gregorian calendar.",25,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",26,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,N],[10,"minute","","Returns the minute number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,[[["self"]],["u32"]]],[11,"eq","","",1,[[["self"],["weekday"]],["bool"]]],[11,"clone","","",1,[[["self"]],["weekday"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"succ","","The next day in the week.",1,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",1,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,[[["self"]],["u32"]]],[11,"from_i64","","",1,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["weekday"]]]],[11,"clone","","",27,[[["self"]],["parseweekdayerror"]]],[11,"eq","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"ne","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",28,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,[[["self"]],["result",["duration","outofrangeerror"]]]],[11,"add","","",28,[[["self"],["duration"]],["duration"]]],[11,"clone","","",28,[[["self"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",28,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["duration"]],["bool"]]],[11,"le","","",28,[[["self"],["duration"]],["bool"]]],[11,"gt","","",28,[[["self"],["duration"]],["bool"]]],[11,"ge","","",28,[[["self"],["duration"]],["bool"]]],[11,"neg","","",28,[[["self"]],["duration"]]],[11,"sub","","",28,[[["self"],["duration"]],["duration"]]],[11,"cmp","","",28,[[["self"],["duration"]],["ordering"]]],[11,"mul","","",28,[[["self"],["i32"]],["duration"]]],[11,"div","","",28,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",28,[[["self"],["duration"]],["bool"]]],[11,"ne","","",28,[[["self"],["duration"]],["bool"]]],[11,"add","chrono::naive","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"sub","","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"add","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"sub","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["crossbeam_deque"]={"doc":"A concurrent work-stealing deque.","items":[[3,"Worker","crossbeam_deque","The worker side of a deque.",N,N],[3,"Stealer","","The stealer side of a deque.",N,N],[4,"Pop","","Possible outcomes of a pop operation.",N,N],[13,"Empty","","The deque was empty at the time of popping.",0,N],[13,"Data","","Some data has been successfully popped.",0,N],[13,"Retry","","Lost the race for popping data to another concurrent steal operation. Try again.",0,N],[4,"Steal","","Possible outcomes of a steal operation.",N,N],[13,"Empty","","The deque was empty at the time of stealing.",1,N],[13,"Data","","Some data has been successfully stolen.",1,N],[13,"Retry","","Lost the race for stealing data to another concurrent steal or pop operation. Try again.",1,N],[5,"fifo","","Creates a work-stealing deque with the first-in first-out strategy.",N,N],[5,"lifo","","Creates a work-stealing deque with the last-in first-out strategy.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["pop"]],["bool"]]],[11,"ne","","",0,[[["self"],["pop"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["pop"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["pop"]],["bool"]]],[11,"le","","",0,[[["self"],["pop"]],["bool"]]],[11,"gt","","",0,[[["self"],["pop"]],["bool"]]],[11,"ge","","",0,[[["self"],["pop"]],["bool"]]],[11,"cmp","","",0,[[["self"],["pop"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["pop"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["steal"]],["bool"]]],[11,"ne","","",1,[[["self"],["steal"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["steal"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["steal"]],["bool"]]],[11,"le","","",1,[[["self"],["steal"]],["bool"]]],[11,"gt","","",1,[[["self"],["steal"]],["bool"]]],[11,"ge","","",1,[[["self"],["steal"]],["bool"]]],[11,"cmp","","",1,[[["self"],["steal"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["steal"]]],[11,"is_empty","","Returns `true` if the deque is empty.",2,[[["self"]],["bool"]]],[11,"push","","Pushes an element into the back of the deque.",2,[[["self"],["t"]]]],[11,"pop","","Pops an element from the deque.",2,[[["self"]],["pop"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"is_empty","","Returns `true` if the deque is empty.",3,[[["self"]],["bool"]]],[11,"steal","","Steals an element from the front of the deque.",3,[[["self"]],["steal"]]],[11,"steal_many","","Steals elements from the front of the deque.",3,[[["self"],["worker"]],["steal"]]],[11,"clone","","",3,[[["self"]],["stealer"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Pop"],[4,"Steal"],[3,"Worker"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"]={"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,N],[12,"new","","The new value, which the operation failed to store.",0,N],[3,"Owned","","An owned heap-allocated object.",N,N],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"Handle","","A handle to a garbage collector.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[5,"default_collector","","Returns the default handle associated with the current thread.",N,[[],["collector"]]],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[5,"pin","","Pins the current thread.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","Returns a new null atomic pointer.",1,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",1,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",1,[[["self"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,[[["self"],["p"],["ordering"]]]],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","Returns a copy of the atomic value.",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,[[["owned"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,[[["shared"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,N],[11,"into_usize","","",2,[[["self"]],["usize"]]],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",2,[[["usize"]],["self"]]],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",2,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",2,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,[[["self"],["usize"]],["owned"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["self"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",2,[[["box"]],["self"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"into_usize","","",3,[[["self"]],["usize"]]],[11,"from_usize","","",3,[[["usize"]],["self"]]],[11,"null","","Returns a new null pointer.",3,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",3,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,N],[11,"deref","","Dereferences the pointer.",3,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",3,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",3,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",3,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,[[["self"],["usize"]],["shared"]]],[11,"from","","Returns a new pointer pointing to `raw`.",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","Creates a new collector.",4,[[],["self"]]],[11,"register","","Registers a new handle for the collector.",4,[[["self"]],["handle"]]],[11,"clone","","Creates another reference to the same garbage collector.",4,[[["self"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","Checks if both handles point to the same collector.",4,[[["self"],["collector"]],["bool"]]],[11,"pin","","Pins the handle.",5,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,[[["self"]],["bool"]]],[11,"collector","","Returns the `Collector` associated with this handle.",5,[[["self"]],["collector"]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,[[["self"],["f"]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,[[["self"]]]],[11,"repin","","Unpins and then immediately re-pins the thread.",6,[[["self"]]]],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,[[["self"],["f"]],["r"]]],[11,"collector","","Returns the `Collector` associated with this guard.",6,[[["self"]],["option",["collector"]]]],[11,"drop","","",6,[[["self"]]]],[11,"clone","","",6,[[["self"]],["guard"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",7,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",7,[[["self"]],["ordering"]]],[8,"Pointer","","A trait for either `Owned` or `Shared` pointers.",N,N],[10,"into_usize","","Returns the machine representation of the pointer.",8,[[["self"]],["usize"]]],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",8,[[["usize"]],["self"]]]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[3,"CachePadded","crossbeam_utils","Pads `T` to the length of a cache line.",N,N],[11,"clone","","",0,[[["self"]],["cachepadded"]]],[11,"default","","",0,[[],["cachepadded"]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"thread","","",N,N],[3,"Scope","crossbeam_utils::thread","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unchecked","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unchecked","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",1,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",1,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",3,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",2,[[["self"]],["result"]]],[11,"thread","","Get the underlying thread handle.",2,[[["self"]],["thread"]]],[11,"drop","","",1,[[["self"]]]],[8,"AtomicConsume","crossbeam_utils","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",4,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,N]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["deunicode"]={"doc":"The `deunicode` library transliterates Unicode strings such as \"Æneid\" into pure ASCII ones such as \"AEneid.\"","items":[[3,"AsciiCharsIter","deunicode","Iterator that translates Unicode characters to ASCII strings.pub",N,N],[5,"deunicode","","This function takes any Unicode string and returns an ASCII transliteration of that string.",N,[[["str"]],["string"]]],[5,"deunicode_with_tofu","","Same as `deunicode`, but unknown characters can be replaced with a custom string.",N,[[["str"],["str"]],["string"]]],[5,"deunicode_char","","This function takes a single Unicode character and returns an ASCII transliteration.",N,[[["char"]],["option",["str"]]]],[8,"AsciiChars","","Convenience functions for deunicode. `use deunicode::AsciiChars`",N,N],[10,"ascii_chars","","Iterate over Unicode characters converted to ASCII sequences.",0,[[["self"]],["asciicharsiter"]]],[10,"to_ascii_lossy","","Convert any Unicode string to ASCII-only string.",0,[[["self"]],["string"]]],[11,"new","","",1,[[["str"]],["self"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"count","","",1,[[["self"]],["usize"]]],[11,"size_hint","","",1,N]],"paths":[[8,"AsciiChars"],[3,"AsciiCharsIter"]]};
searchIndex["digest"]={"doc":"This crate provides traits for describing funcionality of cryptographic hash functions.","items":[[3,"InvalidOutputSize","digest","The error type for variable hasher initialization",N,N],[3,"InvalidBufferLength","","The error type for variable hasher result",N,N],[3,"InvalidLength","","The error type for variable digest output",N,N],[11,"clone","","",0,[[["self"]],["invalidoutputsize"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["invalidoutputsize"]]],[11,"clone","","",1,[[["self"]],["invalidbufferlength"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["invalidbufferlength"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Digest","","The `Digest` trait specifies an interface common for digest functions.",N,N],[11,"new","","Create new hasher instance",2,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",2,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",2,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",2,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",2,[[["str"]],["genericarray",["u8"]]]],[8,"Input","","Trait for processing input data",N,N],[10,"process","","Digest input data. This method can be called repeatedly for use with streaming messages.",3,N],[8,"BlockInput","","Trait to indicate that digest function processes data in blocks of size `BlockSize`. Main usage of this trait is for implementing HMAC generically.",N,N],[16,"BlockSize","","",4,N],[8,"FixedOutput","","Trait for returning digest result with the fixed size",N,N],[16,"OutputSize","","",5,N],[10,"fixed_result","","Retrieve the digest result. This method consumes digest instance.",5,[[["self"]],["genericarray",["u8"]]]],[8,"VariableOutput","","Trait for returning digest result with the varaible size",N,N],[10,"new","","Create new hasher instance with given output size. Will return `Err(InvalidLength)` in case if hasher can not work with the given output size. Will always return an error if output size equals to zero.",6,[[["usize"]],["result",["invalidlength"]]]],[10,"output_size","","Get output size of the hasher instance provided to the `new` method",6,[[["self"]],["usize"]]],[10,"variable_result","","Retrieve the digest result into provided buffer. Length of the buffer must be equal to output size provided to the `new` method, otherwise `Err(InvalidLength)` will be returned",6,N],[8,"XofReader","","Trait for decribing readers which are used to extract extendable output from the resulting state of hash function.",N,N],[10,"read","","Read output into the `buffer`. Can be called unlimited number of times.",7,N],[8,"ExtendableOutput","","Trait which describes extendable output (XOF) of hash functions. Using this trait you first need to get structure which implements `XofReader`, using which you can read extendable output.",N,N],[16,"Reader","","",8,N],[10,"xof_result","","Finalize hash function and return XOF reader",8,N],[11,"clone","","",9,[[["self"]],["invalidlength"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["invalidlength"]]],[11,"hash","","",9,N],[11,"cmp","","",9,[[["self"],["invalidlength"]],["ordering"]]],[11,"eq","","",9,[[["self"],["invalidlength"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["invalidlength"]],["option",["ordering"]]]],[14,"impl_opaque_debug","","Macro for defining opaque `Debug` implementation. It will use the following format: \"HasherName { ... }\". While it's convinient to have it (e.g. for including in other structs), it could be undesirable to leak internall state, which can happen for example through uncareful logging.",N,N],[11,"new","","Create new hasher instance",2,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",2,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",2,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",2,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",2,[[["str"]],["genericarray",["u8"]]]]],"paths":[[3,"InvalidOutputSize"],[3,"InvalidBufferLength"],[8,"Digest"],[8,"Input"],[8,"BlockInput"],[8,"FixedOutput"],[8,"VariableOutput"],[8,"XofReader"],[8,"ExtendableOutput"],[3,"InvalidLength"]]};
searchIndex["dtoa"]={"doc":"","items":[[5,"write","dtoa","",N,[[["w"],["v"]],["result",["usize"]]]],[8,"Floating","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result",["usize"]]]],[14,"diyfp","","",N,N],[14,"dtoa","","",N,N]],"paths":[[8,"Floating"]]};
searchIndex["error_chain"]={"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",N,N],[3,"Iter","","Iterator over the error chain using the `Error::cause()` method.",N,N],[3,"DisplayChain","","A struct which formats an error for output.",N,N],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Error","error_chain::example_generated","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",1,N],[13,"Inner","","Link to another `ErrorChain`.",1,N],[13,"Io","","Link to a `std::io::Error` type.",1,N],[13,"Custom","","A custom error kind.",1,N],[0,"inner","","Another code generated by the macro.",N,N],[3,"Error","error_chain::example_generated::inner","The Error type.",N,N],[12,"0","","The kind of the error.",2,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",3,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",2,N],[11,"with_chain","","",2,[[["e"],["k"]],["self"]]],[11,"kind","","",2,N],[11,"iter","","",2,[[["self"]],["iter"]]],[11,"chain_err","","",2,[[["self"],["f"]],["self"]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",2,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",2,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",2,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",2,[[["self"]],["str"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["errorkind"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",3,[[["self"]],["str"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"from","","",3,[[["error"]],["self"]]],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,[[["self"]],["str"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",N,N],[10,"code","","Returns the value to use as the exit status.",6,[[["self"]],["i32"]]],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",N,N],[16,"ErrorKind","","Associated kind type.",7,N],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",7,N],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",7,[[["e"],["k"]],["self"]]],[10,"kind","","Returns the kind of the error.",7,N],[10,"iter","","Iterates over the error chain.",7,[[["self"]],["iter"]]],[10,"backtrace","","Returns the backtrace associated with this error.",7,[[["self"]],["option",["backtrace"]]]],[11,"display_chain","","Returns an object which implements `Display` for printing the full context of this error.",7,[[["self"]],["displaychain"]]],[10,"chain_err","","Extends the error chain with a new entry.",7,[[["self"],["f"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new iterator over the error chain using `Error::cause()`.",8,[[["option",["error"]]],["iter"]]],[11,"next","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[14,"error_chain","","Macro for generating error types and traits. See crate level documentation for details.",N,N],[14,"quick_main","","Convenient wrapper to be able to use `?` and such in the main. You can use it with a separated function:",N,N],[14,"bail","","Exits a function early with an error",N,N],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",N,N],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",10,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",10,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",10,N],[11,"clone","","",10,[[["self"]],["backtrace"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",10,[[],["backtrace"]]],[11,"from","","",10,[[["vec",["backtraceframe"]]],["backtrace"]]],[11,"into","","",10,[[["self"]],["vec",["backtraceframe"]]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Iter"],[3,"DisplayChain"],[3,"Backtrace"]]};
searchIndex["fake_simd"]={"doc":"","items":[[3,"u32x4","fake_simd","",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[12,"3","","",0,N],[3,"u64x2","","",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[11,"clone","","",0,[[["self"]],["u32x4"]]],[11,"eq","","",0,[[["self"],["u32x4"]],["bool"]]],[11,"ne","","",0,[[["self"],["u32x4"]],["bool"]]],[11,"add","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"sub","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitand","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitor","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitxor","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"shl","","",0,[[["self"],["usize"]],["u32x4"]]],[11,"shl","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"shr","","",0,[[["self"],["usize"]],["u32x4"]]],[11,"shr","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"clone","","",1,[[["self"]],["u64x2"]]],[11,"add","","",1,[[["self"],["u64x2"]],["u64x2"]]]],"paths":[[3,"u32x4"],[3,"u64x2"]]};
searchIndex["fnv"]={"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",N,N],[6,"FnvBuildHasher","","A builder for default FNV hashers.",N,N],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",N,N],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",N,N],[11,"default","","",0,[[],["fnvhasher"]]],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,[[["u64"]],["fnvhasher"]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,N]],"paths":[[3,"FnvHasher"]]};
searchIndex["foreign_types"]={"doc":"A framework for Rust wrappers over C APIs.","items":[[3,"Opaque","foreign_types","An opaque type used to define `ForeignTypeRef` types.",N,N],[8,"ForeignType","","A type implemented by wrappers over foreign types.",N,N],[16,"CType","","The raw C type.",0,N],[16,"Ref","","The type representing a reference to this type.",0,N],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,N],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,N],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",N,N],[16,"CType","","The raw C type.",1,N],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,N],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,N],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,N],[14,"foreign_type","","A macro to easily define wrappers for foreign types.",N,N]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["foreign_types_shared"]={"doc":"Internal crate used by foreign-types","items":[[3,"Opaque","foreign_types_shared","An opaque type used to define `ForeignTypeRef` types.",N,N],[8,"ForeignType","","A type implemented by wrappers over foreign types.",N,N],[16,"CType","","The raw C type.",0,N],[16,"Ref","","The type representing a reference to this type.",0,N],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,N],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,N],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",N,N],[16,"CType","","The raw C type.",1,N],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,N],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,N],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,N]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"clone","","",0,[[["self"]],["async"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["futureresult"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"from","","",8,[[["result"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",13,[[["self"]],["bool"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"poll","","",24,[[["self"]],["poll"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"poll","","",25,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["self"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll","","",28,[[["self"]],["poll"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["self"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["self"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,[[["self"]],["option",["result"]]]],[11,"poll","","",32,[[["self"]],["poll"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["shareditem"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["t"]]],[11,"clone","","",34,[[["self"]],["sharederror"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"deref","","",34,[[["self"]],["e"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"description","","",34,[[["self"]],["str"]]],[11,"cause","","",34,[[["self"]],["option",["error"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",35,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",35,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",35,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",35,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",35,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",35,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",36,N],[16,"Item","","The item that the future may resolve with.",36,N],[16,"Error","","The error that the future may resolve with.",36,N],[10,"into_future","","Consumes this object and produces a future.",36,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",37,N],[16,"Error","","Possible errors during conversion.",37,N],[10,"future_from","","Consume the given value, beginning the conversion.",37,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"eq","","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"new","","Create a new `ExecuteError`",39,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",39,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,[[["self"]],["f"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",41,N],[13,"Second","","An item from the second stream",41,N],[13,"Both","","Items from both streams",41,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll","","",42,[[["self"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll","","",44,[[["self"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"poll","","",46,[[["self"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",48,[[["self"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",49,[[["self"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["self"]],["poll",["option"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["poll"]]],[11,"close","","",51,[[["self"]],["poll"]]],[11,"poll","","",51,[[["self"]],["poll",["option"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["poll"]]],[11,"close","","",52,[[["self"]],["poll"]]],[11,"poll","","",52,[[["self"]],["poll",["option"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["poll"]]],[11,"close","","",53,[[["self"]],["poll"]]],[11,"poll","","",53,[[["self"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"poll","","",54,[[["self"]],["poll"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,[[["self"]],["s"]]],[11,"poll","","",56,[[["self"]],["poll",["option"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["poll"]]],[11,"close","","",56,[[["self"]],["poll"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["poll"]]],[11,"close","","",57,[[["self"]],["poll"]]],[11,"poll","","",57,[[["self"]],["poll",["option"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["option"]]],[11,"poll","","",58,[[["self"]],["poll"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["poll"]]],[11,"close","","",59,[[["self"]],["poll"]]],[11,"poll","","",59,[[["self"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["poll"]]],[11,"close","","",60,[[["self"]],["poll"]]],[11,"poll","","",60,[[["self"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["s"]]],[11,"start_send","","",61,N],[11,"poll_complete","","",61,[[["self"]],["poll"]]],[11,"close","","",61,[[["self"]],["poll"]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["s"]]],[11,"start_send","","",62,N],[11,"poll_complete","","",62,[[["self"]],["poll"]]],[11,"close","","",62,[[["self"]],["poll"]]],[11,"poll","","",62,[[["self"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll","","",63,[[["self"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll","","",64,[[["self"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",65,N],[11,"poll_complete","","",65,[[["self"]],["poll"]]],[11,"close","","",65,[[["self"]],["poll"]]],[11,"poll","","",65,[[["self"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",66,N],[11,"poll_complete","","",66,[[["self"]],["poll"]]],[11,"close","","",66,[[["self"]],["poll"]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["self"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"poll","","",67,[[["self"]],["poll",["option"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"poll","","",68,[[["self"]],["poll",["option"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,[[["self"]],["s"]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["poll"]]],[11,"close","","",69,[[["self"]],["poll"]]],[11,"poll","","",69,[[["self"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["s"]]],[11,"start_send","","",70,N],[11,"poll_complete","","",70,[[["self"]],["poll"]]],[11,"close","","",70,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,[[["self"]],["s"]]],[11,"start_send","","",71,N],[11,"poll_complete","","",71,[[["self"]],["poll"]]],[11,"close","","",71,[[["self"]],["poll"]]],[11,"poll","","",71,[[["self"]],["poll",["option"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["s"]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["poll"]]],[11,"close","","",72,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",73,N],[11,"poll_complete","","",73,[[["self"]],["poll"]]],[11,"close","","",73,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"poll","","",74,[[["self"]],["poll",["option"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"poll","","",75,[[["self"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["poll"]]],[11,"close","","",77,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll",["option"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"poll","","",78,[[["self"]],["poll",["option"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["poll"]]],[11,"close","","",78,[[["self"]],["poll"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["poll"]]],[11,"close","","",80,[[["self"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"poll","","",80,[[["self"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll","","",81,[[["self"]],["poll",["vec"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"next","","",82,[[["self"]],["option"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll","","",83,[[["self"]],["poll",["option"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["poll"]]],[11,"close","","",84,[[["self"]],["poll"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",85,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",85,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",85,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,[[["self"]],["itermut"]]],[11,"poll","","",85,[[["self"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"drop","","",85,[[["self"]]]],[11,"from_iter","","",85,[[["t"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,N],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",87,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",87,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",87,[[["self"],["t"]]]],[11,"poll","","",87,[[["self"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",87,[[["t"]],["self"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",88,N],[16,"Error","","The type of error this stream may generate.",88,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",88,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",88,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",88,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",88,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"clone","","",89,[[["self"]],["with"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",89,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,[[["self"]],["s"]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["poll"]]],[11,"close","","",89,[[["self"]],["poll"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",90,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,[[["self"]],["s"]]],[11,"poll","","",90,[[["self"]],["poll",["option"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["poll"]]],[11,"close","","",90,[[["self"]],["poll"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",91,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",91,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,[[["self"]],["s"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"clone","","",92,[[["self"]],["sinkfromerr"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,[[["self"]],["s"]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["poll"]]],[11,"close","","",92,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll",["option"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",93,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",93,[[["self"]],["s"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"clone","","",95,[[["self"]],["sinkmaperr"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["poll"]]],[11,"close","","",95,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["poll"]]],[11,"close","","",96,[[["self"]],["poll"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"poll","","",97,[[["self"]],["poll",["option"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["poll"]]],[11,"close","","",97,[[["self"]],["poll"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",99,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,N],[10,"start_send","","Begin the process of sending a value to the sink.",99,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",99,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",99,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",99,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",99,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",100,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",101,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",102,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",102,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",104,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",104,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",104,[[["self"]],["bool"]]],[11,"drop","","",104,[[["self"]]]],[11,"clone","","",105,[[["self"]],["canceled"]]],[11,"eq","","",105,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"description","","",105,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",103,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",103,[[["self"]],["result",["option","canceled"]]]],[11,"poll","","",103,[[["self"]],["poll",["canceled"]]]],[11,"drop","","",103,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",106,[[["self"]]]],[11,"poll","","",106,[[["self"]],["poll"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"drop","","",106,[[["self"]]]],[11,"poll","","",107,[[["self"]],["poll"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"drop","","",107,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["senderror"]]],[11,"eq","","",112,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",112,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",113,[[["self"]],["trysenderror"]]],[11,"eq","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"description","","",112,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",112,[[["self"]],["t"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"description","","",113,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",113,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",113,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",113,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",108,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",108,[[["self"]],["bool"]]],[11,"start_send","","",108,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",108,[[["self"]],["poll",["senderror"]]]],[11,"close","","",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",109,[[["self"]],["bool"]]],[11,"unbounded_send","","Sends the provided message along this channel.",109,[[["self"],["t"]],["result",["senderror"]]]],[11,"start_send","","",109,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",109,[[["self"]],["poll",["senderror"]]]],[11,"close","","",109,[[["self"]],["poll",["senderror"]]]],[11,"clone","","",109,[[["self"]],["unboundedsender"]]],[11,"clone","","",108,[[["self"]],["sender"]]],[11,"drop","","",108,[[["self"]]]],[11,"close","","Closes the receiving half",110,[[["self"]]]],[11,"poll","","",110,[[["self"]],["poll",["option"]]]],[11,"drop","","",110,[[["self"]]]],[11,"close","","Closes the receiving half",111,[[["self"]]]],[11,"poll","","",111,[[["self"]],["poll",["option"]]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"poll","","",115,[[["self"]],["poll"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",116,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",116,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",116,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",116,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",116,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"deref","","",117,[[["self"]],["t"]]],[11,"deref_mut","","",117,[[["self"]],["t"]]],[11,"drop","","",117,[[["self"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"poll","","",118,[[["self"]],["poll",["bilockacquired"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",119,[[["self"]],["bilock"]]],[11,"deref","","",119,[[["self"]],["t"]]],[11,"deref_mut","","",119,[[["self"]],["t"]]],[11,"drop","","",119,[[["self"]]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["self"]]],[11,"start_send","","",120,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",120,[[["self"]],["poll",["senderror"]]]],[11,"close","","",120,[[["self"]],["poll",["senderror"]]]],[11,"drop","","",120,[[["self"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",121,[[["self"]]]],[11,"poll","","",121,[[["self"]],["poll",["option"]]]],[11,"drop","","",121,[[["self"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["self"]]],[11,"start_send","","",122,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",122,[[["self"]],["poll",["senderror"]]]],[11,"close","","",122,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",122,[[["self"],["t"]],["result",["senderror"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",123,[[["self"]]]],[11,"poll","","",123,[[["self"]],["poll",["option"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"description","","",124,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",124,[[["self"]],["t"]]],[11,"poll","","",125,[[["self"]],["poll",["option"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"poll","","",126,[[["self"]],["poll"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",127,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",127,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",127,[[["self"]],["bool"]]],[11,"drop","","",127,[[["self"]]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",128,[[["self"]]]],[11,"poll","","",128,[[["self"]],["poll"]]],[11,"drop","","",128,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",129,[[["self"]]]],[11,"poll","","",129,[[["self"]],["poll"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",131,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",131,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",131,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",131,[[["self"]]]],[11,"default","","",131,[[],["self"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",132,[[["self"],["f"]],["r"]]],[11,"wait_future","futures::executor","Waits for the internal future to complete, blocking this thread's execution until it does.",133,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",133,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",133,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",133,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",133,[[["self"]],["result"]]],[11,"clone","futures::task","",134,[[["self"]],["unparkevent"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",134,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"from","futures::executor","",135,[[["arc"]],["notifyhandle"]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[11,"clone","futures::task","",136,[[["self"]],["task"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",136,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",136,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",136,[[["self"]],["bool"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",133,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",133,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",133,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",135,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",135,[[["self"],["usize"]]]],[11,"clone","","",135,[[["self"]],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"drop","","",135,[[["self"]]]],[11,"from","","",135,[[["t"]],["notifyhandle"]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"]={"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",N,N],[3,"Builder","","Thread pool configuration object",N,N],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,[[["usize"]],["cpupool"]]],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,[[],["cpupool"]]],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,[[["self"],["f"]],["cpufuture"]]],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,[[["self"],["f"]],["cpufuture"]]],[11,"execute","","",0,[[["self"],["f"]],["result",["executeerror"]]]],[11,"clone","","",0,[[["self"]],["cpupool"]]],[11,"drop","","",0,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",2,[[["self"]]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,[[],["builder"]]],[11,"pool_size","","Set size of a future CpuPool",1,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",1,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,[[["self"],["f"]],["self"]]],[11,"create","","Create CpuPool with configured parameters",1,[[["self"]],["cpupool"]]]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["generic_array"]={"doc":"This crate implements a structure that can be used as a generic array type.use Core Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:","items":[[5,"transmute","generic_array","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[3,"GenericArray","","Struct representing a generic array - `GenericArray<T, N>` works like [T; N]",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["genericarray"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["genericarray"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["genericarray"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"borrow","","",0,N],[11,"borrow_mut","","",0,N],[11,"as_ref","","",0,N],[11,"as_mut","","",0,N],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[0,"arr","","Implementation for `arr!` macro.",N,N],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",N,N],[8,"AddLength","","Helper trait for `arr!` macro",N,N],[16,"Output","","Resulting length",1,N],[0,"iter","generic_array","`GenericArray` iterator implementation.",N,N],[3,"GenericArrayIter","generic_array::iter","An iterator that moves out of a `GenericArray`",N,N],[11,"into_iter","generic_array","",0,N],[11,"drop","generic_array::iter","",2,[[["self"]]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"count","","",2,[[["self"]],["usize"]]],[11,"nth","","",2,[[["self"],["usize"]],["option"]]],[11,"last","","",2,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[8,"ArrayLength","generic_array","Trait making `GenericArray` work, marking types to be used as length of an array",N,N],[16,"ArrayType","","Associated type representing the array type for the number",3,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"generate","","Initializes a new `GenericArray` instance using the given function.",0,[[["f"]],["genericarray"]]],[11,"map_slice","","Map a function over a slice to a `GenericArray`.",0,N],[11,"map","","Maps a `GenericArray` to another `GenericArray`.",0,[[["self"],["f"]],["genericarray"]]],[11,"map_ref","","Maps a `GenericArray` to another `GenericArray` by reference.",0,[[["self"],["f"]],["genericarray"]]],[11,"zip","","Combines two `GenericArray` instances and iterates through both of them, initializing a new `GenericArray` with the result of the zipped mapping function.",0,[[["self"],["genericarray"],["f"]],["genericarray"]]],[11,"zip_ref","","Combines two `GenericArray` instances and iterates through both of them by reference, initializing a new `GenericArray` with the result of the zipped mapping function.",0,[[["self"],["genericarray"],["f"]],["genericarray"]]],[11,"as_slice","","Extracts a slice containing the entire array.",0,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire array.",0,N],[11,"from_slice","","Converts slice to a generic array reference with inferred length;",0,N],[11,"from_mut_slice","","Converts mutable slice to a mutable generic array reference",0,N],[11,"clone_from_slice","","Construct a `GenericArray` from a slice by cloning its content",0,N],[11,"from_exact_iter","","",0,[[["i"]],["option"]]],[11,"from_iter","","",0,[[["i"]],["genericarray"]]],[14,"arr","","Macro allowing for easy generation of Generic Arrays. Example: `let test = arr![u32; 1, 2, 3];`",N,N]],"paths":[[3,"GenericArray"],[8,"AddLength"],[3,"GenericArrayIter"],[8,"ArrayLength"]]};
searchIndex["glob"]={"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",N,N],[3,"GlobError","","A glob iteration error.",N,N],[3,"PatternError","","A pattern parsing error.",N,N],[12,"pos","","The approximate character index of where the error occurred.",0,N],[12,"msg","","A message describing the error.",0,N],[3,"Pattern","","A compiled Unix shell style pattern.",N,N],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",N,N],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,N],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,N],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,N],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",N,[[["str"]],["result",["paths","patternerror"]]]],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",N,[[["str"],["matchoptions"]],["result",["paths","patternerror"]]]],[6,"GlobResult","","An alias for a glob iteration result.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"path","","The Path that the error corresponds to.",2,[[["self"]],["path"]]],[11,"error","","The error in question.",2,[[["self"]],["error"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["globresult"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["pattern"]]],[11,"eq","","",4,[[["self"],["pattern"]],["bool"]]],[11,"ne","","",4,[[["self"],["pattern"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["pattern"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["pattern"]],["bool"]]],[11,"le","","",4,[[["self"],["pattern"]],["bool"]]],[11,"gt","","",4,[[["self"],["pattern"]],["bool"]]],[11,"ge","","",4,[[["self"],["pattern"]],["bool"]]],[11,"cmp","","",4,[[["self"],["pattern"]],["ordering"]]],[11,"hash","","",4,N],[11,"default","","",4,[[],["pattern"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["pattern","patternerror"]]]],[11,"new","","This function compiles Unix shell style patterns.",4,[[["str"]],["result",["pattern","patternerror"]]]],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,[[["str"]],["string"]]],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,[[["self"],["str"]],["bool"]]],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,[[["self"],["path"]],["bool"]]],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,[[["self"],["str"],["matchoptions"]],["bool"]]],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,[[["self"],["path"],["matchoptions"]],["bool"]]],[11,"as_str","","Access the original glob pattern.",4,[[["self"]],["str"]]],[11,"clone","","",1,[[["self"]],["matchoptions"]]],[11,"eq","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"ne","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["matchoptions"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"le","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"gt","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"ge","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"cmp","","",1,[[["self"],["matchoptions"]],["ordering"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["matchoptions"]]],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,[[],["matchoptions"]]]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["h2"]={"doc":"An asynchronous, HTTP/2.0 server and client implementation.","items":[[3,"Error","h2","Represents HTTP/2.0 operation errors.",N,N],[3,"Reason","","HTTP/2.0 error codes.",N,N],[3,"SendStream","","Sends the body stream and trailers to the remote peer.",N,N],[3,"StreamId","","A stream identifier, as described in [Section 5.1.1] of RFC 7540.",N,N],[3,"RecvStream","","Receives the body stream and trailers from the remote peer.",N,N],[3,"ReleaseCapacity","","A handle to release window capacity to a remote stream.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"reason","","If the error was caused by the remote peer, the error reason.",0,[[["self"]],["option",["reason"]]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["reason"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"eq","","",1,[[["self"],["reason"]],["bool"]]],[11,"ne","","",1,[[["self"],["reason"]],["bool"]]],[11,"clone","","",1,[[["self"]],["reason"]]],[18,"NO_ERROR","","The associated condition is not a result of an error.",1,N],[18,"PROTOCOL_ERROR","","The endpoint detected an unspecific protocol error.",1,N],[18,"INTERNAL_ERROR","","The endpoint encountered an unexpected internal error.",1,N],[18,"FLOW_CONTROL_ERROR","","The endpoint detected that its peer violated the flow-control protocol.",1,N],[18,"SETTINGS_TIMEOUT","","The endpoint sent a SETTINGS frame but did not receive a response in a timely manner.",1,N],[18,"STREAM_CLOSED","","The endpoint received a frame after a stream was half-closed.",1,N],[18,"FRAME_SIZE_ERROR","","The endpoint received a frame with an invalid size.",1,N],[18,"REFUSED_STREAM","","The endpoint refused the stream prior to performing any application processing.",1,N],[18,"CANCEL","","Used by the endpoint to indicate that the stream is no longer needed.",1,N],[18,"COMPRESSION_ERROR","","The endpoint is unable to maintain the header compression context for the connection.",1,N],[18,"CONNECT_ERROR","","The connection established in response to a CONNECT request was reset or abnormally closed.",1,N],[18,"ENHANCE_YOUR_CALM","","The endpoint detected that its peer is exhibiting a behavior that might be generating excessive load.",1,N],[18,"INADEQUATE_SECURITY","","The underlying transport has properties that do not meet minimum security requirements.",1,N],[18,"HTTP_1_1_REQUIRED","","The endpoint requires that HTTP/1.1 be used instead of HTTP/2.",1,N],[11,"description","","Get a string description of the error code.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["u32"]],["reason"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"client","","Client implementation of the HTTP/2.0 protocol.",N,N],[3,"Handshake","h2::client","Performs the HTTP/2.0 connection handshake.",N,N],[3,"SendRequest","","Initializes new HTTP/2.0 streams on a connection by sending a request.",N,N],[3,"ReadySendRequest","","Returns a `SendRequest` instance once it is ready to send at least one request.",N,N],[3,"Connection","","Manages all state associated with an HTTP/2.0 client connection.",N,N],[3,"ResponseFuture","","A future of an HTTP response.",N,N],[3,"Builder","","Builds client connections with custom configuration values.",N,N],[5,"handshake","","Creates a new configured HTTP/2.0 client with default configuration values backed by `io`.",N,[[["t"]],["handshake",["bytes"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["builder"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","Returns `Ready` when the connection can initialize a new HTTP/2.0 stream.",5,[[["self"]],["poll",["error"]]]],[11,"ready","","Consumes `self`, returning a future that returns `self` back once it is ready to send a request.",5,[[["self"]],["readysendrequest"]]],[11,"send_request","","Sends a HTTP/2.0 request to the server.",5,[[["self"],["request"],["bool"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"new","","Returns a new client builder instance initialized with default configuration values.",4,[[],["builder"]]],[11,"initial_window_size","","Indicates the initial window size (in octets) for stream-level flow control for received data.",4,[[["self"],["u32"]],["self"]]],[11,"initial_connection_window_size","","Indicates the initial window size (in octets) for connection-level flow control for received data.",4,[[["self"],["u32"]],["self"]]],[11,"max_frame_size","","Indicates the size (in octets) of the largest HTTP/2.0 frame payload that the configured client is able to accept.",4,[[["self"],["u32"]],["self"]]],[11,"max_header_list_size","","Sets the max size of received header frames.",4,[[["self"],["u32"]],["self"]]],[11,"max_concurrent_streams","","Sets the maximum number of concurrent streams.",4,[[["self"],["u32"]],["self"]]],[11,"initial_max_send_streams","","Sets the initial maximum of locally initiated (send) streams.",4,[[["self"],["usize"]],["self"]]],[11,"max_concurrent_reset_streams","","Sets the maximum number of concurrent locally reset streams.",4,[[["self"],["usize"]],["self"]]],[11,"reset_stream_duration","","Sets the maximum number of concurrent locally reset streams.",4,[[["self"],["duration"]],["self"]]],[11,"enable_push","","Enables or disables server push promises.",4,[[["self"],["bool"]],["self"]]],[11,"handshake","","Creates a new configured HTTP/2.0 client backed by `io`.",4,[[["self"],["t"]],["handshake"]]],[11,"default","","",4,[[],["builder"]]],[11,"set_target_window_size","","Sets the target window size for the whole connection.",6,[[["self"],["u32"]]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"stream_id","","Returns the stream ID of the response stream.",3,[[["self"]],["streamid"]]],[0,"server","h2","Server implementation of the HTTP/2.0 protocol.",N,N],[3,"Handshake","h2::server","In progress HTTP/2.0 connection handshake future.",N,N],[3,"Connection","","Accepts inbound HTTP/2.0 streams on a connection.",N,N],[3,"Builder","","Builds server connections with custom configuration values.",N,N],[3,"SendResponse","","Send a response back to the client",N,N],[5,"handshake","","Creates a new configured HTTP/2.0 server with default configuration values backed by `io`.",N,[[["t"]],["handshake",["bytes"]]]],[11,"clone","","",8,[[["self"]],["builder"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"set_target_window_size","","Sets the target window size for the whole connection.",10,[[["self"],["u32"]]]],[11,"poll_close","","Returns `Ready` when the underlying connection has closed.",10,[[["self"]],["poll",["error"]]]],[11,"abrupt_shutdown","","Sets the connection to a GOAWAY state.",10,[[["self"],["reason"]]]],[11,"graceful_shutdown","","Starts a [graceful shutdown][1] process.",10,[[["self"]]]],[11,"poll","","",10,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new server builder instance initialized with default configuration values.",8,[[],["builder"]]],[11,"initial_window_size","","Indicates the initial window size (in octets) for stream-level flow control for received data.",8,[[["self"],["u32"]],["self"]]],[11,"initial_connection_window_size","","Indicates the initial window size (in octets) for connection-level flow control for received data.",8,[[["self"],["u32"]],["self"]]],[11,"max_frame_size","","Indicates the size (in octets) of the largest HTTP/2.0 frame payload that the configured server is able to accept.",8,[[["self"],["u32"]],["self"]]],[11,"max_header_list_size","","Sets the max size of received header frames.",8,[[["self"],["u32"]],["self"]]],[11,"max_concurrent_streams","","Sets the maximum number of concurrent streams.",8,[[["self"],["u32"]],["self"]]],[11,"max_concurrent_reset_streams","","Sets the maximum number of concurrent locally reset streams.",8,[[["self"],["usize"]],["self"]]],[11,"reset_stream_duration","","Sets the maximum number of concurrent locally reset streams.",8,[[["self"],["duration"]],["self"]]],[11,"handshake","","Creates a new configured HTTP/2.0 server backed by `io`.",8,[[["self"],["t"]],["handshake"]]],[11,"default","","",8,[[],["builder"]]],[11,"send_response","","Send a response to a client request.",9,[[["self"],["response"],["bool"]],["result",["sendstream","error"]]]],[11,"send_reset","","Send a stream reset to the peer.",9,[[["self"],["reason"]]]],[11,"poll_reset","","Polls to be notified when the client resets this stream.",9,[[["self"]],["poll",["reason","error"]]]],[11,"stream_id","","Returns the stream ID of the response stream.",9,[[["self"]],["streamid"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","h2","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["streamid"]]],[11,"eq","","",13,[[["self"],["streamid"]],["bool"]]],[11,"ne","","",13,[[["self"],["streamid"]],["bool"]]],[11,"hash","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"reserve_capacity","","Requests capacity to send data.",12,[[["self"],["usize"]]]],[11,"capacity","","Returns the stream's current send capacity.",12,[[["self"]],["usize"]]],[11,"poll_capacity","","Requests to be notified when the stream's capacity increases.",12,[[["self"]],["poll",["option","error"]]]],[11,"send_data","","Sends a single data frame to the remote peer.",12,[[["self"],["b"],["bool"]],["result",["error"]]]],[11,"send_trailers","","Sends trailers to the remote peer.",12,[[["self"],["headermap"]],["result",["error"]]]],[11,"send_reset","","Resets the stream.",12,[[["self"],["reason"]]]],[11,"poll_reset","","Polls to be notified when the client resets this stream.",12,[[["self"]],["poll",["reason","error"]]]],[11,"stream_id","","Returns the stream ID of this `SendStream`.",12,[[["self"]],["streamid"]]],[11,"is_end_stream","","Returns true if the receive half has reached the end of stream.",15,[[["self"]],["bool"]]],[11,"release_capacity","","Get a mutable reference to this streams `ReleaseCapacity`.",15,[[["self"]],["releasecapacity"]]],[11,"poll_trailers","","Returns received trailers.",15,[[["self"]],["poll",["option","error"]]]],[11,"stream_id","","Returns the stream ID of this stream.",15,[[["self"]],["streamid"]]],[11,"poll","","",15,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"stream_id","","Returns the stream ID of the stream whose capacity will be released by this `ReleaseCapacity`.",14,[[["self"]],["streamid"]]],[11,"release_capacity","","Release window capacity back to remote stream.",14,[[["self"],["usize"]],["result",["error"]]]],[11,"clone","","",14,[[["self"]],["self"]]]],"paths":[[3,"Error"],[3,"Reason"],[3,"ReadySendRequest"],[3,"ResponseFuture"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"Builder"],[3,"SendResponse"],[3,"Connection"],[3,"Handshake"],[3,"SendStream"],[3,"StreamId"],[3,"ReleaseCapacity"],[3,"RecvStream"]]};
searchIndex["http"]={"doc":"A general purpose library of common HTTP types","items":[[3,"Error","http","A generic \"error\" for HTTP connections",N,N],[3,"Extensions","","A type map of protocol extensions.",N,N],[3,"HeaderMap","","A set of HTTP headers",N,N],[0,"header","","HTTP header types",N,N],[3,"HeaderMap","http::header","A set of HTTP headers",N,N],[3,"Iter","","`HeaderMap` entry iterator.",N,N],[3,"Keys","","An iterator over `HeaderMap` keys.",N,N],[3,"Values","","`HeaderMap` value iterator.",N,N],[3,"Drain","","A drain iterator for `HeaderMap`.",N,N],[3,"GetAll","","A view to all values stored in a single entry.",N,N],[3,"VacantEntry","","A view into a single empty location in a `HeaderMap`.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `HeaderMap`.",N,N],[3,"ValueIter","","An iterator of all values associated with a single header name.",N,N],[3,"ValueIterMut","","A mutable iterator of all values associated with a single header name.",N,N],[3,"ValueDrain","","An drain iterator of all values associated with a single header name.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `HeaderMap`.",N,N],[3,"HeaderName","","Represents an HTTP header field name",N,N],[3,"InvalidHeaderName","","A possible error when converting a `HeaderName` from another type.",N,N],[3,"InvalidHeaderNameBytes","","A possible error when converting a `HeaderName` from another type.",N,N],[3,"HeaderValue","","Represents an HTTP header field value.",N,N],[3,"InvalidHeaderValue","","A possible error when converting a `HeaderValue` from a string or byte slice.",N,N],[3,"InvalidHeaderValueBytes","","A possible error when converting a `HeaderValue` from a string or byte slice.",N,N],[3,"ToStrError","","A possible error when converting a `HeaderValue` to a string representation.",N,N],[4,"Entry","","A view into a single location in a `HeaderMap`, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry",0,N],[13,"Vacant","","A vacant entry",0,N],[11,"clone","http","",1,[[["self"]],["headermap"]]],[11,"fmt","http::header","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","http","Create an empty `HeaderMap`.",1,[[],["self"]]],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",1,[[["usize"]],["headermap"]]],[11,"len","","Returns the number of headers stored in the map.",1,[[["self"]],["usize"]]],[11,"keys_len","","Returns the number of keys stored in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",1,[[["self"]]]],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",1,[[["self"],["usize"]]]],[11,"get","","Returns a reference to the value associated with the key.",1,[[["self"],["k"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",1,[[["self"],["k"]],["option"]]],[11,"get_all","","Returns a view of all values associated with a key.",1,[[["self"],["k"]],["getall"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["k"]],["bool"]]],[11,"iter","","An iterator visiting all key-value pairs.",1,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",1,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys.",1,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values.",1,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably.",1,[[["self"]],["valuesmut"]]],[11,"drain","","Clears the map, returning all entries as an iterator.",1,[[["self"]],["drain"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["result",["entry","invalidheadername"]]]],[11,"insert","","Inserts a key-value pair into the map.",1,[[["self"],["k"],["t"]],["option"]]],[11,"append","","Inserts a key-value pair into the map.",1,[[["self"],["k"],["t"]],["bool"]]],[11,"remove","","Removes a key from the map, returning the value associated with the key.",1,[[["self"],["k"]],["option"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",1,[[["self"]],["intoiter"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"eq","","",1,[[["self"],["headermap"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["self"]]],[11,"index","","Panics Using the index operator will cause a panic if the header you're querying isn't set.",1,[[["self"],["k"]],["t"]]],[11,"next","http::header","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"drop","","",6,[[["self"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty.",0,[[["self"],["t"]],["t"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty.",0,[[["self"],["f"]],["t"]]],[11,"key","","Returns a reference to the entry's key",0,[[["self"]],["headername"]]],[11,"key","","Returns a reference to the entry's key",8,[[["self"]],["headername"]]],[11,"into_key","","Take ownership of the key",8,[[["self"]],["headername"]]],[11,"insert","","Insert the value into the entry.",8,[[["self"],["t"]],["t"]]],[11,"insert_entry","","Insert the value into the entry.",8,[[["self"],["t"]],["occupiedentry"]]],[11,"iter","","Returns an iterator visiting all values associated with the entry.",7,[[["self"]],["valueiter"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"into_iter","","",7,[[["self"]],["valueiter"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"drop","","",3,[[["self"]]]],[11,"key","","Returns a reference to the entry's key.",9,[[["self"]],["headername"]]],[11,"get","","Get a reference to the first value in the entry.",9,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the first value in the entry.",9,[[["self"]],["t"]]],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference to the first value.",9,[[["self"]],["t"]]],[11,"insert","","Sets the value of the entry.",9,[[["self"],["t"]],["t"]]],[11,"insert_mult","","Sets the value of the entry.",9,[[["self"],["t"]],["valuedrain"]]],[11,"append","","Insert the value into the entry.",9,[[["self"],["t"]]]],[11,"remove","","Remove the entry from the map.",9,[[["self"]],["t"]]],[11,"remove_entry","","Remove the entry from the map.",9,N],[11,"remove_entry_mult","","Remove the entry from the map.",9,N],[11,"iter","","Returns an iterator visiting all values associated with the entry.",9,[[["self"]],["valueiter"]]],[11,"iter_mut","","Returns an iterator mutably visiting all values associated with the entry.",9,[[["self"]],["valueitermut"]]],[11,"into_iter","","",9,[[["self"]],["valueitermut"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"drop","","",12,[[["self"]]]],[11,"clone","","",13,[[["self"]],["headername"]]],[11,"eq","","",13,[[["self"],["headername"]],["bool"]]],[11,"ne","","",13,[[["self"],["headername"]],["bool"]]],[11,"hash","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from_bytes","","Converts a slice of bytes to an HTTP header name.",13,N],[11,"from_lowercase","","Converts a slice of bytes to an HTTP header name.",13,N],[11,"from_static","","Converts a static string to a HTTP header name.",13,[[["str"]],["headername"]]],[11,"as_str","","Returns a `str` representation of the header.",13,[[["self"]],["str"]]],[11,"from_str","","",13,[[["str"]],["result",["headername","invalidheadername"]]]],[11,"as_ref","","",13,[[["self"]],["str"]]],[11,"as_ref","","",13,N],[11,"borrow","","",13,[[["self"]],["str"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,[[["headername"]],["headername"]]],[11,"try_from","","",13,[[["headername"]],["result"]]],[11,"try_from","","",13,[[["str"]],["result"]]],[11,"try_from","","",13,N],[11,"try_from","","",13,[[["bytes"]],["result"]]],[11,"eq","","",13,[[["self"],["headername"]],["bool"]]],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,[[["self"],["str"]],["bool"]]],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,[[["self"],["str"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"clone","","",16,[[["self"]],["headervalue"]]],[11,"hash","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from_static","","Convert a static string to a `HeaderValue`.",16,[[["str"]],["headervalue"]]],[11,"from_str","","Attempt to convert a string to a `HeaderValue`.",16,[[["str"]],["result",["headervalue","invalidheadervalue"]]]],[11,"from_name","","Converts a HeaderName into a HeaderValue",16,[[["headername"]],["headervalue"]]],[11,"from_bytes","","Attempt to convert a byte slice to a `HeaderValue`.",16,N],[11,"from_shared","","Attempt to convert a `Bytes` buffer to a `HeaderValue`.",16,[[["bytes"]],["result",["headervalue","invalidheadervaluebytes"]]]],[11,"from_shared_unchecked","","Convert a `Bytes` directly into a `HeaderValue` without validating.",16,[[["bytes"]],["headervalue"]]],[11,"to_str","","Yields a `&str` slice if the `HeaderValue` only contains visible ASCII chars.",16,[[["self"]],["result",["str","tostrerror"]]]],[11,"len","","Returns the length of `self`.",16,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `HeaderValue` has a length of zero bytes.",16,[[["self"]],["bool"]]],[11,"as_bytes","","Converts a `HeaderValue` to a byte slice.",16,N],[11,"set_sensitive","","Mark that the header value represents sensitive information.",16,[[["self"],["bool"]]]],[11,"is_sensitive","","Returns `true` if the value represents sensitive data.",16,[[["self"]],["bool"]]],[11,"as_ref","","",16,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"from","","",16,[[["headername"]],["headervalue"]]],[11,"from","","",16,[[["u16"]],["headervalue"]]],[11,"try_from","","",16,[[["u16"]],["result"]]],[11,"from","","",16,[[["i16"]],["headervalue"]]],[11,"try_from","","",16,[[["i16"]],["result"]]],[11,"from","","",16,[[["u32"]],["headervalue"]]],[11,"try_from","","",16,[[["u32"]],["result"]]],[11,"from","","",16,[[["i32"]],["headervalue"]]],[11,"try_from","","",16,[[["i32"]],["result"]]],[11,"from","","",16,[[["u64"]],["headervalue"]]],[11,"try_from","","",16,[[["u64"]],["result"]]],[11,"from","","",16,[[["i64"]],["headervalue"]]],[11,"try_from","","",16,[[["i64"]],["result"]]],[11,"from","","",16,[[["usize"]],["headervalue"]]],[11,"try_from","","",16,[[["usize"]],["result"]]],[11,"from","","",16,[[["isize"]],["headervalue"]]],[11,"try_from","","",16,[[["isize"]],["result"]]],[11,"from_str","","",16,[[["str"]],["result",["headervalue"]]]],[11,"from","","",16,[[["headervalue"]],["self"]]],[11,"try_from","","",16,[[["headervalue"]],["result"]]],[11,"try_from","","",16,[[["str"]],["result"]]],[11,"try_from","","",16,N],[11,"try_from","","",16,[[["string"]],["result"]]],[11,"try_from","","",16,[[["bytes"]],["result"]]],[11,"try_from","","",16,[[["headername"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"description","","",17,[[["self"]],["str"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"description","","",18,[[["self"]],["str"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"description","","",19,[[["self"]],["str"]]],[11,"eq","","",16,[[["self"],["headervalue"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["headervalue"]],["option",["ordering"]]]],[11,"cmp","","",16,[[["self"],["self"]],["ordering"]]],[11,"eq","","",16,[[["self"],["str"]],["bool"]]],[11,"eq","","",16,N],[11,"partial_cmp","","",16,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",16,N],[11,"eq","","",16,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",16,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["t"]],["option",["ordering"]]]],[17,"ACCEPT","","Advertises which content types the client is able to understand.",N,N],[17,"ACCEPT_CHARSET","","Advertises which character set the client is able to understand.",N,N],[17,"ACCEPT_ENCODING","","Advertises which content encoding the client is able to understand.",N,N],[17,"ACCEPT_LANGUAGE","","Advertises which languages the client is able to understand.",N,N],[17,"ACCEPT_RANGES","","Marker used by the server to advertise partial request support.",N,N],[17,"ACCESS_CONTROL_ALLOW_CREDENTIALS","","Preflight response indicating if the response to the request can be exposed to the page.",N,N],[17,"ACCESS_CONTROL_ALLOW_HEADERS","","Preflight response indicating permitted HTTP headers.",N,N],[17,"ACCESS_CONTROL_ALLOW_METHODS","","Preflight header response indicating permitted access methods.",N,N],[17,"ACCESS_CONTROL_ALLOW_ORIGIN","","Indicates whether the response can be shared with resources with the given origin.",N,N],[17,"ACCESS_CONTROL_EXPOSE_HEADERS","","Indicates which headers can be exposed as part of the response by listing their names.",N,N],[17,"ACCESS_CONTROL_MAX_AGE","","Indicates how long the results of a preflight request can be cached.",N,N],[17,"ACCESS_CONTROL_REQUEST_HEADERS","","Informs the server which HTTP headers will be used when an actual request is made.",N,N],[17,"ACCESS_CONTROL_REQUEST_METHOD","","Informs the server know which HTTP method will be used when the actual request is made.",N,N],[17,"AGE","","Indicates the time in seconds the object has been in a proxy cache.",N,N],[17,"ALLOW","","Lists the set of methods support by a resource.",N,N],[17,"ALT_SVC","","Advertises the availability of alternate services to clients.",N,N],[17,"AUTHORIZATION","","Contains the credentials to authenticate a user agent with a server.",N,N],[17,"CACHE_CONTROL","","Specifies directives for caching mechanisms in both requests and responses.",N,N],[17,"CONNECTION","","Controls whether or not the network connection stays open after the current transaction finishes.",N,N],[17,"CONTENT_DISPOSITION","","Indicates if the content is expected to be displayed inline.",N,N],[17,"CONTENT_ENCODING","","Used to compress the media-type.",N,N],[17,"CONTENT_LANGUAGE","","Used to describe the languages intended for the audience.",N,N],[17,"CONTENT_LENGTH","","Indicates the size fo the entity-body.",N,N],[17,"CONTENT_LOCATION","","Indicates an alternate location for the returned data.",N,N],[17,"CONTENT_RANGE","","Indicates where in a full body message a partial message belongs.",N,N],[17,"CONTENT_SECURITY_POLICY","","Allows controlling resources the user agent is allowed to load for a given page.",N,N],[17,"CONTENT_SECURITY_POLICY_REPORT_ONLY","","Allows experimenting with policies by monitoring their effects.",N,N],[17,"CONTENT_TYPE","","Used to indicate the media type of the resource.",N,N],[17,"COOKIE","","Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.",N,N],[17,"DNT","","Indicates the client's tracking preference.",N,N],[17,"DATE","","Contains the date and time at which the message was originated.",N,N],[17,"ETAG","","Identifier for a specific version of a resource.",N,N],[17,"EXPECT","","Indicates expectations that need to be fulfilled by the server in order to properly handle the request.",N,N],[17,"EXPIRES","","Contains the date/time after which the response is considered stale.",N,N],[17,"FORWARDED","","Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.",N,N],[17,"FROM","","Contains an Internet email address for a human user who controls the requesting user agent.",N,N],[17,"HOST","","Specifies the domain name of the server and (optionally) the TCP port number on which the server is listening.",N,N],[17,"IF_MATCH","","Makes a request conditional based on the E-Tag.",N,N],[17,"IF_MODIFIED_SINCE","","Makes a request conditional based on the modification date.",N,N],[17,"IF_NONE_MATCH","","Makes a request conditional based on the E-Tag.",N,N],[17,"IF_RANGE","","Makes a request conditional based on range.",N,N],[17,"IF_UNMODIFIED_SINCE","","Makes the request conditional based on the last modification date.",N,N],[17,"LAST_MODIFIED","","Content-Types that are acceptable for the response.",N,N],[17,"LINK","","Allows the server to point an interested client to another resource containing metadata about the requested resource.",N,N],[17,"LOCATION","","Indicates the URL to redirect a page to.",N,N],[17,"MAX_FORWARDS","","Indicates the max number of intermediaries the request should be sent through.",N,N],[17,"ORIGIN","","Indicates where a fetch originates from.",N,N],[17,"PRAGMA","","HTTP/1.0 header usually used for backwards compatibility.",N,N],[17,"PROXY_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a proxy.",N,N],[17,"PROXY_AUTHORIZATION","","Contains the credentials to authenticate a user agent to a proxy server.",N,N],[17,"PUBLIC_KEY_PINS","","Associates a specific cryptographic public key with a certain server.",N,N],[17,"PUBLIC_KEY_PINS_REPORT_ONLY","","Sends reports of pinning violation to the report-uri specified in the header.",N,N],[17,"RANGE","","Indicates the part of a document that the server should return.",N,N],[17,"REFERER","","Contains the address of the previous web page from which a link to the currently requested page was followed.",N,N],[17,"REFERRER_POLICY","","Governs which referrer information should be included with requests made.",N,N],[17,"REFRESH","","Informs the web browser that the current page or frame should be refreshed.",N,N],[17,"RETRY_AFTER","","The Retry-After response HTTP header indicates how long the user agent should wait before making a follow-up request. There are two main cases this header is used:",N,N],[17,"SEC_WEBSOCKET_ACCEPT","","The |Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake. It is sent from the server to the client to confirm that the server is willing to initiate the WebSocket connection.",N,N],[17,"SEC_WEBSOCKET_EXTENSIONS","","The |Sec-WebSocket-Extensions| header field is used in the WebSocket opening handshake. It is initially sent from the client to the server, and then subsequently sent from the server to the client, to agree on a set of protocol-level extensions to use for the duration of the connection.",N,N],[17,"SEC_WEBSOCKET_KEY","","The |Sec-WebSocket-Key| header field is used in the WebSocket opening handshake. It is sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket opening handshake. This helps ensure that the server does not accept connections from non-WebSocket clients (e.g., HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.",N,N],[17,"SEC_WEBSOCKET_PROTOCOL","","The |Sec-WebSocket-Protocol| header field is used in the WebSocket opening handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection.  This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.",N,N],[17,"SEC_WEBSOCKET_VERSION","","The |Sec-WebSocket-Version| header field is used in the WebSocket opening handshake.  It is sent from the client to the server to indicate the protocol version of the connection.  This enables servers to correctly interpret the opening handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner.",N,N],[17,"SERVER","","Contains information about the software used by the origin server to handle the request.",N,N],[17,"SET_COOKIE","","Used to send cookies from the server to the user agent.",N,N],[17,"STRICT_TRANSPORT_SECURITY","","Tells the client to communicate with HTTPS instead of using HTTP.",N,N],[17,"TE","","Informs the server of transfer encodings willing to be accepted as part of the response.",N,N],[17,"TRAILER","","Allows the sender to include additional fields at the end of chunked messages.",N,N],[17,"TRANSFER_ENCODING","","Specifies the form of encoding used to safely transfer the entity to the client.",N,N],[17,"UPGRADE","","Used as part of the exchange to upgrade the protocol.",N,N],[17,"UPGRADE_INSECURE_REQUESTS","","Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response.",N,N],[17,"USER_AGENT","","Contains a string that allows identifying the requesting client's software.",N,N],[17,"VARY","","Determines how to match future requests with cached responses.",N,N],[17,"VIA","","Added by proxies to track routing.",N,N],[17,"WARNING","","General HTTP header contains information about possible problems with the status of the message.",N,N],[17,"WWW_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a resource.",N,N],[17,"X_CONTENT_TYPE_OPTIONS","","Marker used by the server to indicate that the MIME types advertised in the `content-type` headers should not be changed and be followed.",N,N],[17,"X_DNS_PREFETCH_CONTROL","","Controls DNS prefetching.",N,N],[17,"X_FRAME_OPTIONS","","Indicates whether or not a browser should be allowed to render a page in a frame.",N,N],[17,"X_XSS_PROTECTION","","Stop pages from loading when an XSS attack is detected.",N,N],[8,"AsHeaderName","","A marker trait used to identify values that can be used as search keys to a `HeaderMap`.",N,N],[8,"IntoHeaderName","","A marker trait used to identify values that can be used as insert keys to a `HeaderMap`.",N,N],[0,"method","http","The HTTP request method",N,N],[3,"Method","http::method","The Request Method (VERB)",N,N],[3,"InvalidMethod","","A possible error value when converting `Method` from bytes.",N,N],[11,"clone","","",20,[[["self"]],["method"]]],[11,"eq","","",20,[[["self"],["method"]],["bool"]]],[11,"ne","","",20,[[["self"],["method"]],["bool"]]],[11,"hash","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[18,"GET","","GET",20,N],[18,"POST","","POST",20,N],[18,"PUT","","PUT",20,N],[18,"DELETE","","DELETE",20,N],[18,"HEAD","","HEAD",20,N],[18,"OPTIONS","","OPTIONS",20,N],[18,"CONNECT","","CONNECT",20,N],[18,"PATCH","","PATCH",20,N],[18,"TRACE","","TRACE",20,N],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",20,N],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",20,[[["self"]],["bool"]]],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",20,[[["self"]],["bool"]]],[11,"as_str","","Return a &str representation of the HTTP method",20,[[["self"]],["str"]]],[11,"as_ref","","",20,[[["self"]],["str"]]],[11,"eq","","",20,[[["self"],["method"]],["bool"]]],[11,"eq","","",20,[[["self"],["str"]],["bool"]]],[11,"eq","","",20,[[["self"],["str"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"default","","",20,[[],["method"]]],[11,"from","","",20,[[["method"]],["self"]]],[11,"try_from","","",20,[[["method"]],["result"]]],[11,"try_from","","",20,N],[11,"try_from","","",20,[[["str"]],["result"]]],[11,"from_str","","",20,[[["str"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"description","","",21,[[["self"]],["str"]]],[0,"request","http","HTTP request types.",N,N],[3,"Request","http::request","Represents an HTTP request.",N,N],[3,"Parts","","Component parts of an HTTP `Request`",N,N],[12,"method","","The request's method",22,N],[12,"uri","","The request's URI",22,N],[12,"version","","The request's version",22,N],[12,"headers","","The request's headers",22,N],[12,"extensions","","The request's extensions",22,N],[3,"Builder","","An HTTP request builder",N,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new builder-style object to manufacture a `Request`",24,[[],["builder"]]],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",24,[[["t"]],["builder"]]],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",24,[[["t"]],["builder"]]],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",24,[[["t"]],["builder"]]],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",24,[[["t"]],["builder"]]],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",24,[[["t"]],["builder"]]],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",24,[[["t"]],["builder"]]],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",24,[[["t"]],["builder"]]],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",24,[[["t"]],["builder"]]],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",24,[[["t"]],["builder"]]],[11,"new","","Creates a new blank `Request` with the body",24,[[["t"]],["request"]]],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",24,[[["parts"],["t"]],["request"]]],[11,"method","","Returns a reference to the associated HTTP method.",24,[[["self"]],["method"]]],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",24,[[["self"]],["method"]]],[11,"uri","","Returns a reference to the associated URI.",24,[[["self"]],["uri"]]],[11,"uri_mut","","Returns a mutable reference to the associated URI.",24,[[["self"]],["uri"]]],[11,"version","","Returns the associated version.",24,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",24,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",24,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",24,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",24,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",24,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",24,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",24,[[["self"]],["t"]]],[11,"into_body","","Consumes the request, returning just the body.",24,[[["self"]],["t"]]],[11,"into_parts","","Consumes the request returning the head and body parts.",24,N],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",24,[[["self"],["f"]],["request"]]],[11,"default","","",24,[[],["request"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Request`.",23,[[],["builder"]]],[11,"method","","Set the HTTP method for this request.",23,[[["self"],["t"]],["builder"]]],[11,"uri","","Set the URI for this request.",23,[[["self"],["t"]],["builder"]]],[11,"version","","Set the HTTP version for this request.",23,[[["self"],["version"]],["builder"]]],[11,"header","","Appends a header to this request builder.",23,[[["self"],["k"],["v"]],["builder"]]],[11,"extension","","Adds an extension to this builder",23,[[["self"],["t"]],["builder"]]],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Request`.",23,[[["self"],["t"]],["result",["request"]]]],[11,"default","","",23,[[],["builder"]]],[0,"response","http","HTTP response types.",N,N],[3,"Response","http::response","Represents an HTTP response",N,N],[3,"Parts","","Component parts of an HTTP `Response`",N,N],[12,"status","","The response's status",25,N],[12,"version","","The response's version",25,N],[12,"headers","","The response's headers",25,N],[12,"extensions","","The response's extensions",25,N],[3,"Builder","","An HTTP response builder",N,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",27,[[],["builder"]]],[11,"new","","Creates a new blank `Response` with the body",27,[[["t"]],["response"]]],[11,"from_parts","","Creates a new `Response` with the given head and body",27,[[["parts"],["t"]],["response"]]],[11,"status","","Returns the `StatusCode`.",27,[[["self"]],["statuscode"]]],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",27,[[["self"]],["statuscode"]]],[11,"version","","Returns a reference to the associated version.",27,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",27,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",27,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",27,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",27,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",27,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",27,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",27,[[["self"]],["t"]]],[11,"into_body","","Consumes the response, returning just the body.",27,[[["self"]],["t"]]],[11,"into_parts","","Consumes the response returning the head and body parts.",27,N],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",27,[[["self"],["f"]],["response"]]],[11,"default","","",27,[[],["response"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Response`.",26,[[],["builder"]]],[11,"status","","Set the HTTP status for this response.",26,[[["self"],["t"]],["builder"]]],[11,"version","","Set the HTTP version for this response.",26,[[["self"],["version"]],["builder"]]],[11,"header","","Appends a header to this response builder.",26,[[["self"],["k"],["v"]],["builder"]]],[11,"extension","","Adds an extension to this builder",26,[[["self"],["t"]],["builder"]]],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Response`.",26,[[["self"],["t"]],["result",["response"]]]],[11,"default","","",26,[[],["builder"]]],[0,"status","http","HTTP status codes",N,N],[3,"StatusCode","http::status","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[3,"InvalidStatusCode","","A possible error value when converting a `StatusCode` from a `u16` or `&str`",N,N],[11,"clone","","",28,[[["self"]],["statuscode"]]],[11,"eq","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"ne","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"le","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"gt","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"ge","","",28,[[["self"],["statuscode"]],["bool"]]],[11,"cmp","","",28,[[["self"],["statuscode"]],["ordering"]]],[11,"hash","","",28,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"from_u16","","Converts a u16 to a status code.",28,[[["u16"]],["result",["statuscode","invalidstatuscode"]]]],[11,"from_bytes","","Converts a &[u8] to a status code",28,N],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",28,[[["self"]],["u16"]]],[11,"as_str","","Returns a &str representation of the `StatusCode`",28,[[["self"]],["str"]]],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",28,[[["self"]],["option",["str"]]]],[11,"is_informational","","Check if status is within 100-199.",28,[[["self"]],["bool"]]],[11,"is_success","","Check if status is within 200-299.",28,[[["self"]],["bool"]]],[11,"is_redirection","","Check if status is within 300-399.",28,[[["self"]],["bool"]]],[11,"is_client_error","","Check if status is within 400-499.",28,[[["self"]],["bool"]]],[11,"is_server_error","","Check if status is within 500-599.",28,[[["self"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["statuscode"]]],[11,"eq","","",28,[[["self"],["u16"]],["bool"]]],[11,"from_str","","",28,[[["str"]],["result",["statuscode","invalidstatuscode"]]]],[11,"from","","",28,[[["statuscode"]],["self"]]],[11,"try_from","","",28,[[["statuscode"]],["result"]]],[11,"try_from","","",28,N],[11,"try_from","","",28,[[["str"]],["result"]]],[11,"try_from","","",28,[[["u16"]],["result"]]],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",28,N],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",28,N],[18,"PROCESSING","","102 Processing [RFC2518]",28,N],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",28,N],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",28,N],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",28,N],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",28,N],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",28,N],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",28,N],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",28,N],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",28,N],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",28,N],[18,"IM_USED","","226 IM Used [RFC3229]",28,N],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",28,N],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",28,N],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",28,N],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",28,N],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",28,N],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",28,N],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",28,N],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",28,N],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",28,N],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",28,N],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",28,N],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",28,N],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",28,N],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",28,N],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",28,N],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",28,N],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",28,N],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",28,N],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",28,N],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",28,N],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",28,N],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",28,N],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",28,N],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",28,N],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",28,N],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",28,N],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",28,N],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",28,N],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",28,N],[18,"LOCKED","","423 Locked [RFC4918]",28,N],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",28,N],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",28,N],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",28,N],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",28,N],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",28,N],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",28,N],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",28,N],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",28,N],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",28,N],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",28,N],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",28,N],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",28,N],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",28,N],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",28,N],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",28,N],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",28,N],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",28,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"description","","",29,[[["self"]],["str"]]],[0,"version","http","HTTP version",N,N],[3,"Version","http::version","Represents a version of the HTTP spec.",N,N],[11,"eq","","",30,[[["self"],["version"]],["bool"]]],[11,"ne","","",30,[[["self"],["version"]],["bool"]]],[11,"partial_cmp","","",30,[[["self"],["version"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["version"]],["bool"]]],[11,"le","","",30,[[["self"],["version"]],["bool"]]],[11,"gt","","",30,[[["self"],["version"]],["bool"]]],[11,"ge","","",30,[[["self"],["version"]],["bool"]]],[11,"clone","","",30,[[["self"]],["version"]]],[11,"cmp","","",30,[[["self"],["version"]],["ordering"]]],[11,"hash","","",30,N],[18,"HTTP_09","","`HTTP/0.9`",30,N],[18,"HTTP_10","","`HTTP/1.0`",30,N],[18,"HTTP_11","","`HTTP/1.1`",30,N],[18,"HTTP_2","","`HTTP/2.0`",30,N],[11,"default","","",30,[[],["version"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"uri","http","URI component of request and response lines",N,N],[3,"Authority","http::uri","Represents the authority component of a URI.",N,N],[3,"PathAndQuery","","Represents the path component of a URI",N,N],[3,"Scheme","","Represents the scheme component of a URI",N,N],[3,"Uri","","The URI component of a request.",N,N],[3,"Parts","","The various parts of a URI.",N,N],[12,"scheme","","The scheme component of a URI",31,N],[12,"authority","","The authority component of a URI",31,N],[12,"path_and_query","","The origin-form component of a URI",31,N],[3,"InvalidUri","","An error resulting from a failed attempt to construct a URI.",N,N],[3,"InvalidUriBytes","","An error resulting from a failed attempt to construct a URI.",N,N],[3,"InvalidUriParts","","An error resulting from a failed attempt to construct a URI.",N,N],[11,"clone","","",32,[[["self"]],["authority"]]],[11,"from_shared","","Attempt to convert an `Authority` from `Bytes`.",32,[[["bytes"]],["result",["invaliduribytes"]]]],[11,"from_static","","Attempt to convert an `Authority` from a static string.",32,[[["str"]],["self"]]],[11,"host","","Get the host of this `Authority`.",32,[[["self"]],["str"]]],[11,"port","","Get the port of this `Authority`.",32,[[["self"]],["option",["u16"]]]],[11,"as_str","","Return a str representation of the authority",32,[[["self"]],["str"]]],[11,"into_bytes","","Converts this `Authority` back to a sequence of bytes",32,[[["self"]],["bytes"]]],[11,"as_ref","","",32,[[["self"]],["str"]]],[11,"eq","","",32,[[["self"],["authority"]],["bool"]]],[11,"eq","","",32,[[["self"],["str"]],["bool"]]],[11,"eq","","",32,[[["self"],["str"]],["bool"]]],[11,"eq","","",32,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["authority"]],["option",["ordering"]]]],[11,"partial_cmp","","",32,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",32,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",32,[[["self"],["string"]],["option",["ordering"]]]],[11,"hash","","",32,[[["self"],["h"]]]],[11,"from_str","","",32,[[["str"]],["result",["invaliduri"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["pathandquery"]]],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",33,[[["bytes"]],["result",["invaliduribytes"]]]],[11,"from_static","","Convert a `PathAndQuery` from a static string.",33,[[["str"]],["self"]]],[11,"path","","Returns the path component",33,[[["self"]],["str"]]],[11,"query","","Returns the query string component",33,[[["self"]],["option",["str"]]]],[11,"as_str","","Returns the path and query as a string component.",33,[[["self"]],["str"]]],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",33,[[["self"]],["bytes"]]],[11,"from_str","","",33,[[["str"]],["result",["invaliduri"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["pathandquery"]],["bool"]]],[11,"eq","","",33,[[["self"],["str"]],["bool"]]],[11,"eq","","",33,[[["self"],["str"]],["bool"]]],[11,"eq","","",33,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",33,[[["self"],["pathandquery"]],["option",["ordering"]]]],[11,"partial_cmp","","",33,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",33,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",33,[[["self"],["string"]],["option",["ordering"]]]],[11,"clone","","",34,[[["self"]],["scheme"]]],[18,"HTTP","","HTTP protocol scheme",34,N],[18,"HTTPS","","HTTP protocol over TLS.",34,N],[11,"from_shared","","Attempt to convert a `Scheme` from `Bytes`",34,[[["bytes"]],["result",["invaliduribytes"]]]],[11,"as_str","","Return a str representation of the scheme",34,[[["self"]],["str"]]],[11,"into_bytes","","Converts this `Scheme` back to a sequence of bytes",34,[[["self"]],["bytes"]]],[11,"from_str","","",34,[[["str"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",34,[[["self"]],["str"]]],[11,"eq","","",34,[[["self"],["scheme"]],["bool"]]],[11,"eq","","",34,[[["self"],["str"]],["bool"]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"clone","","",35,[[["self"]],["uri"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"default","","",31,[[],["parts"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",35,[[["parts"]],["result",["uri","invaliduriparts"]]]],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",35,[[["bytes"]],["result",["uri","invaliduribytes"]]]],[11,"from_static","","Convert a `Uri` from a static string.",35,[[["str"]],["self"]]],[11,"into_parts","","Convert a `Uri` into `Parts`.",35,[[["self"]],["parts"]]],[11,"path_and_query","","Returns the path & query components of the Uri",35,[[["self"]],["option",["pathandquery"]]]],[11,"path","","Get the path of this `Uri`.",35,[[["self"]],["str"]]],[11,"scheme_part","","Get the scheme of this `Uri`.",35,[[["self"]],["option",["scheme"]]]],[11,"authority_part","","Get the authority of this `Uri`.",35,[[["self"]],["option",["authority"]]]],[11,"host","","Get the host of this `Uri`.",35,[[["self"]],["option",["str"]]]],[11,"port","","Get the port of this `Uri`.",35,[[["self"]],["option",["u16"]]]],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",35,[[["self"]],["option",["str"]]]],[11,"try_from","","",35,[[["str"]],["result"]]],[11,"try_from","","",35,[[["string"]],["result"]]],[11,"try_from","","",35,[[["string"]],["result"]]],[11,"try_from","","",35,[[["bytes"]],["result"]]],[11,"try_from","","",35,[[["parts"]],["result"]]],[11,"try_from","","",35,[[["uri"]],["result"]]],[11,"from","","",31,[[["uri"]],["self"]]],[11,"from_str","","",35,[[["str"]],["result",["uri","invaliduri"]]]],[11,"eq","","",35,[[["self"],["uri"]],["bool"]]],[11,"eq","","",35,[[["self"],["str"]],["bool"]]],[11,"eq","","",35,[[["self"],["str"]],["bool"]]],[11,"default","","",35,[[],["uri"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"description","","",36,[[["self"]],["str"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"description","","",37,[[["self"]],["str"]]],[11,"description","","",38,[[["self"]],["str"]]],[11,"hash","","",35,[[["self"],["h"]]]],[11,"try_from","","",35,[[["self"]],["result"]]],[11,"try_from","http::method","",20,[[["self"]],["result"]]],[11,"try_from","http::status","",28,[[["self"]],["result"]]],[11,"try_from","http::header","",13,[[["self"]],["result"]]],[11,"try_from","","",16,[[["self"]],["result"]]],[11,"fmt","http","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"description","","",39,[[["self"]],["str"]]],[11,"from","","",39,[[["invalidstatuscode"]],["error"]]],[11,"from","","",39,[[["invalidmethod"]],["error"]]],[11,"from","","",39,[[["invaliduri"]],["error"]]],[11,"from","","",39,[[["invaliduribytes"]],["error"]]],[11,"from","","",39,[[["invaliduriparts"]],["error"]]],[11,"from","","",39,[[["invalidheadername"]],["error"]]],[11,"from","","",39,[[["invalidheadernamebytes"]],["error"]]],[11,"from","","",39,[[["invalidheadervalue"]],["error"]]],[11,"from","","",39,[[["invalidheadervaluebytes"]],["error"]]],[11,"default","","",40,[[],["extensions"]]],[11,"new","","Create an empty `Extensions`.",40,[[],["extensions"]]],[11,"insert","","Insert a type into this `Extensions`.",40,[[["self"],["t"]],["option"]]],[11,"get","","Get a reference to a type previously inserted on this `Extensions`.",40,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to a type previously inserted on this `Extensions`.",40,[[["self"]],["option"]]],[11,"remove","","Remove a type from this `Extensions`.",40,[[["self"]],["option"]]],[11,"clear","","Clear the `Extensions` of all inserted extensions.",40,[[["self"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[6,"Result","","A `Result` typedef to use with the `http::Error` type",N,N],[8,"HttpTryFrom","","Private trait for the `http` crate to have generic methods with fallible conversions.",N,N],[16,"Error","","Associated error with the conversion this implementation represents.",41,N]],"paths":[[4,"Entry"],[3,"HeaderMap"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"GetAll"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"ValueIter"],[3,"ValueIterMut"],[3,"ValueDrain"],[3,"HeaderName"],[3,"InvalidHeaderName"],[3,"InvalidHeaderNameBytes"],[3,"HeaderValue"],[3,"InvalidHeaderValue"],[3,"InvalidHeaderValueBytes"],[3,"ToStrError"],[3,"Method"],[3,"InvalidMethod"],[3,"Parts"],[3,"Builder"],[3,"Request"],[3,"Parts"],[3,"Builder"],[3,"Response"],[3,"StatusCode"],[3,"InvalidStatusCode"],[3,"Version"],[3,"Parts"],[3,"Authority"],[3,"PathAndQuery"],[3,"Scheme"],[3,"Uri"],[3,"InvalidUri"],[3,"InvalidUriBytes"],[3,"InvalidUriParts"],[3,"Error"],[3,"Extensions"],[8,"HttpTryFrom"]]};
searchIndex["httparse"]={"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",N,N],[3,"Request","","A parsed Request.",N,N],[12,"method","","The request method, such as `GET`.",0,N],[12,"path","","The request path, such as `/about-us`.",0,N],[12,"version","","The request version, such as `HTTP/1.1`.",0,N],[12,"headers","","The request headers.",0,N],[3,"Response","","A parsed Response.",N,N],[12,"version","","The response version, such as `HTTP/1.1`.",1,N],[12,"code","","The response code, such as `200`.",1,N],[12,"reason","","The response reason-phrase, such as `OK`.",1,N],[12,"headers","","The response headers.",1,N],[3,"Header","","Represents a parsed header.",N,N],[12,"name","","The name portion of a header.",2,N],[12,"value","","The value portion of a header.",2,N],[4,"Error","","An error in parsing.",N,N],[13,"HeaderName","","Invalid byte in header name.",3,N],[13,"HeaderValue","","Invalid byte in header value.",3,N],[13,"NewLine","","Invalid byte in new line.",3,N],[13,"Status","","Invalid byte in Response status.",3,N],[13,"Token","","Invalid byte where token is required.",3,N],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,N],[13,"Version","","Invalid byte in HTTP version.",3,N],[4,"Status","","The result of a successful parse pass.",N,N],[13,"Complete","","The completed result.",4,N],[13,"Partial","","A partial result.",4,N],[5,"parse_headers","","Parse a buffer of bytes as headers.",N,N],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",N,N],[6,"Result","","A Result of any parsing action.",N,N],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",N,N],[11,"clone","","",3,[[["self"]],["error"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["invalidchunksize"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["status"]]],[11,"eq","","",4,[[["self"],["status"]],["bool"]]],[11,"ne","","",4,[[["self"],["status"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_complete","","Convenience method to check if status is complete.",4,[[["self"]],["bool"]]],[11,"is_partial","","Convenience method to check if status is partial.",4,[[["self"]],["bool"]]],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["request"]],["bool"]]],[11,"ne","","",0,[[["self"],["request"]],["bool"]]],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,N],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["response"]],["bool"]]],[11,"ne","","",1,[[["self"],["response"]],["bool"]]],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,N],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,N],[11,"clone","","",2,[[["self"]],["header"]]],[11,"eq","","",2,[[["self"],["header"]],["bool"]]],[11,"ne","","",2,[[["self"],["header"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["humansize"]={"doc":"Humansize","items":[[0,"file_size_opts","humansize","Describes the struct that holds the options needed by the `file_size` method. The three most common formats are provided as constants to be used easily",N,N],[3,"FileSizeOpts","humansize::file_size_opts","Holds the options for the `file_size` method.",N,N],[12,"divider","","The scale (binary/decimal) to divide against.",0,N],[12,"units","","The unit set to display.",0,N],[12,"decimal_places","","The amount of decimal places to display if the decimal part is non-zero.",0,N],[12,"decimal_zeroes","","The amount of zeroes to display if the decimal part is zero.",0,N],[12,"fixed_at","","Whether to force a certain representation and if so, which one.",0,N],[12,"long_units","","Whether to use the full suffix or its abbreveation.",0,N],[12,"space","","Whether to place a space between value and units.",0,N],[12,"suffix","","An optional suffix which will be appended after the unit.",0,N],[12,"allow_negative","","Whether to allow negative numbers as input. If `False`, negative values will return an error.",0,N],[4,"Kilo","","Holds the standard to use when displying the size.",N,N],[13,"Decimal","","The decimal scale and units",1,N],[13,"Binary","","The binary scale and units",1,N],[4,"FixedAt","","Forces a certain representation of the resulting file size.",N,N],[13,"Byte","","",2,N],[13,"Kilo","","",2,N],[13,"Mega","","",2,N],[13,"Giga","","",2,N],[13,"Tera","","",2,N],[13,"Peta","","",2,N],[13,"Exa","","",2,N],[13,"Zetta","","",2,N],[13,"Yotta","","",2,N],[13,"No","","",2,N],[17,"BINARY","","Options to display sizes in the binary format.",N,N],[17,"DECIMAL","","Options to display sizes in the decimal format.",N,N],[17,"CONVENTIONAL","","Options to display sizes in the \"conventional\" format. This 1024 as the value of the `Kilo`, but displays decimal-style units (`KB`, not `KiB`).",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["kilo"]],["bool"]]],[11,"clone","","",1,[[["self"]],["kilo"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["fixedat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",0,[[["self"]],["filesizeopts"]]],[8,"FileSize","humansize","The trait for the `file_size`method",N,N],[10,"file_size","","Formats self according to the parameters in `opts`. `opts` can either be one of the three defaults providedby the `file_size_opts` module, or be custom-defined according to your needs",3,[[["self"],["t"]],["result",["string","string"]]]]],"paths":[[3,"FileSizeOpts"],[4,"Kilo"],[4,"FixedAt"],[8,"FileSize"]]};
searchIndex["hyper"]={"doc":"hyper","items":[[0,"header","hyper","HTTP header types",N,N],[17,"CONNECTION","hyper::header","Controls whether or not the network connection stays open after the current transaction finishes.",N,N],[17,"CONTENT_SECURITY_POLICY","","Allows controlling resources the user agent is allowed to load for a given page.",N,N],[17,"LOCATION","","Indicates the URL to redirect a page to.",N,N],[3,"InvalidHeaderValueBytes","","A possible error when converting a `HeaderValue` from a string or byte slice.",N,N],[17,"REFERRER_POLICY","","Governs which referrer information should be included with requests made.",N,N],[17,"FROM","","Contains an Internet email address for a human user who controls the requesting user agent.",N,N],[17,"ACCESS_CONTROL_ALLOW_METHODS","","Preflight header response indicating permitted access methods.",N,N],[17,"ACCESS_CONTROL_ALLOW_HEADERS","","Preflight response indicating permitted HTTP headers.",N,N],[4,"Entry","","A view into a single location in a `HeaderMap`, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry",0,N],[13,"Vacant","","A vacant entry",0,N],[17,"CACHE_CONTROL","","Specifies directives for caching mechanisms in both requests and responses.",N,N],[3,"HeaderName","","Represents an HTTP header field name",N,N],[17,"CONTENT_LOCATION","","Indicates an alternate location for the returned data.",N,N],[17,"AGE","","Indicates the time in seconds the object has been in a proxy cache.",N,N],[3,"ValueIter","","An iterator of all values associated with a single header name.",N,N],[17,"TE","","Informs the server of transfer encodings willing to be accepted as part of the response.",N,N],[3,"Iter","","`HeaderMap` entry iterator.",N,N],[17,"RANGE","","Indicates the part of a document that the server should return.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `HeaderMap`.",N,N],[17,"SEC_WEBSOCKET_EXTENSIONS","","The |Sec-WebSocket-Extensions| header field is used in the WebSocket opening handshake. It is initially sent from the client to the server, and then subsequently sent from the server to the client, to agree on a set of protocol-level extensions to use for the duration of the connection.",N,N],[17,"SERVER","","Contains information about the software used by the origin server to handle the request.",N,N],[3,"HeaderValue","","Represents an HTTP header field value.",N,N],[17,"UPGRADE_INSECURE_REQUESTS","","Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response.",N,N],[17,"VIA","","Added by proxies to track routing.",N,N],[17,"UPGRADE","","Used as part of the exchange to upgrade the protocol.",N,N],[17,"PROXY_AUTHORIZATION","","Contains the credentials to authenticate a user agent to a proxy server.",N,N],[17,"CONTENT_LANGUAGE","","Used to describe the languages intended for the audience.",N,N],[17,"CONTENT_RANGE","","Indicates where in a full body message a partial message belongs.",N,N],[17,"X_XSS_PROTECTION","","Stop pages from loading when an XSS attack is detected.",N,N],[17,"ETAG","","Identifier for a specific version of a resource.",N,N],[17,"ACCESS_CONTROL_REQUEST_HEADERS","","Informs the server which HTTP headers will be used when an actual request is made.",N,N],[17,"DATE","","Contains the date and time at which the message was originated.",N,N],[3,"Drain","","A drain iterator for `HeaderMap`.",N,N],[17,"SEC_WEBSOCKET_PROTOCOL","","The |Sec-WebSocket-Protocol| header field is used in the WebSocket opening handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection.  This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.",N,N],[17,"IF_MATCH","","Makes a request conditional based on the E-Tag.",N,N],[17,"IF_RANGE","","Makes a request conditional based on range.",N,N],[17,"PROXY_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a proxy.",N,N],[17,"PUBLIC_KEY_PINS_REPORT_ONLY","","Sends reports of pinning violation to the report-uri specified in the header.",N,N],[17,"PRAGMA","","HTTP/1.0 header usually used for backwards compatibility.",N,N],[17,"COOKIE","","Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.",N,N],[17,"ACCEPT","","Advertises which content types the client is able to understand.",N,N],[17,"ACCEPT_LANGUAGE","","Advertises which languages the client is able to understand.",N,N],[17,"SEC_WEBSOCKET_ACCEPT","","The |Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake. It is sent from the server to the client to confirm that the server is willing to initiate the WebSocket connection.",N,N],[17,"ACCESS_CONTROL_MAX_AGE","","Indicates how long the results of a preflight request can be cached.",N,N],[17,"STRICT_TRANSPORT_SECURITY","","Tells the client to communicate with HTTPS instead of using HTTP.",N,N],[3,"ValueDrain","","An drain iterator of all values associated with a single header name.",N,N],[17,"TRANSFER_ENCODING","","Specifies the form of encoding used to safely transfer the entity to the client.",N,N],[17,"IF_NONE_MATCH","","Makes a request conditional based on the E-Tag.",N,N],[17,"AUTHORIZATION","","Contains the credentials to authenticate a user agent with a server.",N,N],[17,"CONTENT_DISPOSITION","","Indicates if the content is expected to be displayed inline.",N,N],[17,"CONTENT_SECURITY_POLICY_REPORT_ONLY","","Allows experimenting with policies by monitoring their effects.",N,N],[3,"VacantEntry","","A view into a single empty location in a `HeaderMap`.",N,N],[3,"InvalidHeaderName","","A possible error when converting a `HeaderName` from another type.",N,N],[3,"HeaderMap","","A set of HTTP headers",N,N],[17,"WWW_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a resource.",N,N],[17,"REFRESH","","Informs the web browser that the current page or frame should be refreshed.",N,N],[3,"Keys","","An iterator over `HeaderMap` keys.",N,N],[17,"ALLOW","","Lists the set of methods support by a resource.",N,N],[17,"VARY","","Determines how to match future requests with cached responses.",N,N],[17,"TRAILER","","Allows the sender to include additional fields at the end of chunked messages.",N,N],[17,"LINK","","Allows the server to point an interested client to another resource containing metadata about the requested resource.",N,N],[17,"ORIGIN","","Indicates where a fetch originates from.",N,N],[17,"REFERER","","Contains the address of the previous web page from which a link to the currently requested page was followed.",N,N],[17,"FORWARDED","","Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.",N,N],[17,"EXPIRES","","Contains the date/time after which the response is considered stale.",N,N],[17,"ACCESS_CONTROL_ALLOW_CREDENTIALS","","Preflight response indicating if the response to the request can be exposed to the page.",N,N],[3,"InvalidHeaderValue","","A possible error when converting a `HeaderValue` from a string or byte slice.",N,N],[17,"USER_AGENT","","Contains a string that allows identifying the requesting client's software.",N,N],[17,"WARNING","","General HTTP header contains information about possible problems with the status of the message.",N,N],[17,"PUBLIC_KEY_PINS","","Associates a specific cryptographic public key with a certain server.",N,N],[17,"LAST_MODIFIED","","Content-Types that are acceptable for the response.",N,N],[17,"IF_UNMODIFIED_SINCE","","Makes the request conditional based on the last modification date.",N,N],[17,"MAX_FORWARDS","","Indicates the max number of intermediaries the request should be sent through.",N,N],[17,"CONTENT_LENGTH","","Indicates the size fo the entity-body.",N,N],[17,"ACCEPT_ENCODING","","Advertises which content encoding the client is able to understand.",N,N],[17,"EXPECT","","Indicates expectations that need to be fulfilled by the server in order to properly handle the request.",N,N],[17,"ACCESS_CONTROL_EXPOSE_HEADERS","","Indicates which headers can be exposed as part of the response by listing their names.",N,N],[17,"ACCESS_CONTROL_REQUEST_METHOD","","Informs the server know which HTTP method will be used when the actual request is made.",N,N],[17,"ACCEPT_RANGES","","Marker used by the server to advertise partial request support.",N,N],[3,"GetAll","","A view to all values stored in a single entry.",N,N],[17,"SEC_WEBSOCKET_VERSION","","The |Sec-WebSocket-Version| header field is used in the WebSocket opening handshake.  It is sent from the client to the server to indicate the protocol version of the connection.  This enables servers to correctly interpret the opening handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner.",N,N],[17,"DNT","","Indicates the client's tracking preference.",N,N],[17,"CONTENT_ENCODING","","Used to compress the media-type.",N,N],[17,"ACCEPT_CHARSET","","Advertises which character set the client is able to understand.",N,N],[8,"IntoHeaderName","","A marker trait used to identify values that can be used as insert keys to a `HeaderMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `HeaderMap`.",N,N],[8,"AsHeaderName","","A marker trait used to identify values that can be used as search keys to a `HeaderMap`.",N,N],[17,"X_FRAME_OPTIONS","","Indicates whether or not a browser should be allowed to render a page in a frame.",N,N],[3,"Values","","`HeaderMap` value iterator.",N,N],[17,"SEC_WEBSOCKET_KEY","","The |Sec-WebSocket-Key| header field is used in the WebSocket opening handshake. It is sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket opening handshake. This helps ensure that the server does not accept connections from non-WebSocket clients (e.g., HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.",N,N],[17,"HOST","","Specifies the domain name of the server and (optionally) the TCP port number on which the server is listening.",N,N],[3,"InvalidHeaderNameBytes","","A possible error when converting a `HeaderName` from another type.",N,N],[3,"ToStrError","","A possible error when converting a `HeaderValue` to a string representation.",N,N],[17,"X_DNS_PREFETCH_CONTROL","","Controls DNS prefetching.",N,N],[17,"X_CONTENT_TYPE_OPTIONS","","Marker used by the server to indicate that the MIME types advertised in the `content-type` headers should not be changed and be followed.",N,N],[17,"RETRY_AFTER","","The Retry-After response HTTP header indicates how long the user agent should wait before making a follow-up request. There are two main cases this header is used:",N,N],[3,"ValueIterMut","","A mutable iterator of all values associated with a single header name.",N,N],[17,"SET_COOKIE","","Used to send cookies from the server to the user agent.",N,N],[17,"CONTENT_TYPE","","Used to indicate the media type of the resource.",N,N],[17,"ACCESS_CONTROL_ALLOW_ORIGIN","","Indicates whether the response can be shared with resources with the given origin.",N,N],[17,"IF_MODIFIED_SINCE","","Makes a request conditional based on the modification date.",N,N],[17,"ALT_SVC","","Advertises the availability of alternate services to clients.",N,N],[3,"HeaderMap","hyper","A set of HTTP headers",N,N],[3,"Method","","The Request Method (VERB)",N,N],[3,"Request","","Represents an HTTP request.",N,N],[3,"Response","","Represents an HTTP response",N,N],[3,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[3,"Uri","","The URI component of a request.",N,N],[3,"Version","","Represents a version of the HTTP spec.",N,N],[3,"Body","","A stream of `Chunk`s, used when receiving bodies.",N,N],[3,"Chunk","","A piece of a message body.",N,N],[0,"body","","Streaming bodies for Requests and Responses",N,N],[3,"Body","hyper::body","A stream of `Chunk`s, used when receiving bodies.",N,N],[3,"Sender","","A sender half used with `Body::channel()`.",N,N],[3,"Chunk","","A piece of a message body.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"empty","hyper","Create an empty `Body` stream.",2,[[],["body"]]],[11,"channel","","Create a `Body` stream with an associated sender half.",2,N],[11,"wrap_stream","","Wrap a futures `Stream` in a box inside `Body`.",2,[[["s"]],["body"]]],[11,"on_upgrade","","Converts this `Body` into a `Future` of a pending HTTP upgrade.",2,[[["self"]],["onupgrade"]]],[11,"default","","Returns `Body::empty()`.",2,[[],["body"]]],[11,"poll_data","","",2,[[["self"]],["poll",["option"]]]],[11,"poll_trailers","","",2,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","",2,[[["self"]],["bool"]]],[11,"content_length","","",2,[[["self"]],["option",["u64"]]]],[11,"poll","","",2,[[["self"]],["poll",["option"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","hyper::body","Check to see if this `Sender` can send more data.",1,[[["self"]],["poll",["error"]]]],[11,"send_data","","Sends data on this channel.",1,[[["self"],["chunk"]],["result",["chunk"]]]],[11,"abort","","Aborts the body in an abnormal fashion.",1,[[["self"]]]],[11,"from","hyper","",2,[[["chunk"]],["body"]]],[11,"from","","",2,[[["box",["stream"]]],["body"]]],[11,"from","","",2,[[["bytes"]],["body"]]],[11,"from","","",2,[[["vec",["u8"]]],["body"]]],[11,"from","","",2,N],[11,"from","","",2,[[["cow"]],["body"]]],[11,"from","","",2,[[["string"]],["body"]]],[11,"from","","",2,[[["str"]],["body"]]],[11,"from","","",2,[[["cow",["str"]]],["body"]]],[11,"into_bytes","","Converts this `Chunk` directly into the `Bytes` type without copies.",3,[[["self"]],["bytes"]]],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"bytes","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"from","","",3,[[["vec",["u8"]]],["chunk"]]],[11,"from","","",3,N],[11,"from","","",3,[[["string"]],["chunk"]]],[11,"from","","",3,[[["str"]],["chunk"]]],[11,"from","","",3,[[["bytes"]],["chunk"]]],[11,"deref","","",3,N],[11,"as_ref","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["chunk"]]],[11,"into_iter","","",3,N],[11,"extend","","",3,[[["self"],["t"]]]],[8,"Payload","hyper::body","This trait represents a streaming body of a `Request` or `Response`.",N,N],[16,"Data","","A buffer of bytes representing a single chunk of a body.",4,N],[16,"Error","","The error type of this stream.",4,N],[10,"poll_data","","Poll for a `Data` buffer.",4,[[["self"]],["poll",["option"]]]],[11,"poll_trailers","","Poll for an optional single `HeaderMap` of trailers.",4,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","A hint that the `Body` is complete, and doesn't need to be polled more.",4,[[["self"]],["bool"]]],[11,"content_length","","Return a length of the total bytes that will be streamed, if known.",4,[[["self"]],["option",["u64"]]]],[0,"client","hyper","HTTP Client",N,N],[3,"HttpConnector","hyper::client","A connector for the `http` scheme.",N,N],[3,"Client","","A Client to make outgoing HTTP requests.",N,N],[3,"ResponseFuture","","A `Future` that will resolve to an HTTP Response.",N,N],[3,"Builder","","Builder for a Client",N,N],[0,"conn","","Lower-level client connection API.",N,N],[3,"SendRequest","hyper::client::conn","The sender side of an established connection.",N,N],[3,"Connection","","A future that processes all HTTP state for the IO object.",N,N],[3,"Builder","","A builder to configure an HTTP connection.",N,N],[3,"Handshake","","A future setting up HTTP over an IO object.",N,N],[3,"ResponseFuture","","A future returned by `SendRequest::send_request`.",N,N],[3,"Parts","","Deconstructed parts of a `Connection`.",N,N],[12,"io","","The original IO object used in the handshake.",5,N],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",5,N],[5,"handshake","","Returns a `Handshake` future over some IO.",N,[[["t"]],["handshake",["body"]]]],[11,"clone","","",6,[[["self"]],["builder"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","Polls to determine whether this sender can be used yet for a request.",7,[[["self"]],["poll",["error"]]]],[11,"send_request","","Sends a `Request` on the associated connection.",7,[[["self"],["request"]],["responsefuture"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"into_parts","","Return the inner IO object, and additional information.",8,[[["self"]],["parts"]]],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",8,[[["self"]],["poll",["error"]]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new connection builder.",6,[[],["builder"]]],[11,"http2_only","","Sets whether HTTP2 is required.",6,[[["self"],["bool"]],["builder"]]],[11,"handshake","","Constructs a connection with the configured options and IO.",6,[[["self"],["t"]],["handshake"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[0,"connect","hyper::client","The `Connect` trait, and supporting types.",N,N],[3,"HttpConnector","hyper::client::connect","A connector for the `http` scheme.",N,N],[3,"Destination","","A set of properties to describe where and how to try to connect.",N,N],[3,"Connected","","Extra information about the connected transport.",N,N],[11,"clone","hyper::client","",11,[[["self"]],["httpconnector"]]],[11,"new","","Construct a new HttpConnector.",11,[[["usize"]],["httpconnector"]]],[11,"new_with_handle","","Construct a new HttpConnector with a specific Tokio handle.",11,[[["usize"],["handle"]],["httpconnector"]]],[11,"new_with_executor","","Construct a new HttpConnector.",11,[[["e"],["option",["handle"]]],["httpconnector"]]],[11,"enforce_http","","Option to enforce all `Uri`s have the `http` scheme.",11,[[["self"],["bool"]]]],[11,"set_keepalive","","Set that all sockets have `SO_KEEPALIVE` set with the supplied duration.",11,[[["self"],["option",["duration"]]]]],[11,"set_nodelay","","Set that all sockets have `SO_NODELAY` set to the supplied value `nodelay`.",11,[[["self"],["bool"]]]],[11,"set_local_address","","Set that all sockets are bound to the configured address before connection.",11,[[["self"],["option",["ipaddr"]]]]],[11,"set_happy_eyeballs_timeout","","Set timeout for [RFC 6555 (Happy Eyeballs)][RFC 6555] algorithm.",11,[[["self"],["option",["duration"]]]]],[11,"set_reuse_address","","Set that all socket have `SO_REUSEADDR` set to the supplied value `reuse_address`.",11,[[["self"],["bool"]],["self"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"connect","","",11,N],[8,"Connect","hyper::client::connect","Connect to a destination, returning an IO transport.",N,N],[16,"Transport","","The connected IO Stream.",12,N],[16,"Error","","An error occured when trying to connect.",12,N],[16,"Future","","A Future that will resolve to the connected Transport.",12,N],[10,"connect","","Connect to a destination.",12,N],[11,"clone","","",13,[[["self"]],["destination"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"scheme","","Get the protocol scheme.",13,[[["self"]],["str"]]],[11,"host","","Get the hostname.",13,[[["self"]],["str"]]],[11,"port","","Get the port, if specified.",13,[[["self"]],["option",["u16"]]]],[11,"set_scheme","","Update the scheme of this destination.",13,[[["self"],["str"]],["result"]]],[11,"set_host","","Update the host of this destination.",13,[[["self"],["str"]],["result"]]],[11,"set_port","","Update the port of this destination.",13,[[["self"],["p"]]]],[11,"new","","Create new `Connected` type with empty metadata.",14,[[],["connected"]]],[11,"proxy","","Set whether the connected transport is to an HTTP proxy.",14,[[["self"],["bool"]],["connected"]]],[11,"new","hyper::client","Create a new Client with the default config.",15,[[],["client",["httpconnector","body"]]]],[11,"default","","",15,[[],["client",["httpconnector","body"]]]],[11,"builder","","Configure a Client.",15,[[],["builder"]]],[11,"get","","Send a `GET` request to the supplied `Uri`.",15,[[["self"],["uri"]],["responsefuture"]]],[11,"request","","Send a constructed Request using this Client.",15,[[["self"],["request"]],["responsefuture"]]],[11,"clone","","",15,[[["self"]],["client"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"clone","","",17,[[["self"]],["builder"]]],[11,"default","","",17,[[],["self"]]],[11,"keep_alive","","Enable or disable keep-alive mechanics.",17,[[["self"],["bool"]],["self"]]],[11,"keep_alive_timeout","","Set an optional timeout for idle sockets being kept-alive.",17,[[["self"],["d"]],["self"]]],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",17,[[["self"],["bool"]],["self"]]],[11,"http1_title_case_headers","","Set whether HTTP/1 connections will write header names as title case at the socket level.",17,[[["self"],["bool"]],["self"]]],[11,"http2_only","","Set whether the connection must use HTTP/2.",17,[[["self"],["bool"]],["self"]]],[11,"max_idle_per_host","","Sets the maximum idle connection per host allowed in the pool.",17,[[["self"],["usize"]],["self"]]],[11,"retry_canceled_requests","","Set whether to retry requests that get disrupted before ever starting to write.",17,[[["self"],["bool"]],["self"]]],[11,"set_host","","Set whether to automatically add the `Host` header to requests.",17,[[["self"],["bool"]],["self"]]],[11,"executor","","Provide an executor to execute background `Connection` tasks.",17,[[["self"],["e"]],["self"]]],[11,"build_http","","Builder a client with this configuration and the default `HttpConnector`.",17,[[["self"]],["client",["httpconnector"]]]],[11,"build","","Combine the configuration of this builder with a connector to create a `Client`.",17,[[["self"],["c"]],["client"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[0,"error","hyper","Error and Result module.",N,N],[3,"Error","hyper::error","Represents errors that can occur handling HTTP streams.",N,N],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",N,N],[11,"is_parse","","Returns true if this was an HTTP parse error.",18,[[["self"]],["bool"]]],[11,"is_user","","Returns true if this error was caused by user code.",18,[[["self"]],["bool"]]],[11,"is_canceled","","Returns true if this was about a `Request` that was canceled.",18,[[["self"]],["bool"]]],[11,"is_closed","","Returns true if a sender's channel is closed.",18,[[["self"]],["bool"]]],[11,"cause2","","Returns the error's cause.",18,[[["self"]],["option",["stderror"]]]],[11,"into_cause","","Consumes the error, returning its cause.",18,[[["self"]],["option",["box"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"description","","",18,[[["self"]],["str"]]],[11,"cause","","",18,[[["self"]],["option",["stderror"]]]],[0,"server","hyper","HTTP Server",N,N],[3,"Server","hyper::server","A listening HTTP server that accepts connections in both HTTP1 and HTTP2 by default.",N,N],[3,"Builder","","A builder for a `Server`.",N,N],[0,"conn","","Lower-level Server connection API.",N,N],[3,"AddrIncoming","hyper::server::conn","A stream of connections from binding to an address.",N,N],[3,"Http","","A lower-level configuration of the HTTP protocol.",N,N],[3,"Serve","","A stream mapping incoming IOs to new services.",N,N],[3,"Connecting","","A future building a new `Service` to a `Connection`.",N,N],[3,"Connection","","A future binding a connection with a Service.",N,N],[3,"Parts","","Deconstructed parts of a `Connection`.",N,N],[12,"io","","The original IO object used in the handshake.",19,N],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",19,N],[12,"service","","The `Service` used to serve this connection.",19,N],[11,"clone","","",20,[[["self"]],["http"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new instance of the HTTP protocol, ready to spawn a server or start accepting connections.",20,[[],["http"]]],[11,"http1_only","","Sets whether HTTP1 is required.",20,[[["self"],["bool"]],["self"]]],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",20,[[["self"],["bool"]],["self"]]],[11,"http2_only","","Sets whether HTTP2 is required.",20,[[["self"],["bool"]],["self"]]],[11,"keep_alive","","Enables or disables HTTP keep-alive.",20,[[["self"],["bool"]],["self"]]],[11,"max_buf_size","","Set the maximum buffer size for the connection.",20,[[["self"],["usize"]],["self"]]],[11,"pipeline_flush","","Aggregates flushes to better support pipelined responses.",20,[[["self"],["bool"]],["self"]]],[11,"executor","","Set the executor used to spawn background tasks.",20,[[["self"],["e"]],["self"]]],[11,"serve_connection","","Bind a connection together with a `Service`.",20,[[["self"],["i"],["s"]],["connection"]]],[11,"serve_addr","","Bind the provided `addr` with the default `Handle` and return `Serve`.",20,[[["self"],["socketaddr"],["s"]],["result",["serve"]]]],[11,"serve_addr_handle","","Bind the provided `addr` with the `Handle` and return a `Serve`",20,[[["self"],["socketaddr"],["handle"],["s"]],["result",["serve"]]]],[11,"serve_incoming","","Bind the provided stream of incoming IO objects with a `NewService`.",20,[[["self"],["i"],["s"]],["serve"]]],[11,"graceful_shutdown","","Start a graceful shutdown process for this connection.",23,[[["self"]]]],[11,"into_parts","","Return the inner IO object, and additional information.",23,[[["self"]],["parts"]]],[11,"try_into_parts","","Return the inner IO object, and additional information, if available.",23,[[["self"]],["option",["parts"]]]],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",23,[[["self"]],["poll",["error"]]]],[11,"with_upgrades","","Enable this connection to support higher-level HTTP upgrades.",23,[[["self"]],["upgradeableconnection"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"incoming_ref","","Get a reference to the incoming stream.",21,[[["self"]],["i"]]],[11,"incoming_mut","","Get a mutable reference to the incoming stream.",21,[[["self"]],["i"]]],[11,"poll","","",21,[[["self"]],["poll",["option"]]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"local_addr","","Get the local address bound to this listener.",24,[[["self"]],["socketaddr"]]],[11,"set_keepalive","","Set whether TCP keepalive messages are enabled on accepted connections.",24,[[["self"],["option",["duration"]]],["self"]]],[11,"set_nodelay","","Set the value of `TCP_NODELAY` option for accepted connections.",24,[[["self"],["bool"]],["self"]]],[11,"set_sleep_on_errors","","Set whether to sleep on accept errors.",24,[[["self"],["bool"]]]],[11,"poll","","",24,[[["self"]],["poll",["option"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server","",25,[[["self"],["formatter"]],["result"]]],[11,"builder","","Starts a `Builder` with the provided incoming stream.",26,[[["i"]],["builder"]]],[11,"bind","","Binds to the provided address, and returns a `Builder`.",26,[[["socketaddr"]],["builder",["addrincoming"]]]],[11,"try_bind","","Tries to bind to the provided address, and returns a `Builder`.",26,[[["socketaddr"]],["result",["builder"]]]],[11,"from_tcp","","Create a new instance from a `std::net::TcpListener` instance.",26,[[["stdtcplistener"]],["result",["builder","error"]]]],[11,"local_addr","","Returns the local address that this server is bound to.",26,[[["self"]],["socketaddr"]]],[11,"with_graceful_shutdown","","Prepares a server to handle graceful shutdown when the provided future completes.",26,[[["self"],["f"]],["graceful"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"new","","Start a new builder, wrapping an incoming stream and low-level options.",25,[[["i"],["http_"]],["self"]]],[11,"http1_keepalive","","Sets whether to use keep-alive for HTTP/1 connections.",25,[[["self"],["bool"]],["self"]]],[11,"http1_only","","Sets whether HTTP/1 is required.",25,[[["self"],["bool"]],["self"]]],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",25,[[["self"],["bool"]],["self"]]],[11,"http2_only","","Sets whether HTTP/2 is required.",25,[[["self"],["bool"]],["self"]]],[11,"serve","","Consume this `Builder`, creating a `Server`.",25,[[["self"],["s"]],["server"]]],[11,"tcp_keepalive","","Set whether TCP keepalive messages are enabled on accepted connections.",25,[[["self"],["option",["duration"]]],["self"]]],[11,"tcp_nodelay","","Set the value of `TCP_NODELAY` option for accepted connections.",25,[[["self"],["bool"]],["self"]]],[0,"service","hyper","Services and NewServices",N,N],[5,"service_fn","hyper::service","Create a `Service` from a function.",N,[[["f"]],["servicefn"]]],[5,"service_fn_ok","","Create a `Service` from a function that never errors.",N,[[["f"]],["servicefnok"]]],[8,"NewService","","An asynchronous constructor of `Service`s.",N,N],[16,"ReqBody","","The `Payload` body of the `http::Request`.",27,N],[16,"ResBody","","The `Payload` body of the `http::Response`.",27,N],[16,"Error","","The error type that can be returned by `Service`s.",27,N],[16,"Service","","The resolved `Service` from `new_service()`.",27,N],[16,"Future","","The future returned from `new_service` of a `Service`.",27,N],[16,"InitError","","The error type that can be returned when creating a new `Service`.",27,N],[10,"new_service","","Create a new `Service`.",27,N],[8,"Service","","An asynchronous function from `Request` to `Response`.",N,N],[16,"ReqBody","","The `Payload` body of the `http::Request`.",28,N],[16,"ResBody","","The `Payload` body of the `http::Response`.",28,N],[16,"Error","","The error type that can occur within this `Service`.",28,N],[16,"Future","","The `Future` returned by this `Service`.",28,N],[10,"call","","Calls this `Service` with a request, returning a `Future` of the response.",28,N],[0,"rt","hyper","Default runtime",N,N],[8,"Future","hyper::rt","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",29,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",29,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",29,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",29,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",29,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",29,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",29,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",29,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",29,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",29,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",29,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",29,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",29,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",29,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",29,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",29,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",29,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",29,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",29,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",29,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",29,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",29,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",29,[[["self"]],["shared"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",30,N],[16,"Error","","The type of error this stream may generate.",30,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",30,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",30,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",30,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",30,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",30,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",30,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",30,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",30,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",30,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",30,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",30,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",30,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",30,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",30,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",30,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",30,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",30,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",30,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",30,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",30,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",30,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",30,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",30,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",30,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",30,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",30,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",30,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",30,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",30,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",30,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",30,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",30,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",30,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",30,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",30,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",30,[[["self"],["f"]],["inspecterr"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,[[["f"]]]],[0,"upgrade","hyper","HTTP Upgrades",N,N],[3,"Upgraded","hyper::upgrade","An upgraded HTTP connection.",N,N],[3,"OnUpgrade","","A future for a possible HTTP upgrade.",N,N],[3,"Parts","","The deconstructed parts of an `Upgraded` type.",N,N],[12,"io","","The original IO object used before the upgrade.",31,N],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",31,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"downcast","","Tries to downcast the internal trait object to the type passed.",32,[[["self"]],["result",["parts"]]]],[11,"read","","",32,N],[11,"write","","",32,N],[11,"flush","","",32,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",32,N],[11,"read_buf","","",32,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",32,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",32,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"poll","","",33,[[["self"]],["poll"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","hyper::header","",34,[[["self"]],["headervalue"]]],[11,"clone","","",35,[[["self"]],["headername"]]],[11,"clone","hyper","",36,[[["self"]],["headermap"]]],[11,"clone","","",37,[[["self"]],["uri"]]],[11,"clone","","",38,[[["self"]],["method"]]],[11,"clone","","",39,[[["self"]],["statuscode"]]],[11,"clone","","",40,[[["self"]],["version"]]],[11,"fmt","hyper::header","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",56,[[["self"]],["str"]]],[11,"description","","",48,[[["self"]],["str"]]],[11,"description","","",41,[[["self"]],["str"]]],[11,"description","","",55,[[["self"]],["str"]]],[11,"description","","",49,[[["self"]],["str"]]],[11,"into_iter","hyper","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",36,[[["self"]],["intoiter"]]],[11,"into_iter","hyper::header","",43,[[["self"]],["valueiter"]]],[11,"into_iter","","",46,[[["self"]],["valueitermut"]]],[11,"from_str","hyper","",39,[[["str"]],["result",["statuscode","invalidstatuscode"]]]],[11,"from_str","hyper::header","",34,[[["str"]],["result",["headervalue"]]]],[11,"from_str","","",35,[[["str"]],["result",["headername","invalidheadername"]]]],[11,"from_str","hyper","",38,[[["str"]],["result",["method"]]]],[11,"from_str","","",37,[[["str"]],["result",["uri","invaliduri"]]]],[11,"cmp","hyper::header","",34,[[["self"],["headervalue"]],["ordering"]]],[11,"cmp","hyper","",40,[[["self"],["version"]],["ordering"]]],[11,"cmp","","",39,[[["self"],["statuscode"]],["ordering"]]],[11,"default","","",39,[[],["statuscode"]]],[11,"default","","",53,[[],["request"]]],[11,"default","","",40,[[],["version"]]],[11,"default","","",36,[[],["headermap"]]],[11,"default","","",38,[[],["method"]]],[11,"default","","",37,[[],["uri"]]],[11,"default","","",45,[[],["response"]]],[11,"from_iter","","",36,[[["i"]],["headermap"]]],[11,"borrow","hyper::header","",35,[[["self"]],["str"]]],[11,"index","hyper","Panics Using the index operator will cause a panic if the header you're querying isn't set.",36,[[["self"],["k"]],["t"]]],[11,"partial_cmp","hyper::header","",34,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",34,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","hyper","",39,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["statuscode"]],["bool"]]],[11,"le","","",39,[[["self"],["statuscode"]],["bool"]]],[11,"gt","","",39,[[["self"],["statuscode"]],["bool"]]],[11,"ge","","",39,[[["self"],["statuscode"]],["bool"]]],[11,"partial_cmp","hyper::header","",34,[[["self"],["headervalue"]],["option",["ordering"]]]],[11,"partial_cmp","","",34,N],[11,"partial_cmp","","",34,[[["self"],["t"]],["option",["ordering"]]]],[11,"partial_cmp","hyper","",40,[[["self"],["version"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["version"]],["bool"]]],[11,"le","","",40,[[["self"],["version"]],["bool"]]],[11,"gt","","",40,[[["self"],["version"]],["bool"]]],[11,"ge","","",40,[[["self"],["version"]],["bool"]]],[11,"drop","hyper::header","",57,N],[11,"drop","","",52,N],[11,"drop","","",44,N],[11,"try_from","","",34,[[["bytes"]],["result",["headervalue"]]]],[11,"try_from","","",34,[[["u64"]],["result",["headervalue"]]]],[11,"try_from","hyper","",37,[[["str"]],["result",["uri"]]]],[11,"try_from","hyper::header","",34,[[["headervalue"]],["result",["headervalue"]]]],[11,"try_from","hyper","",38,[[["method"]],["result",["method"]]]],[11,"try_from","hyper::header","",34,[[["u16"]],["result",["headervalue"]]]],[11,"try_from","","",34,N],[11,"try_from","","",34,[[["str"]],["result",["headervalue"]]]],[11,"try_from","","",34,[[["usize"]],["result",["headervalue"]]]],[11,"try_from","hyper","",39,[[["statuscode"]],["result",["statuscode"]]]],[11,"try_from","","",37,[[["uri"]],["result",["uri"]]]],[11,"try_from","hyper::header","",34,[[["i32"]],["result",["headervalue"]]]],[11,"try_from","","",34,[[["headervalue"]],["result",["headervalue"]]]],[11,"try_from","hyper","",39,[[["u16"]],["result",["statuscode"]]]],[11,"try_from","","",38,[[["str"]],["result",["method"]]]],[11,"try_from","hyper::header","",35,N],[11,"try_from","","",34,[[["u32"]],["result",["headervalue"]]]],[11,"try_from","","",35,[[["headername"]],["result",["headername"]]]],[11,"try_from","hyper","",39,N],[11,"try_from","","",39,[[["statuscode"]],["result",["statuscode"]]]],[11,"try_from","","",37,[[["string"]],["result",["uri"]]]],[11,"try_from","hyper::header","",35,[[["headername"]],["result",["headername"]]]],[11,"try_from","","",34,[[["string"]],["result",["headervalue"]]]],[11,"try_from","","",34,[[["i16"]],["result",["headervalue"]]]],[11,"try_from","hyper","",39,[[["str"]],["result",["statuscode"]]]],[11,"try_from","","",38,N],[11,"try_from","hyper::header","",35,[[["str"]],["result",["headername"]]]],[11,"try_from","hyper","",37,[[["parts"]],["result",["uri"]]]],[11,"try_from","","",37,[[["uri"]],["result",["uri"]]]],[11,"try_from","","",38,[[["method"]],["result",["method"]]]],[11,"try_from","","",37,[[["string"]],["result",["uri"]]]],[11,"try_from","hyper::header","",34,[[["isize"]],["result",["headervalue"]]]],[11,"try_from","","",35,[[["bytes"]],["result",["headername"]]]],[11,"try_from","","",34,[[["i64"]],["result",["headervalue"]]]],[11,"try_from","","",34,[[["headername"]],["result",["headervalue"]]]],[11,"try_from","hyper","",37,[[["bytes"]],["result",["uri"]]]],[11,"hash","","",40,N],[11,"hash","","",39,N],[11,"hash","","",37,N],[11,"hash","hyper::header","",34,N],[11,"hash","hyper","",38,N],[11,"hash","hyper::header","",35,N],[11,"as_ref","","",35,[[["self"]],["str"]]],[11,"as_ref","","",35,N],[11,"as_ref","","",34,N],[11,"as_ref","hyper","",38,[[["self"]],["str"]]],[11,"from","hyper::header","",34,[[["i16"]],["headervalue"]]],[11,"from","","",35,[[["headername"]],["headername"]]],[11,"from","","",34,[[["isize"]],["headervalue"]]],[11,"from","hyper","",38,[[["method"]],["method"]]],[11,"from","hyper::header","",34,[[["u64"]],["headervalue"]]],[11,"from","","",34,[[["headername"]],["headervalue"]]],[11,"from","","",34,[[["u16"]],["headervalue"]]],[11,"from","hyper","",39,[[["statuscode"]],["statuscode"]]],[11,"from","hyper::header","",34,[[["usize"]],["headervalue"]]],[11,"from","","",34,[[["i64"]],["headervalue"]]],[11,"from","","",34,[[["u32"]],["headervalue"]]],[11,"from","","",34,[[["headervalue"]],["headervalue"]]],[11,"from","","",34,[[["i32"]],["headervalue"]]],[11,"extend","hyper","Extend a `HeaderMap` with the contents of another `HeaderMap`.",36,N],[11,"extend","","",36,N],[11,"fmt","hyper::header","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::header","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","hyper::header","",34,[[["self"],["string"]],["bool"]]],[11,"eq","hyper","",38,[[["self"],["method"]],["bool"]]],[11,"ne","","",38,[[["self"],["method"]],["bool"]]],[11,"eq","","",38,[[["self"],["str"]],["bool"]]],[11,"eq","hyper::header","",35,[[["self"],["headername"]],["bool"]]],[11,"ne","","",35,[[["self"],["headername"]],["bool"]]],[11,"eq","","",34,[[["self"],["t"]],["bool"]]],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",35,[[["self"],["str"]],["bool"]]],[11,"eq","","",43,[[["self"],["getall"]],["bool"]]],[11,"eq","hyper","",39,[[["self"],["statuscode"]],["bool"]]],[11,"ne","","",39,[[["self"],["statuscode"]],["bool"]]],[11,"eq","hyper::header","Performs a case-insensitive comparison of the string against the header name",35,[[["self"],["str"]],["bool"]]],[11,"eq","hyper","",37,[[["self"],["uri"]],["bool"]]],[11,"eq","","",40,[[["self"],["version"]],["bool"]]],[11,"ne","","",40,[[["self"],["version"]],["bool"]]],[11,"eq","","",37,[[["self"],["str"]],["bool"]]],[11,"eq","hyper::header","",35,[[["self"],["headername"]],["bool"]]],[11,"eq","hyper","",36,[[["self"],["headermap"]],["bool"]]],[11,"eq","","",39,[[["self"],["u16"]],["bool"]]],[11,"eq","hyper::header","",34,[[["self"],["str"]],["bool"]]],[11,"eq","","",34,N],[11,"eq","hyper","",38,[[["self"],["method"]],["bool"]]],[11,"eq","","",37,[[["self"],["str"]],["bool"]]],[11,"eq","","",38,[[["self"],["str"]],["bool"]]],[11,"eq","hyper::header","",34,[[["self"],["headervalue"]],["bool"]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,N],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,N],[11,"next","","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,N],[11,"next","","",51,[[["self"]],["option"]]],[11,"next","","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,N],[11,"next_back","","",47,[[["self"]],["option"]]],[11,"next_back","","",51,[[["self"]],["option"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty.",0,[[["self"],["t"]],["t"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty.",0,[[["self"],["f"]],["t"]]],[11,"key","","Returns a reference to the entry's key",0,[[["self"]],["headername"]]],[11,"from_bytes","","Converts a slice of bytes to an HTTP header name.",35,N],[11,"from_lowercase","","Converts a slice of bytes to an HTTP header name.",35,N],[11,"from_static","","Converts a static string to a HTTP header name.",35,[[["str"]],["headername"]]],[11,"as_str","","Returns a `str` representation of the header.",35,[[["self"]],["str"]]],[11,"key","","Returns a reference to the entry's key.",46,[[["self"]],["headername"]]],[11,"get","","Get a reference to the first value in the entry.",46,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the first value in the entry.",46,[[["self"]],["t"]]],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference to the first value.",46,[[["self"]],["t"]]],[11,"insert","","Sets the value of the entry.",46,[[["self"],["t"]],["t"]]],[11,"insert_mult","","Sets the value of the entry.",46,[[["self"],["t"]],["valuedrain"]]],[11,"append","","Insert the value into the entry.",46,N],[11,"remove","","Remove the entry from the map.",46,[[["self"]],["t"]]],[11,"remove_entry","","Remove the entry from the map.",46,N],[11,"remove_entry_mult","","Remove the entry from the map.",46,N],[11,"iter","","Returns an iterator visiting all values associated with the entry.",46,[[["self"]],["valueiter"]]],[11,"iter_mut","","Returns an iterator mutably visiting all values associated with the entry.",46,[[["self"]],["valueitermut"]]],[11,"from_static","","Convert a static string to a `HeaderValue`.",34,[[["str"]],["headervalue"]]],[11,"from_str","","Attempt to convert a string to a `HeaderValue`.",34,[[["str"]],["result",["headervalue","invalidheadervalue"]]]],[11,"from_name","","Converts a HeaderName into a HeaderValue",34,[[["headername"]],["headervalue"]]],[11,"from_bytes","","Attempt to convert a byte slice to a `HeaderValue`.",34,N],[11,"from_shared","","Attempt to convert a `Bytes` buffer to a `HeaderValue`.",34,[[["bytes"]],["result",["headervalue","invalidheadervaluebytes"]]]],[11,"from_shared_unchecked","","Convert a `Bytes` directly into a `HeaderValue` without validating.",34,[[["bytes"]],["headervalue"]]],[11,"to_str","","Yields a `&str` slice if the `HeaderValue` only contains visible ASCII chars.",34,[[["self"]],["result",["str","tostrerror"]]]],[11,"len","","Returns the length of `self`.",34,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `HeaderValue` has a length of zero bytes.",34,[[["self"]],["bool"]]],[11,"as_bytes","","Converts a `HeaderValue` to a byte slice.",34,N],[11,"set_sensitive","","Mark that the header value represents sensitive information.",34,N],[11,"is_sensitive","","Returns `true` if the value represents sensitive data.",34,[[["self"]],["bool"]]],[11,"key","","Returns a reference to the entry's key",50,[[["self"]],["headername"]]],[11,"into_key","","Take ownership of the key",50,[[["self"]],["headername"]]],[11,"insert","","Insert the value into the entry.",50,[[["self"],["t"]],["t"]]],[11,"insert_entry","","Insert the value into the entry.",50,[[["self"],["t"]],["occupiedentry"]]],[11,"new","hyper","Create an empty `HeaderMap`.",36,[[],["headermap",["headervalue"]]]],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",36,[[["usize"]],["headermap"]]],[11,"len","","Returns the number of headers stored in the map.",36,[[["self"]],["usize"]]],[11,"keys_len","","Returns the number of keys stored in the map.",36,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",36,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",36,N],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",36,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",36,N],[11,"get","","Returns a reference to the value associated with the key.",36,[[["self"],["k"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",36,[[["self"],["k"]],["option"]]],[11,"get_all","","Returns a view of all values associated with a key.",36,[[["self"],["k"]],["getall"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",36,[[["self"],["k"]],["bool"]]],[11,"iter","","An iterator visiting all key-value pairs.",36,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",36,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys.",36,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values.",36,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably.",36,[[["self"]],["valuesmut"]]],[11,"drain","","Clears the map, returning all entries as an iterator.",36,[[["self"]],["drain"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",36,[[["self"],["k"]],["result",["entry","invalidheadername"]]]],[11,"insert","","Inserts a key-value pair into the map.",36,[[["self"],["k"],["t"]],["option"]]],[11,"append","","Inserts a key-value pair into the map.",36,[[["self"],["k"],["t"]],["bool"]]],[11,"remove","","Removes a key from the map, returning the value associated with the key.",36,[[["self"],["k"]],["option"]]],[11,"iter","hyper::header","Returns an iterator visiting all values associated with the entry.",43,[[["self"]],["valueiter"]]],[18,"GET","hyper","GET",38,N],[18,"POST","","POST",38,N],[18,"PUT","","PUT",38,N],[18,"DELETE","","DELETE",38,N],[18,"HEAD","","HEAD",38,N],[18,"OPTIONS","","OPTIONS",38,N],[18,"CONNECT","","CONNECT",38,N],[18,"PATCH","","PATCH",38,N],[18,"TRACE","","TRACE",38,N],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",38,N],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",38,[[["self"]],["bool"]]],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",38,[[["self"]],["bool"]]],[11,"as_str","","Return a &str representation of the HTTP method",38,[[["self"]],["str"]]],[11,"builder","","Creates a new builder-style object to manufacture a `Request`",53,[[],["builder"]]],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",53,[[["t"]],["builder"]]],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",53,[[["t"]],["builder"]]],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",53,[[["t"]],["builder"]]],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",53,[[["t"]],["builder"]]],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",53,[[["t"]],["builder"]]],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",53,[[["t"]],["builder"]]],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",53,[[["t"]],["builder"]]],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",53,[[["t"]],["builder"]]],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",53,[[["t"]],["builder"]]],[11,"new","","Creates a new blank `Request` with the body",53,[[["t"]],["request"]]],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",53,[[["parts"],["t"]],["request"]]],[11,"method","","Returns a reference to the associated HTTP method.",53,[[["self"]],["method"]]],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",53,[[["self"]],["method"]]],[11,"uri","","Returns a reference to the associated URI.",53,[[["self"]],["uri"]]],[11,"uri_mut","","Returns a mutable reference to the associated URI.",53,[[["self"]],["uri"]]],[11,"version","","Returns the associated version.",53,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",53,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",53,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",53,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",53,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",53,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",53,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",53,[[["self"]],["t"]]],[11,"into_body","","Consumes the request, returning just the body.",53,[[["self"]],["t"]]],[11,"into_parts","","Consumes the request returning the head and body parts.",53,N],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",53,[[["self"],["f"]],["request"]]],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",45,[[],["builder"]]],[11,"new","","Creates a new blank `Response` with the body",45,[[["t"]],["response"]]],[11,"from_parts","","Creates a new `Response` with the given head and body",45,[[["parts"],["t"]],["response"]]],[11,"status","","Returns the `StatusCode`.",45,[[["self"]],["statuscode"]]],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",45,[[["self"]],["statuscode"]]],[11,"version","","Returns a reference to the associated version.",45,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",45,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",45,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",45,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",45,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",45,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",45,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",45,[[["self"]],["t"]]],[11,"into_body","","Consumes the response, returning just the body.",45,[[["self"]],["t"]]],[11,"into_parts","","Consumes the response returning the head and body parts.",45,N],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",45,[[["self"],["f"]],["response"]]],[11,"from_u16","","Converts a u16 to a status code.",39,[[["u16"]],["result",["statuscode","invalidstatuscode"]]]],[11,"from_bytes","","Converts a &[u8] to a status code",39,N],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",39,[[["self"]],["u16"]]],[11,"as_str","","Returns a &str representation of the `StatusCode`",39,[[["self"]],["str"]]],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",39,[[["self"]],["option",["str"]]]],[11,"is_informational","","Check if status is within 100-199.",39,[[["self"]],["bool"]]],[11,"is_success","","Check if status is within 200-299.",39,[[["self"]],["bool"]]],[11,"is_redirection","","Check if status is within 300-399.",39,[[["self"]],["bool"]]],[11,"is_client_error","","Check if status is within 400-499.",39,[[["self"]],["bool"]]],[11,"is_server_error","","Check if status is within 500-599.",39,[[["self"]],["bool"]]],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",39,N],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",39,N],[18,"PROCESSING","","102 Processing [RFC2518]",39,N],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",39,N],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",39,N],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",39,N],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",39,N],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",39,N],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",39,N],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",39,N],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",39,N],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",39,N],[18,"IM_USED","","226 IM Used [RFC3229]",39,N],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",39,N],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",39,N],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",39,N],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",39,N],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",39,N],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",39,N],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",39,N],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",39,N],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",39,N],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",39,N],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",39,N],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",39,N],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",39,N],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",39,N],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",39,N],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",39,N],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",39,N],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",39,N],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",39,N],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",39,N],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",39,N],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",39,N],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",39,N],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",39,N],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",39,N],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",39,N],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",39,N],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",39,N],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",39,N],[18,"LOCKED","","423 Locked [RFC4918]",39,N],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",39,N],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",39,N],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",39,N],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",39,N],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",39,N],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",39,N],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",39,N],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",39,N],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",39,N],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",39,N],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",39,N],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",39,N],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",39,N],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",39,N],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",39,N],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",39,N],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",39,N],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",37,[[["parts"]],["result",["uri","invaliduriparts"]]]],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",37,[[["bytes"]],["result",["uri","invaliduribytes"]]]],[11,"from_static","","Convert a `Uri` from a static string.",37,[[["str"]],["uri"]]],[11,"into_parts","","Convert a `Uri` into `Parts`.",37,[[["self"]],["parts"]]],[11,"path_and_query","","Returns the path & query components of the Uri",37,[[["self"]],["option",["pathandquery"]]]],[11,"path","","Get the path of this `Uri`.",37,[[["self"]],["str"]]],[11,"scheme_part","","Get the scheme of this `Uri`.",37,[[["self"]],["option",["scheme"]]]],[11,"authority_part","","Get the authority of this `Uri`.",37,[[["self"]],["option",["authority"]]]],[11,"host","","Get the host of this `Uri`.",37,[[["self"]],["option",["str"]]]],[11,"port","","Get the port of this `Uri`.",37,[[["self"]],["option",["u16"]]]],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",37,[[["self"]],["option",["str"]]]],[18,"HTTP_09","","`HTTP/0.9`",40,N],[18,"HTTP_10","","`HTTP/1.0`",40,N],[18,"HTTP_11","","`HTTP/1.1`",40,N],[18,"HTTP_2","","`HTTP/2.0`",40,N],[11,"poll_trailers","hyper::body","Poll for an optional single `HeaderMap` of trailers.",4,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","A hint that the `Body` is complete, and doesn't need to be polled more.",4,[[["self"]],["bool"]]],[11,"content_length","","Return a length of the total bytes that will be streamed, if known.",4,[[["self"]],["option",["u64"]]]]],"paths":[[4,"Entry"],[3,"Sender"],[3,"Body"],[3,"Chunk"],[8,"Payload"],[3,"Parts"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"ResponseFuture"],[3,"HttpConnector"],[8,"Connect"],[3,"Destination"],[3,"Connected"],[3,"Client"],[3,"ResponseFuture"],[3,"Builder"],[3,"Error"],[3,"Parts"],[3,"Http"],[3,"Serve"],[3,"Connecting"],[3,"Connection"],[3,"AddrIncoming"],[3,"Builder"],[3,"Server"],[8,"NewService"],[8,"Service"],[8,"Future"],[8,"Stream"],[3,"Parts"],[3,"Upgraded"],[3,"OnUpgrade"],[3,"HeaderValue"],[3,"HeaderName"],[3,"HeaderMap"],[3,"Uri"],[3,"Method"],[3,"StatusCode"],[3,"Version"],[3,"InvalidHeaderNameBytes"],[3,"Iter"],[3,"GetAll"],[3,"ValueDrain"],[3,"Response"],[3,"OccupiedEntry"],[3,"ValueIter"],[3,"InvalidHeaderName"],[3,"ToStrError"],[3,"VacantEntry"],[3,"ValueIterMut"],[3,"IntoIter"],[3,"Request"],[3,"Keys"],[3,"InvalidHeaderValueBytes"],[3,"InvalidHeaderValue"],[3,"Drain"],[3,"Values"]]};
searchIndex["hyper_staticfile"]={"doc":"Static file-serving for Hyper 0.12.","items":[[3,"ResolveFuture","hyper_staticfile","Future returned by `resolve`.",N,N],[3,"ResponseBuilder","","Utility to build the default response for a `resolve` result.",N,N],[12,"cache_headers","","Whether to send cache headers, and what lifespan to indicate.",0,N],[3,"StaticFuture","","Future returned by `Static::serve`.",N,N],[3,"Static","","High-level interface for serving static files.",N,N],[12,"root","","The root directory path to serve files from.",1,N],[12,"cache_headers","","Whether to send cache headers, and what lifespan to indicate.",1,N],[3,"FileChunkStream","","Wraps a `tokio::fs::File`, and implements a stream of `hyper::Chunk`s.",N,N],[3,"FileResponseBuilder","","Utility to build responses for serving a `tokio::fs::File`.",N,N],[12,"cache_headers","","Whether to send cache headers, and what lifespan to indicate.",2,N],[12,"is_head","","Whether this is a `HEAD` request, with no response body.",2,N],[12,"if_modified_since","","The parsed value of the `If-Modified-Since` request header.",2,N],[4,"ResolveResult","","The result of `resolve`.",N,N],[13,"MethodNotMatched","","The request was not `GET` or `HEAD` request,",3,N],[13,"UriNotMatched","","The request URI was not just a path.",3,N],[13,"NotFound","","The requested file does not exist.",3,N],[13,"PermissionDenied","","The requested file could not be accessed.",3,N],[13,"IsDirectory","","A directory was requested as a file.",3,N],[13,"Found","","The requested file was found.",3,N],[5,"resolve","","Resolve the request by trying to find the file in the given root.",N,[[["p"],["request"]],["resolvefuture"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"clone","","",0,[[["self"]],["responsebuilder"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["responsebuilder"]]],[11,"new","","Create a new builder with a default configuration.",0,[[],["self"]]],[11,"cache_headers","","Add cache headers to responses for the given lifespan.",0,[[["self"],["option",["u32"]]],["self"]]],[11,"build","","Build a response for the given request and `resolve` result.",0,[[["self"],["request"],["resolveresult"]],["result",["response"]]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"clone","","",1,[[["self"]],["static"]]],[11,"new","","Create a new instance of `Static` with a given root path.",1,[[["p"]],["self"]]],[11,"cache_headers","","Add cache headers to responses for the given lifespan.",1,[[["self"],["option",["u32"]]],["self"]]],[11,"serve","","Serve a request.",1,[[["self"],["request"]],["staticfuture"]]],[11,"call","","",1,N],[11,"new","","Create a new stream from the given file.",6,[[["file"]],["filechunkstream"]]],[11,"poll","","",6,[[["self"]],["poll",["option"]]]],[11,"clone","","",2,[[["self"]],["fileresponsebuilder"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["fileresponsebuilder"]]],[11,"new","","Create a new builder with a default configuration.",2,[[],["self"]]],[11,"from_request","","Create a new builder for the given request.",2,[[["request"]],["self"]]],[11,"cache_headers","","Add cache headers to responses for the given lifespan.",2,[[["self"],["option",["u32"]]],["self"]]],[11,"method","","Build responses for the given request method.",2,[[["self"],["method"]],["self"]]],[11,"if_modified_since_header","","Build responses for the given `If-Modified-Since` request header value.",2,[[["self"],["option",["headervalue"]]],["self"]]],[11,"build","","Build a response for the given file and metadata.",2,[[["self"],["file"],["metadata"]],["result",["response"]]]]],"paths":[[3,"ResponseBuilder"],[3,"Static"],[3,"FileResponseBuilder"],[4,"ResolveResult"],[3,"ResolveFuture"],[3,"StaticFuture"],[3,"FileChunkStream"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["indexmap"]={"doc":"[`IndexMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[0,"set","indexmap","A hash set implemented using `IndexMap`",N,N],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is independent of their hash values.",N,N],[3,"IntoIter","","",N,N],[3,"Iter","","",N,N],[3,"Drain","","",N,N],[3,"Difference","","",N,N],[3,"Intersection","","",N,N],[3,"SymmetricDifference","","",N,N],[3,"Union","","",N,N],[11,"clone","","",0,[[["self"]],["indexset"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new set. (Does not allocate.)",0,[[],["self"]]],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of elements in the set.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new set with `hash_builder`",0,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the set's `BuildHasher`.",0,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",0,[[["self"]],["usize"]]],[11,"clear","","Remove all elements in the set, while preserving its capacity.",0,[[["self"]]]],[11,"reserve","","FIXME Not implemented fully yet",0,[[["self"],["usize"]]]],[11,"insert","","Insert the value into the set.",0,[[["self"],["t"]],["bool"]]],[11,"iter","","Return an iterator over the values of the set, in their order",0,[[["self"]],["iter"]]],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",0,[[["self"],["indexset"]],["difference"]]],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",0,[[["self"],["indexset"]],["symmetricdifference"]]],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",0,[[["self"],["indexset"]],["intersection"]]],[11,"union","","Return an iterator over all values that are in `self` or `other`.",0,[[["self"],["indexset"]],["union"]]],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",0,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",0,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index and value",0,[[["self"],["q"]],["option"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",0,[[["self"],["t"]],["option"]]],[11,"remove","","FIXME Same as .swap_remove",0,[[["self"],["q"]],["bool"]]],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",0,[[["self"],["q"]],["bool"]]],[11,"take","","FIXME Same as .swap_take",0,[[["self"],["q"]],["option"]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",0,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",0,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last value",0,[[["self"]],["option"]]],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",0,[[["self"],["f"]]]],[11,"sort","","Sort the set’s values by their default ordering.",0,[[["self"]]]],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",0,[[["self"],["f"]]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",0,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",0,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a value by index",0,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",0,[[["self"],["usize"]],["option"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"count","","",1,[[["self"]],["usize"]]],[11,"nth","","",1,[[["self"],["usize"]],["option"]]],[11,"last","","",1,[[["self"]],["option"]]],[11,"collect","","",1,[[["self"]],["c"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"count","","",2,[[["self"]],["usize"]]],[11,"nth","","",2,[[["self"],["usize"]],["option"]]],[11,"last","","",2,[[["self"]],["option"]]],[11,"collect","","",2,[[["self"]],["c"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"count","","",3,[[["self"]],["usize"]]],[11,"nth","","",3,[[["self"],["usize"]],["option"]]],[11,"last","","",3,[[["self"]],["option"]]],[11,"collect","","",3,[[["self"]],["c"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"into_iter","","",0,N],[11,"from_iter","","",0,[[["i"]],["self"]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"default","","Return an empty `IndexSet`",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["indexset"]],["bool"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",0,[[["self"],["indexset"]],["bool"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"fold","","",6,[[["self"],["b"],["f"]],["b"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"fold","","",7,[[["self"],["b"],["f"]],["b"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[0,"map","indexmap","`IndexMap` is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"IndexMap","indexmap::map","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"OccupiedEntry","","",N,N],[3,"VacantEntry","","",N,N],[3,"Keys","","",N,N],[3,"Values","","",N,N],[3,"ValuesMut","","",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[3,"IntoIter","","",N,N],[3,"Drain","","",N,N],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",N,N],[13,"Occupied","","Existing slot with equivalent key.",8,N],[13,"Vacant","","Vacant slot (no equivalent key in the map).",8,N],[8,"MutableKeys","","Opt-in mutable access to keys.",N,N],[16,"Key","","",9,N],[16,"Value","","",9,N],[10,"get_full_mut2","","Return item index, mutable reference to key and value",9,[[["self"],["q"]],["option"]]],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",9,[[["self"],["f"]]]],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",9,[[["self"]],["privatemarker"]]],[11,"clone","","",10,[[["self"]],["indexmap"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new map. (Does not allocate.)",10,[[],["self"]]],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",10,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",10,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of key-value pairs in the map.",10,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",10,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new map with `hash_builder`",10,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the map's `BuildHasher`.",10,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",10,[[["self"]],["usize"]]],[11,"or_insert","","Computes in O(1) time (amortized average).",8,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Computes in O(1) time (amortized average).",8,[[["self"],["f"]],["v"]]],[11,"key","","",8,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair exists or will be inserted.",8,[[["self"]],["usize"]]],[11,"key","","",11,[[["self"]],["k"]]],[11,"get","","",11,[[["self"]],["v"]]],[11,"get_mut","","",11,[[["self"]],["v"]]],[11,"index","","Return the index of the key-value pair",11,[[["self"]],["usize"]]],[11,"into_mut","","",11,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry to `value`, and returns the entry's old value.",11,[[["self"],["v"]],["v"]]],[11,"remove","","",11,[[["self"]],["v"]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",11,N],[11,"key","","",12,[[["self"]],["k"]]],[11,"into_key","","",12,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair will be inserted.",12,[[["self"]],["usize"]]],[11,"insert","","",12,[[["self"],["v"]],["v"]]],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",10,[[["self"]]]],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",10,[[["self"],["usize"]]]],[11,"insert","","Insert a key-value pair in the map.",10,[[["self"],["k"],["v"]],["option"]]],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",10,[[["self"],["k"]],["entry"]]],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",10,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",10,[[["self"]],["itermut"]]],[11,"keys","","Return an iterator over the keys of the map, in their order",10,[[["self"]],["keys"]]],[11,"values","","Return an iterator over the values of the map, in their order",10,[[["self"]],["values"]]],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",10,[[["self"]],["valuesmut"]]],[11,"contains_key","","Return `true` if an equivalent to `key` exists in the map.",10,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",10,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index, key and value",10,[[["self"],["q"]],["option"]]],[11,"get_mut","","",10,[[["self"],["q"]],["option"]]],[11,"get_full_mut","","",10,[[["self"],["q"]],["option"]]],[11,"remove","","NOTE: Same as .swap_remove",10,[[["self"],["q"]],["option"]]],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",10,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",10,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last key-value pair",10,[[["self"]],["option"]]],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",10,[[["self"],["f"]]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",10,[[["self"]]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",10,[[["self"],["f"]]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",10,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",10,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a key-value pair by index",10,[[["self"],["usize"]],["option"]]],[11,"get_index_mut","","Get a key-value pair by index",10,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",10,[[["self"],["usize"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"count","","",13,[[["self"]],["usize"]]],[11,"nth","","",13,[[["self"],["usize"]],["option"]]],[11,"last","","",13,[[["self"]],["option"]]],[11,"collect","","",13,[[["self"]],["c"]]],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"count","","",14,[[["self"]],["usize"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"last","","",14,[[["self"]],["option"]]],[11,"collect","","",14,[[["self"]],["c"]]],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"count","","",15,[[["self"]],["usize"]]],[11,"nth","","",15,[[["self"],["usize"]],["option"]]],[11,"last","","",15,[[["self"]],["option"]]],[11,"collect","","",15,[[["self"]],["c"]]],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"last","","",16,[[["self"]],["option"]]],[11,"collect","","",16,[[["self"]],["c"]]],[11,"next_back","","",16,[[["self"]],["option"]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"count","","",17,[[["self"]],["usize"]]],[11,"nth","","",17,[[["self"],["usize"]],["option"]]],[11,"last","","",17,[[["self"]],["option"]]],[11,"collect","","",17,[[["self"]],["c"]]],[11,"next_back","","",17,[[["self"]],["option"]]],[11,"len","","",17,[[["self"]],["usize"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"count","","",18,[[["self"]],["usize"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"collect","","",18,[[["self"]],["c"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"nth","","",19,[[["self"],["usize"]],["option"]]],[11,"last","","",19,[[["self"]],["option"]]],[11,"collect","","",19,[[["self"]],["c"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"into_iter","","",10,N],[11,"index","","Panics if `key` is not present in the map.",10,[[["self"],["q"]],["v"]]],[11,"index_mut","","Panics if `key` is not present in the map.",10,[[["self"],["q"]],["v"]]],[11,"from_iter","","Create an `IndexMap` from the sequence of key-value pairs in the iterable.",10,[[["i"]],["self"]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",10,[[["self"],["i"]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",10,[[["self"],["i"]]]],[11,"default","","Return an empty `IndexMap`",10,[[],["self"]]],[11,"eq","","",10,[[["self"],["indexmap"]],["bool"]]],[8,"Equivalent","indexmap","Key equivalence trait.",N,N],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",20,[[["self"],["k"]],["bool"]]],[14,"indexmap","","Create an `IndexMap` from a list of key-value pairs",N,N],[14,"indexset","","Create an `IndexSet` from a list of values",N,N],[11,"get_full_mut2","indexmap::map","",10,[[["self"],["q"]],["option"]]],[11,"retain2","","",10,[[["self"],["f"]]]],[11,"__private_marker","","",10,[[["self"]],["privatemarker"]]]],"paths":[[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[4,"Entry"],[8,"MutableKeys"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"Equivalent"]]};
searchIndex["input_buffer"]={"doc":"A buffer for reading data from the network.","items":[[3,"InputBuffer","input_buffer","A FIFO buffer for reading packets from network.",N,N],[3,"DoRead","","The reference to the buffer used for reading.",N,N],[3,"SizeLimit","","Size limit error.",N,N],[17,"MIN_READ","","The recommended minimum read size.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new empty input buffer.",0,[[],["self"]]],[11,"with_capacity","","Create a new empty input buffer.",0,[[["usize"]],["self"]]],[11,"from_partially_read","","Create a input buffer filled with previously read data.",0,[[["vec",["u8"]]],["self"]]],[11,"as_cursor","","Get the data as a cursor.",0,[[["self"]],["cursor"]]],[11,"as_cursor_mut","","Get the data as a mutable cursor.",0,[[["self"]],["cursor"]]],[11,"remove_garbage","","Remove the already consumed portion of the data.",0,[[["self"]]]],[11,"into_vec","","Get the rest of the buffer and destroy the buffer.",0,[[["self"]],["vec",["u8"]]]],[11,"read_from","","Read next portion of data from the given input stream.",0,[[["self"],["s"]],["ioresult",["usize"]]]],[11,"prepare","","Prepare reading.",0,[[["self"]],["doread"]]],[11,"prepare_reserve","","Prepare reading with the given reserve.",0,[[["self"],["usize"]],["doread"]]],[11,"remaining","","",0,[[["self"]],["usize"]]],[11,"bytes","","",0,N],[11,"advance","","",0,[[["self"],["usize"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"with_limit","","Enforce the size limit.",1,[[["self"],["usize"]],["result",["sizelimit"]]]],[11,"read_from","","Read next portion of data from the given input stream.",1,[[["self"],["s"]],["ioresult",["usize"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["sizelimit"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[3,"InputBuffer"],[3,"DoRead"],[3,"SizeLimit"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"default","","",0,[[],["buffer"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]]],"paths":[[3,"Buffer"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazycell"]={"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with mutable contents.",N,N],[3,"AtomicLazyCell","","A lazily filled and thread-safe `Cell`, with frozen contents.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["lazycell"]]],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell"]]],[11,"fill","","Put a value into this cell.",0,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",0,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"borrow_mut_with","","Borrows the contents of this `LazyCell` mutably for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"try_borrow_mut_with","","Same as `borrow_mut_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["atomiclazycell"]]],[18,"NONE","","An empty `AtomicLazyCell`.",1,N],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell"]]],[11,"fill","","Put a value into this cell.",1,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",1,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,[[["self"]],["option"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[["self"]],["option"]]]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["lock_api"]={"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",N,N],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",N,N],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],["option",["mutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"default","","",0,[[],["mutex"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",1,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,[[["self"]]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",2,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[["self"]],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],["option",["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",4,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"drop","","",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",5,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[["self"]]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[["self"]],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],["option",["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,[[["self"]],["option",["rwlockupgradablereadguard"]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"default","","",6,[[],["rwlock"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",7,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,[[["self"]]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"drop","","",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",8,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"drop","","",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,[[["self"]],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,[[["self"]],["result",["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,[[["self"]],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"deref","","",9,[[["self"]],["t"]]],[11,"drop","","",9,[[["self"]]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",10,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"drop","","",10,[[["self"]]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",11,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,[[["self"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[["self"]]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"drop","","",11,[[["self"]]]],[8,"RawMutex","","Basic operations for a mutex.",N,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,N],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",N,N],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",14,N],[16,"Instant","","Instant type used for `try_lock_until`.",14,N],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,N],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,N],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",N,N],[18,"INIT","","Initial value.",15,N],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,[[["self"]],["usize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",N,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,N],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",N,N],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",N,N],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",19,N],[16,"Instant","","Instant type used for `try_lock_until`.",19,N],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",N,N],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",N,N],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",N,N],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",N,N],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",N,N],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",N,N],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[18,"INIT","","Initial value.",15,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["maplit"]={"doc":"Macros for container literals with specific type.","items":[[14,"hashmap","maplit","Create a HashMap from a list of key-value pairs",N,N],[14,"hashset","","Create a HashSet from a list of elements.",N,N],[14,"btreemap","","Create a BTreeMap from a list of key-value pairs",N,N],[14,"btreeset","","Create a BTreeSet from a list of elements.",N,N],[14,"convert_args","","Macro that converts the keys or key-value pairs passed to another maplit macro. The default conversion is to use the [`Into`] trait, if no custom conversion is passed.",N,N]],"paths":[]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for searching bytes.","items":[[3,"Memchr","memchr","An iterator for `memchr`.",N,N],[3,"Memchr2","","An iterator for `memchr2`.",N,N],[3,"Memchr3","","An iterator for `memchr3`.",N,N],[5,"memchr_iter","","An iterator over all occurrences of the needle in a haystack.",N,N],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a haystack, in reverse.",N,N],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memchr","","Search for the first occurrence of a byte in a slice.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",N,N],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",N,N],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"]={"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",N,N],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",N,N]],"paths":[]};
searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",N,N],[3,"Registration","","Handle to a user space `Poll` registration.",N,N],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",N,N],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Events","","A collection of readiness events.",N,N],[11,"eq","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"clone","","",1,[[["self"]],["pollopt"]]],[11,"partial_cmp","","",1,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"cmp","","",1,[[["self"],["pollopt"]],["ordering"]]],[11,"empty","","Return a `PollOpt` representing no set options.",1,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",1,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",1,[[["self"],["pollopt"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",1,[[["self"],["pollopt"]]]],[11,"bitor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["ready"]],["bool"]]],[11,"ne","","",2,[[["self"],["ready"]],["bool"]]],[11,"clone","","",2,[[["self"]],["ready"]]],[11,"partial_cmp","","",2,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["ready"]],["bool"]]],[11,"le","","",2,[[["self"],["ready"]],["bool"]]],[11,"gt","","",2,[[["self"],["ready"]],["bool"]]],[11,"ge","","",2,[[["self"],["ready"]],["bool"]]],[11,"cmp","","",2,[[["self"],["ready"]],["ordering"]]],[11,"empty","","Returns the empty `Ready` set.",2,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",2,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",2,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,[[["self"],["t"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",2,[[["self"],["t"]]]],[11,"contains","","Returns true if `self` is a superset of `other`.",2,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,"bitor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitor_assign","","",2,[[["self"],["t"]]]],[11,"bitxor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitxor_assign","","",2,[[["self"],["t"]]]],[11,"bitand","","",2,[[["self"],["t"]],["ready"]]],[11,"bitand_assign","","",2,[[["self"],["t"]]]],[11,"sub","","",2,[[["self"],["t"]],["ready"]]],[11,"sub_assign","","",2,[[["self"],["t"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["setreadiness"]]],[11,"new","","Return a new `Poll` handle.",4,[[],["result",["poll"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"]],["result"]]],[11,"poll","","Wait for readiness events",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",4,[[["self"]],["rawfd"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",5,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",5,[[["self"]]]],[11,"into_iter","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,N],[11,"register","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",6,[[["self"],["poll"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"readiness","","Returns the registration's current readiness.",3,[[["self"]],["ready"]]],[11,"set_readiness","","Set the registration's readiness",3,[[["self"],["ready"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["unixready"]],["ready"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"cmp","","",0,[[["self"],["token"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["usize"]],["token"]]],[0,"net","","Networking primitives",N,N],[3,"TcpListener","mio::net","A structure representing a socket server",N,N],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",N,N],[3,"UdpSocket","","A User Datagram Protocol socket.",N,N],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,[[["socketaddr"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,[[["tcpstream"],["socketaddr"]],["result",["tcpstream"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,[[["tcpstream"]],["result",["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,[[["self"]],["result",["tcpstream"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,N],[11,"read_bufs","","Read in a list of buffers all at once.",7,N],[11,"write_bufs","","Write a list of buffers all at once.",7,N],[11,"read","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"register","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,[[["tcplistener"]],["result",["tcplistener"]]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,[[["self"]],["result",["tcplistener"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],["result",["option"]]]],[11,"register","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",8,[[["self"],["poll"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",7,[[["rawfd"]],["tcpstream"]]],[11,"into_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",8,[[["rawfd"]],["tcplistener"]]],[11,"bind","","Creates a UDP socket from the given address.",9,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,[[["udpsocket"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the socket address that this socket was created from.",9,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,[[["self"]],["result",["udpsocket"]]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,N],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"],["u32"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],["result",["option"]]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["udpsocket"]]],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Events","mio::event","A collection of readiness events.",N,N],[3,"Iter","","[`Events`] iterator.",N,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,[[["self"],["poll"]],["result"]]],[0,"unix","mio","Unix only extensions",N,N],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",N,N],[12,"0","","",11,N],[3,"UnixReady","","Unix specific extensions to `Ready`",N,N],[11,"clone","mio::event","",12,[[["self"]],["event"]]],[11,"eq","","",12,[[["self"],["event"]],["bool"]]],[11,"ne","","",12,[[["self"],["event"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",12,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",12,[[["self"]],["token"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["iter"]]],[11,"next","","",13,[[["self"]],["option",["event"]]]],[11,"fmt","mio::unix","",11,[[["self"],["formatter"]],["result"]]],[11,"register","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",11,[[["self"],["poll"]],["result"]]],[11,"eq","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ne","","",14,[[["self"],["unixready"]],["bool"]]],[11,"clone","","",14,[[["self"]],["unixready"]]],[11,"partial_cmp","","",14,[[["self"],["unixready"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"le","","",14,[[["self"],["unixready"]],["bool"]]],[11,"gt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ge","","",14,[[["self"],["unixready"]],["bool"]]],[11,"cmp","","",14,[[["self"],["unixready"]],["ordering"]]],[11,"error","","Returns a `Ready` representing error readiness.",14,[[],["unixready"]]],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,[[],["unixready"]]],[11,"priority","","Returns a `Ready` representing priority (`EPOLLPRI`) readiness",14,[[],["unixready"]]],[11,"is_error","","Returns true if the value includes error readiness",14,[[["self"]],["bool"]]],[11,"is_hup","","Returns true if the value includes HUP readiness",14,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if `Ready` contains priority (`EPOLLPRI`) readiness",14,[[["self"]],["bool"]]],[11,"from","","",14,[[["ready"]],["unixready"]]],[11,"deref","","",14,[[["self"]],["ready"]]],[11,"deref_mut","","",14,[[["self"]],["ready"]]],[11,"bitor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitxor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitand","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"sub","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["mio_uds"]={"doc":"MIO bindings for Unix Domain Sockets","items":[[3,"UnixStream","mio_uds","A Unix stream socket.",N,N],[3,"UnixListener","","A structure representing a Unix domain socket server.",N,N],[3,"UnixDatagram","","A Unix datagram socket.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"bind","","Creates a Unix datagram socket bound to the given path.",0,[[["p"]],["result",["unixdatagram"]]]],[11,"from_datagram","","Consumes a standard library `UnixDatagram` and returns a wrapped `UnixDatagram` compatible with mio.",0,[[["unixdatagram"]],["result",["unixdatagram"]]]],[11,"pair","","Create an unnamed pair of connected sockets.",0,[[],["result"]]],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",0,[[],["result",["unixdatagram"]]]],[11,"connect","","Connects the socket to the specified address.",0,[[["self"],["p"]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",0,[[["self"]],["result",["unixdatagram"]]]],[11,"local_addr","","Returns the address of this socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",0,[[["self"]],["result",["socketaddr"]]]],[11,"recv_from","","Receives data from the socket.",0,N],[11,"recv","","Receives data from the socket.",0,N],[11,"send_to","","Sends data on the socket to the specified address.",0,N],[11,"send","","Sends data on the socket to the socket's peer.",0,N],[11,"take_error","","Returns the value of the `SO_ERROR` option.",0,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",0,[[["self"],["shutdown"]],["result"]]],[11,"register","","",0,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",0,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",0,[[["self"],["poll"]],["result"]]],[11,"as_raw_fd","","",0,[[["self"]],["i32"]]],[11,"into_raw_fd","","",0,[[["self"]],["i32"]]],[11,"from_raw_fd","","",0,[[["i32"]],["unixdatagram"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",1,[[["p"]],["result",["unixlistener"]]]],[11,"from_listener","","Consumes a standard library `UnixListener` and returns a wrapped `UnixListener` compatible with mio.",1,[[["unixlistener"]],["result",["unixlistener"]]]],[11,"accept","","Accepts a new incoming connection to this listener.",1,[[["self"]],["result",["option"]]]],[11,"accept_std","","Accepts a new incoming connection to this listener.",1,[[["self"]],["result",["option"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",1,[[["self"]],["result",["unixlistener"]]]],[11,"local_addr","","Returns the local socket address of this listener.",1,[[["self"]],["result",["socketaddr"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,[[["self"]],["result",["option"]]]],[11,"register","","",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",1,[[["self"],["poll"]],["result"]]],[11,"as_raw_fd","","",1,[[["self"]],["i32"]]],[11,"into_raw_fd","","",1,[[["self"]],["i32"]]],[11,"from_raw_fd","","",1,[[["i32"]],["unixlistener"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"connect","","Connects to the socket named by `path`.",2,[[["p"]],["result",["unixstream"]]]],[11,"from_stream","","Consumes a standard library `UnixStream` and returns a wrapped `UnixStream` compatible with mio.",2,[[["unixstream"]],["result",["unixstream"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",2,[[],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",2,[[["self"]],["result",["unixstream"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",2,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",2,[[["self"]],["result",["socketaddr"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",2,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,[[["self"],["shutdown"]],["result"]]],[11,"read_bufs","","Read in a list of buffers all at once.",2,N],[11,"write_bufs","","Write a list of buffers all at once.",2,N],[11,"register","","",2,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",2,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",2,[[["self"],["poll"]],["result"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"as_raw_fd","","",2,[[["self"]],["i32"]]],[11,"into_raw_fd","","",2,[[["self"]],["i32"]]],[11,"from_raw_fd","","",2,[[["i32"]],["unixstream"]]]],"paths":[[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"]]};
searchIndex["native_tls"]={"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",N,N],[3,"Identity","","A cryptographic identity.",N,N],[3,"Certificate","","An X509 certificate.",N,N],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",N,N],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",N,N],[3,"TlsConnector","","A builder for client-side TLS connections.",N,N],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",N,N],[3,"TlsAcceptor","","A builder for server-side TLS connections.",N,N],[3,"TlsStream","","A stream managing a TLS session.",N,N],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",N,N],[13,"Failure","","A fatal error.",0,N],[13,"WouldBlock","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,N],[4,"Protocol","","SSL/TLS protocol versions.",N,N],[13,"Sslv3","","The SSL 3.0 protocol.",1,N],[13,"Tlsv10","","The TLS 1.0 protocol.",1,N],[13,"Tlsv11","","The TLS 1.1 protocol.",1,N],[13,"Tlsv12","","The TLS 1.2 protocol.",1,N],[6,"Result","","A typedef of the result-type returned by many methods.",N,N],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_pkcs12","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",3,N],[11,"clone","","",4,[[["self"]],["certificate"]]],[11,"from_der","","Parses a DER-formatted X509 certificate.",4,N],[11,"from_pem","","Parses a PEM-formatted X509 certificate.",4,N],[11,"to_der","","Returns the DER-encoded representation of this certificate.",4,[[["self"]],["result",["vec"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",5,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",5,[[["self"]],["s"]]],[11,"handshake","","Restarts the handshake process.",5,[[["self"]],["result",["tlsstream","handshakeerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["protocol"]]],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,[[["self"],["identity"]],["tlsconnectorbuilder"]]],[11,"min_protocol_version","","Sets the minimum supported protocol version.",6,[[["self"],["option",["protocol"]]],["tlsconnectorbuilder"]]],[11,"max_protocol_version","","Sets the maximum supported protocol version.",6,[[["self"],["option",["protocol"]]],["tlsconnectorbuilder"]]],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,[[["self"],["certificate"]],["tlsconnectorbuilder"]]],[11,"danger_accept_invalid_certs","","Controls the use of certificate validation.",6,[[["self"],["bool"]],["tlsconnectorbuilder"]]],[11,"use_sni","","Controls the use of Server Name Indication (SNI).",6,[[["self"],["bool"]],["tlsconnectorbuilder"]]],[11,"danger_accept_invalid_hostnames","","Controls the use of hostname verification.",6,[[["self"],["bool"]],["tlsconnectorbuilder"]]],[11,"build","","Creates a new `TlsConnector`.",6,[[["self"]],["result",["tlsconnector"]]]],[11,"clone","","",7,[[["self"]],["tlsconnector"]]],[11,"new","","Returns a new connector with default settings.",7,[[],["result",["tlsconnector"]]]],[11,"builder","","Returns a new builder for a `TlsConnector`.",7,[[],["tlsconnectorbuilder"]]],[11,"connect","","Initiates a TLS handshake.",7,[[["self"],["str"],["s"]],["result",["tlsstream","handshakeerror"]]]],[11,"min_protocol_version","","Sets the minimum supported protocol version.",8,[[["self"],["option",["protocol"]]],["tlsacceptorbuilder"]]],[11,"max_protocol_version","","Sets the maximum supported protocol version.",8,[[["self"],["option",["protocol"]]],["tlsacceptorbuilder"]]],[11,"build","","Creates a new `TlsAcceptor`.",8,[[["self"]],["result",["tlsacceptor"]]]],[11,"clone","","",9,[[["self"]],["tlsacceptor"]]],[11,"new","","Creates a acceptor with default settings.",9,[[["identity"]],["result",["tlsacceptor"]]]],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",9,[[["identity"]],["tlsacceptorbuilder"]]],[11,"accept","","Initiates a TLS handshake.",9,[[["self"],["s"]],["result",["tlsstream","handshakeerror"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",10,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",10,[[["self"]],["s"]]],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",10,[[["self"]],["result",["usize"]]]],[11,"peer_certificate","","Returns the peer's leaf certificate, if available.",10,[[["self"]],["result",["option"]]]],[11,"tls_server_end_point","","Returns the tls-server-end-point channel binding data as defined in [RFC 5929].",10,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shuts down the TLS session.",10,[[["self"]],["result"]]],[11,"read","","",10,N],[11,"write","","",10,N],[11,"flush","","",10,[[["self"]],["result"]]]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[3,"Error"],[3,"Identity"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnectorBuilder"],[3,"TlsConnector"],[3,"TlsAcceptorBuilder"],[3,"TlsAcceptor"],[3,"TlsStream"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[11,"reuse_port","net2","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",4,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",5,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[["self"]],["t"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",7,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",7,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",7,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",7,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",7,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",7,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",7,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",7,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",7,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity","","Returns the infinite value.",8,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",8,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",8,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",8,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",8,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",8,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",8,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",8,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",8,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",8,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",8,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",8,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",8,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",8,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",8,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",8,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",8,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",8,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",8,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",8,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",8,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",8,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",8,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",8,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",8,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",8,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",8,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",8,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",8,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",8,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",8,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",8,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",8,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",9,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[],["self"]]],[0,"identities","num_traits","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",11,[[["self"]],["bool"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[0,"ops","num_traits","",N,N],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",13,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",14,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",15,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",16,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",17,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",18,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",19,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",20,[[["self"],["u32"]],["option"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",21,N],[10,"inv","","Returns the multiplicative inverse of `self`.",21,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",22,N],[10,"mul_add","","Performs the fused multiply-add operation.",22,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[["self"],["a"],["b"]]]],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",24,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",24,[[["self"],["self"]],["self"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",25,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",26,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",27,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",28,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",29,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",30,N],[10,"pow","","Returns `self` to the power `rhs`.",30,N],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",31,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",31,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",31,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",31,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",31,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",31,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",31,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",31,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",31,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",31,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",31,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",31,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",31,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",31,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",31,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",31,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",31,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",31,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",31,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",31,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",31,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",31,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",31,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",31,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",31,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",31,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",31,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",31,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",31,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",31,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",31,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",31,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",31,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",31,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",31,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",31,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",31,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",31,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",31,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",31,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",31,[[["self"]],["self"]]],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",32,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",32,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",32,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",32,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",32,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",33,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",33,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["openssl"]={"doc":"","items":[[5,"init","openssl","",N,N],[0,"aes","","Low level AES IGE functionality",N,N],[3,"KeyError","openssl::aes","Provides Error handling for parsing keys.",N,N],[3,"AesKey","","The key used to encrypt or decrypt cipher blocks.",N,N],[5,"aes_ige","","Performs AES IGE encryption or decryption",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_encrypt","","Prepares a key for encryption.",1,N],[11,"new_decrypt","","Prepares a key for decryption.",1,N],[0,"asn1","openssl","Defines the format of certificiates",N,N],[3,"Asn1GeneralizedTime","openssl::asn1","Non-UTC representation of time",N,N],[3,"Asn1GeneralizedTimeRef","","Reference to a [`Asn1GeneralizedTime`]",N,N],[3,"Asn1Time","","Time storage and comparison",N,N],[3,"Asn1TimeRef","","Reference to an [`Asn1Time`]",N,N],[3,"Asn1String","","Primary ASN.1 type used by OpenSSL",N,N],[3,"Asn1StringRef","","Reference to [`Asn1String`]",N,N],[3,"Asn1Integer","","Numeric representation",N,N],[3,"Asn1IntegerRef","","Reference to [`Asn1Integer`]",N,N],[3,"Asn1BitString","","Sequence of bytes",N,N],[3,"Asn1BitStringRef","","Reference to [`Asn1BitString`]",N,N],[3,"Asn1Object","","Object Identifier",N,N],[3,"Asn1ObjectRef","","Reference to [`Asn1Object`]",N,N],[11,"from_ptr","","",2,N],[11,"as_ptr","","",2,N],[11,"drop","","",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"deref_mut","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"borrow","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"as_ref","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_ptr","","",4,N],[11,"as_ptr","","",4,N],[11,"drop","","",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["asn1timeref"]]],[11,"deref_mut","","",4,[[["self"]],["asn1timeref"]]],[11,"borrow","","",4,[[["self"]],["asn1timeref"]]],[11,"as_ref","","",4,[[["self"]],["asn1timeref"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"days_from_now","","Creates a new time on specified interval in days from now",4,[[["u32"]],["result",["asn1time","errorstack"]]]],[11,"from_ptr","","",6,N],[11,"as_ptr","","",6,N],[11,"drop","","",6,[[["self"]]]],[11,"deref","","",6,[[["self"]],["asn1stringref"]]],[11,"deref_mut","","",6,[[["self"]],["asn1stringref"]]],[11,"borrow","","",6,[[["self"]],["asn1stringref"]]],[11,"as_ref","","",6,[[["self"]],["asn1stringref"]]],[11,"as_utf8","","Converts the ASN.1 underlying format to UTF8",7,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"as_slice","","Return the string as an array of bytes",7,N],[11,"len","","Return the length of the Asn1String (number of bytes)",7,[[["self"]],["usize"]]],[11,"from_ptr","","",8,N],[11,"as_ptr","","",8,N],[11,"drop","","",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["asn1integerref"]]],[11,"deref_mut","","",8,[[["self"]],["asn1integerref"]]],[11,"borrow","","",8,[[["self"]],["asn1integerref"]]],[11,"as_ref","","",8,[[["self"]],["asn1integerref"]]],[11,"get","","",9,[[["self"]],["i64"]]],[11,"to_bn","","Converts the integer to a `BigNum`.",9,[[["self"]],["result",["bignum","errorstack"]]]],[11,"set","","Sets the ASN.1 value to the value of a signed 32-bit integer, for larger numbers see [`bn`].",9,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"from_ptr","","",10,N],[11,"as_ptr","","",10,N],[11,"drop","","",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["asn1bitstringref"]]],[11,"deref_mut","","",10,[[["self"]],["asn1bitstringref"]]],[11,"borrow","","",10,[[["self"]],["asn1bitstringref"]]],[11,"as_ref","","",10,[[["self"]],["asn1bitstringref"]]],[11,"as_slice","","Returns the Asn1BitString as a slice",11,N],[11,"len","","Length of Asn1BitString in number of bytes.",11,[[["self"]],["usize"]]],[11,"from_ptr","","",12,N],[11,"as_ptr","","",12,N],[11,"drop","","",12,[[["self"]]]],[11,"deref","","",12,[[["self"]],["asn1objectref"]]],[11,"deref_mut","","",12,[[["self"]],["asn1objectref"]]],[11,"borrow","","",12,[[["self"]],["asn1objectref"]]],[11,"as_ref","","",12,[[["self"]],["asn1objectref"]]],[11,"nid","","Returns the NID associated with this OID.",13,[[["self"]],["nid"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[0,"bn","openssl","BigNum implementation",N,N],[3,"MsbOption","openssl::bn","Options for the most significant bits of a randomly generated `BigNum`.",N,N],[3,"BigNumContext","","Temporary storage for BigNums on the secure heap",N,N],[3,"BigNumContextRef","","Reference to [`BigNumContext`]",N,N],[3,"BigNum","","Dynamically sized large number impelementation",N,N],[3,"BigNumRef","","Reference to a [`BigNum`]",N,N],[18,"MAYBE_ZERO","","The most significant bit of the number may be 0.",14,N],[18,"ONE","","The most significant bit of the number must be 1.",14,N],[18,"TWO_ONES","","The most significant two bits of the number must be 1.",14,N],[11,"from_ptr","","",15,N],[11,"as_ptr","","",15,N],[11,"drop","","",15,[[["self"]]]],[11,"deref","","",15,[[["self"]],["bignumcontextref"]]],[11,"deref_mut","","",15,[[["self"]],["bignumcontextref"]]],[11,"borrow","","",15,[[["self"]],["bignumcontextref"]]],[11,"as_ref","","",15,[[["self"]],["bignumcontextref"]]],[11,"new","","Returns a new `BigNumContext`.",15,[[],["result",["bignumcontext","errorstack"]]]],[11,"from_ptr","","",16,N],[11,"as_ptr","","",16,N],[11,"drop","","",16,[[["self"]]]],[11,"deref","","",16,[[["self"]],["bignumref"]]],[11,"deref_mut","","",16,[[["self"]],["bignumref"]]],[11,"borrow","","",16,[[["self"]],["bignumref"]]],[11,"as_ref","","",16,[[["self"]],["bignumref"]]],[11,"clear","","Erases the memory used by this `BigNum`, resetting its value to 0.",17,[[["self"]]]],[11,"add_word","","Adds a `u32` to `self`.",17,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"sub_word","","Subtracts a `u32` from `self`.",17,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"mul_word","","Multiplies a `u32` by `self`.",17,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"div_word","","Divides `self` by a `u32`, returning the remainder.",17,[[["self"],["u32"]],["result",["u64","errorstack"]]]],[11,"mod_word","","Returns the result of `self` modulo `w`.",17,[[["self"],["u32"]],["result",["u64","errorstack"]]]],[11,"rand_range","","Places a cryptographically-secure pseudo-random nonnegative number less than `self` in `rnd`.",17,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"pseudo_rand_range","","The cryptographically weak counterpart to `rand_in_range`.",17,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",17,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",17,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",17,[[["self"],["i32"]],["bool"]]],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",17,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"lshift1","","Places `a << 1` in `self`.  Equivalent to `self * 2`.",17,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"rshift1","","Places `a >> 1` in `self`. Equivalent to `self / 2`.",17,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"checked_add","","Places `a + b` in `self`.  [`core::ops::Add`] is also implemented for `BigNumRef`.",17,[[["self"],["bignumref"],["bignumref"]],["result",["errorstack"]]]],[11,"checked_sub","","Places `a - b` in `self`. [`core::ops::Sub`] is also implemented for `BigNumRef`.",17,[[["self"],["bignumref"],["bignumref"]],["result",["errorstack"]]]],[11,"lshift","","Places `a << n` in `self`.  Equivalent to `a * 2 ^ n`.",17,[[["self"],["bignumref"],["i32"]],["result",["errorstack"]]]],[11,"rshift","","Places `a >> n` in `self`. Equivalent to `a / 2 ^ n`.",17,[[["self"],["bignumref"],["i32"]],["result",["errorstack"]]]],[11,"to_owned","","Creates a new BigNum with the same value.",17,[[["self"]],["result",["bignum","errorstack"]]]],[11,"set_negative","","Sets the sign of `self`.  Pass true to set `self` to a negative.  False sets `self` positive.",17,[[["self"],["bool"]]]],[11,"ucmp","","Compare the absolute values of `self` and `oth`.",17,[[["self"],["bignumref"]],["ordering"]]],[11,"is_negative","","Returns `true` if `self` is negative.",17,[[["self"]],["bool"]]],[11,"num_bits","","Returns the number of significant bits in `self`.",17,[[["self"]],["i32"]]],[11,"num_bytes","","Returns the size of `self` in bytes. Implemented natively.",17,[[["self"]],["i32"]]],[11,"rand","","Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.",17,[[["self"],["i32"],["msboption"],["bool"]],["result",["errorstack"]]]],[11,"pseudo_rand","","The cryptographically weak counterpart to `rand`.  Not suitable for key generation.",17,[[["self"],["i32"],["msboption"],["bool"]],["result",["errorstack"]]]],[11,"generate_prime","","Generates a prime number, placing it in `self`.",17,[[["self"],["i32"],["bool"],["option",["bignumref"]],["option",["bignumref"]]],["result",["errorstack"]]]],[11,"checked_mul","","Places the result of `a * b` in `self`. [`core::ops::Mul`] is also implemented for `BigNumRef`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"checked_div","","Places the result of `a / b` in `self`. The remainder is discarded. [`core::ops::Div`] is also implemented for `BigNumRef`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"checked_rem","","Places the result of `a % b` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"div_rem","","Places the result of `a / b` in `self` and `a % b` in `rem`.",17,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"sqr","","Places the result of `a²` in `self`.",17,[[["self"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"nnmod","","Places the result of `a mod m` in `self`.  As opposed to `div_rem` the result is non-negative.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_add","","Places the result of `(a + b) mod m` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_sub","","Places the result of `(a - b) mod m` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_mul","","Places the result of `(a * b) mod m` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_sqr","","Places the result of `a² mod m` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"exp","","Places the result of `a^p` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_exp","","Places the result of `a^p mod m` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_inverse","","Places the inverse of `a` modulo `n` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"gcd","","Places the greatest common denominator of `a` and `b` in `self`.",17,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"is_prime","","Checks whether `self` is prime.",17,[[["self"],["i32"],["bignumcontextref"]],["result",["bool","errorstack"]]]],[11,"is_prime_fasttest","","Checks whether `self` is prime with optional trial division.",17,[[["self"],["i32"],["bignumcontextref"],["bool"]],["result",["bool","errorstack"]]]],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",17,[[["self"]],["vec",["u8"]]]],[11,"to_dec_str","","Returns a decimal string representation of `self`.",17,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",17,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"to_asn1_integer","","Returns an `Asn1Integer` containing the value of `self`.",17,[[["self"]],["result",["asn1integer","errorstack"]]]],[11,"new","","Creates a new `BigNum` with the value 0.",16,[[],["result",["bignum","errorstack"]]]],[11,"from_u32","","Creates a new `BigNum` with the given value.",16,[[["u32"]],["result",["bignum","errorstack"]]]],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",16,[[["str"]],["result",["bignum","errorstack"]]]],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",16,[[["str"]],["result",["bignum","errorstack"]]]],[11,"get_rfc2409_prime_768","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 768`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakley group id 1.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc2409_prime_1024","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 1024`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakly group 2.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_1536","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 1536`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 5.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_2048","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 2048`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 14.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_3072","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 3072`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 15.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_4096","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 4096`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 16.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_6144","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 6144`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 17.",16,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_8192","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 8192`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 18.",16,[[],["result",["bignum","errorstack"]]]],[11,"from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["bignumref"]],["bool"]]],[11,"eq","","",17,[[["self"],["bignum"]],["bool"]]],[11,"eq","","",16,[[["self"],["bignum"]],["bool"]]],[11,"eq","","",16,[[["self"],["bignumref"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["bignumref"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["bignum"]],["option",["ordering"]]]],[11,"cmp","","",17,[[["self"],["bignumref"]],["ordering"]]],[11,"partial_cmp","","",16,[[["self"],["bignum"]],["option",["ordering"]]]],[11,"partial_cmp","","",16,[[["self"],["bignumref"]],["option",["ordering"]]]],[11,"cmp","","",16,[[["self"],["bignum"]],["ordering"]]],[11,"neg","","",16,[[["self"]],["bignum"]]],[0,"cms","openssl","SMIME implementation using CMS",N,N],[3,"CMSOptions","openssl::cms","",N,N],[3,"CmsContentInfo","","High level CMS wrapper",N,N],[3,"CmsContentInfoRef","","Reference to [`CMSContentInfo`]",N,N],[11,"eq","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"ne","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"clone","","",18,[[["self"]],["cmsoptions"]]],[11,"partial_cmp","","",18,[[["self"],["cmsoptions"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"le","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"gt","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"ge","","",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"cmp","","",18,[[["self"],["cmsoptions"]],["ordering"]]],[11,"hash","","",18,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[18,"TEXT","","",18,N],[18,"CMS_NOCERTS","","",18,N],[18,"NO_CONTENT_VERIFY","","",18,N],[18,"NO_ATTR_VERIFY","","",18,N],[18,"NOSIGS","","",18,N],[18,"NOINTERN","","",18,N],[18,"NO_SIGNER_CERT_VERIFY","","",18,N],[18,"NOVERIFY","","",18,N],[18,"DETACHED","","",18,N],[18,"BINARY","","",18,N],[18,"NOATTR","","",18,N],[18,"NOSMIMECAP","","",18,N],[18,"NOOLDMIMETYPE","","",18,N],[18,"CRLFEOL","","",18,N],[18,"STREAM","","",18,N],[18,"NOCRL","","",18,N],[18,"PARTIAL","","",18,N],[18,"REUSE_DIGEST","","",18,N],[18,"USE_KEYID","","",18,N],[18,"DEBUG_DECRYPT","","",18,N],[11,"empty","","Returns an empty set of flags.",18,[[],["cmsoptions"]]],[11,"all","","Returns the set containing all flags.",18,[[],["cmsoptions"]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[["self"]],["c_uint"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,[[["c_uint"]],["option",["cmsoptions"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,[[["c_uint"]],["cmsoptions"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",18,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,[[["self"],["cmsoptions"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["self"],["cmsoptions"]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["self"],["cmsoptions"]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["self"],["cmsoptions"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,[[["self"],["cmsoptions"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["self"],["cmsoptions"]],["cmsoptions"]]],[11,"bitor_assign","","Adds the set of flags.",18,[[["self"],["cmsoptions"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,[[["self"],["cmsoptions"]],["cmsoptions"]]],[11,"bitxor_assign","","Toggles the set of flags.",18,[[["self"],["cmsoptions"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["self"],["cmsoptions"]],["cmsoptions"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",18,[[["self"],["cmsoptions"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["self"],["cmsoptions"]],["cmsoptions"]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,[[["self"],["cmsoptions"]]]],[11,"not","","Returns the complement of this set of flags.",18,[[["self"]],["cmsoptions"]]],[11,"extend","","",18,[[["self"],["t"]]]],[11,"from_iter","","",18,[[["t"]],["cmsoptions"]]],[11,"from_ptr","","",19,N],[11,"as_ptr","","",19,N],[11,"drop","","",19,[[["self"]]]],[11,"deref","","",19,[[["self"]],["cmscontentinforef"]]],[11,"deref_mut","","",19,[[["self"]],["cmscontentinforef"]]],[11,"borrow","","",19,[[["self"]],["cmscontentinforef"]]],[11,"as_ref","","",19,[[["self"]],["cmscontentinforef"]]],[11,"decrypt","","Given the sender's private key, `pkey` and the recipient's certificiate, `cert`, decrypt the data in `self`.",20,[[["self"],["pkeyref"],["x509"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes this CmsContentInfo using DER.",20,[[["self"]],["result",["vec","errorstack"]]]],[11,"smime_read_cms","","Parses a smime formatted `vec` of bytes into a `CmsContentInfo`.",19,N],[11,"sign","","Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`, data `data` and flags `flags`, create a CmsContentInfo struct.",19,[[["option",["x509ref"]],["option",["pkeyref"]],["option",["stackref"]],["option"],["cmsoptions"]],["result",["cmscontentinfo","errorstack"]]]],[0,"conf","openssl","Interface for processing OpenSSL configuration files.",N,N],[3,"ConfMethod","openssl::conf","",N,N],[3,"Conf","","",N,N],[3,"ConfRef","","",N,N],[11,"default","","Retrieve handle to the default OpenSSL configuration file processing function.",21,[[],["confmethod"]]],[11,"from_ptr","","Construct from raw pointer.",21,N],[11,"as_ptr","","Convert to raw pointer.",21,N],[11,"from_ptr","","",22,N],[11,"as_ptr","","",22,N],[11,"drop","","",22,[[["self"]]]],[11,"deref","","",22,[[["self"]],["confref"]]],[11,"deref_mut","","",22,[[["self"]],["confref"]]],[11,"borrow","","",22,[[["self"]],["confref"]]],[11,"as_ref","","",22,[[["self"]],["confref"]]],[11,"new","","Create a configuration parser.",22,[[["confmethod"]],["result",["conf","errorstack"]]]],[0,"derive","openssl","Shared secret derivation.",N,N],[3,"Deriver","openssl::derive","A type used to derive a shared secret between two keys.",N,N],[11,"new","","Creates a new `Deriver` using the provided private key.",23,[[["pkeyref"]],["result",["deriver","errorstack"]]]],[11,"set_peer","","Sets the peer key used for secret derivation.",23,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"len","","Returns the size of the shared secret.",23,[[["self"]],["result",["usize","errorstack"]]]],[11,"derive","","Derives a shared secret between the two keys, writing it into the buffer.",23,N],[11,"derive_to_vec","","A convenience function which derives a shared secret and returns it in a new buffer.",23,[[["self"]],["result",["vec","errorstack"]]]],[0,"dh","openssl","",N,N],[3,"Dh","openssl::dh","",N,N],[3,"DhRef","","",N,N],[11,"from_ptr","","",24,N],[11,"as_ptr","","",24,N],[11,"drop","","",24,[[["self"]]]],[11,"deref","","",24,[[["self"]],["dhref"]]],[11,"deref_mut","","",24,[[["self"]],["dhref"]]],[11,"borrow","","",24,[[["self"]],["dhref"]]],[11,"as_ref","","",24,[[["self"]],["dhref"]]],[11,"params_to_pem","","Serializes the parameters into a PEM-encoded PKCS#3 DHparameter structure.",25,[[["self"]],["result",["vec","errorstack"]]]],[11,"params_to_der","","Serializes the parameters into a DER-encoded PKCS#3 DHparameter structure.",25,[[["self"]],["result",["vec","errorstack"]]]],[11,"from_params","","",24,[[["bignum"],["bignum"],["bignum"]],["result",["dh","errorstack"]]]],[11,"params_from_pem","","Deserializes a PEM-encoded PKCS#3 DHpararameters structure.",24,N],[11,"params_from_der","","Deserializes a DER-encoded PKCS#3 DHparameters structure.",24,N],[0,"dsa","openssl","Digital Signatures",N,N],[3,"Dsa","openssl::dsa","Object representing DSA keys.",N,N],[3,"DsaRef","","Reference to [`Dsa`].",N,N],[11,"from_ptr","","",26,N],[11,"as_ptr","","",26,N],[11,"drop","","",26,[[["self"]]]],[11,"deref","","",26,[[["self"]],["dsaref"]]],[11,"deref_mut","","",26,[[["self"]],["dsaref"]]],[11,"borrow","","",26,[[["self"]],["dsaref"]]],[11,"as_ref","","",26,[[["self"]],["dsaref"]]],[11,"public_key_to_pem","","Serialies the public key into a PEM-encoded SubjectPublicKeyInfo structure.",27,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key into a DER-encoded SubjectPublicKeyInfo structure.",27,[[["self"]],["result",["vec","errorstack"]]]],[11,"pub_key","","Returns a reference to the public key component of `self`.",27,[[["self"]],["bignumref"]]],[11,"priv_key","","Returns a reference to the private key component of `self`.",27,[[["self"]],["bignumref"]]],[11,"size","","Returns the maximum size of the signature output by `self` in bytes.",27,[[["self"]],["u32"]]],[11,"p","","Returns the DSA prime parameter of `self`.",27,[[["self"]],["bignumref"]]],[11,"q","","Returns the DSA sub-prime parameter of `self`.",27,[[["self"]],["bignumref"]]],[11,"g","","Returns the DSA base parameter of `self`.",27,[[["self"]],["bignumref"]]],[11,"generate","","Generate a DSA key pair.",26,[[["u32"]],["result",["dsa","errorstack"]]]],[11,"from_private_components","","Create a DSA key pair with the given parameters",26,[[["bignum"],["bignum"],["bignum"],["bignum"],["bignum"]],["result",["dsa","errorstack"]]]],[11,"public_key_from_pem","","Decodes a PEM-encoded SubjectPublicKeyInfo structure containing a DSA key.",26,N],[11,"public_key_from_der","","Decodes a DER-encoded SubjectPublicKeyInfo structure containing a DSA key.",26,N],[11,"from_public_components","","Create a new DSA key with only public components.",26,[[["bignum"],["bignum"],["bignum"],["bignum"]],["result",["dsa","errorstack"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[0,"ec","openssl","Elliptic Curve",N,N],[3,"PointConversionForm","openssl::ec","Compressed or Uncompressed conversion",N,N],[3,"Asn1Flag","","Named Curve or Explicit",N,N],[3,"EcGroup","","Describes the curve",N,N],[3,"EcGroupRef","","Reference to [`EcGroup`]",N,N],[3,"EcPoint","","Represents a point on the curve",N,N],[3,"EcPointRef","","Reference to [`EcPoint`]",N,N],[3,"EcKey","","Public and optional Private key on the given curve",N,N],[3,"EcKeyRef","","Reference to [`EcKey`]",N,N],[11,"clone","","",28,[[["self"]],["pointconversionform"]]],[18,"COMPRESSED","","Compressed conversion from point value.",28,N],[18,"UNCOMPRESSED","","Uncompressed conversion from point value.",28,N],[18,"HYBRID","","Performs both compressed and uncompressed conversions.",28,N],[11,"clone","","",29,[[["self"]],["asn1flag"]]],[18,"EXPLICIT_CURVE","","Curve defined using polynomial parameters",29,N],[18,"NAMED_CURVE","","Standard Curves",29,N],[11,"from_ptr","","",30,N],[11,"as_ptr","","",30,N],[11,"drop","","",30,[[["self"]]]],[11,"deref","","",30,[[["self"]],["ecgroupref"]]],[11,"deref_mut","","",30,[[["self"]],["ecgroupref"]]],[11,"borrow","","",30,[[["self"]],["ecgroupref"]]],[11,"as_ref","","",30,[[["self"]],["ecgroupref"]]],[11,"from_curve_name","","Returns the group of a standard named curve.",30,[[["nid"]],["result",["ecgroup","errorstack"]]]],[11,"components_gfp","","Places the components of a curve over a prime field in the provided `BigNum`s. The components make up the formula `y^2 mod p = x^3 + ax + b mod p`.",31,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"components_gf2m","","Places the components of a curve over a binary field in the provided `BigNum`s. The components make up the formula `y^2 + xy = x^3 + ax^2 + b`.",31,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"degree","","Returns the degree of the curve.",31,[[["self"]],["u32"]]],[11,"order","","Places the order of the curve in the provided `BigNum`.",31,[[["self"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"set_asn1_flag","","Sets the flag determining if the group corresponds to a named curve or must be explicitly parameterized.",31,[[["self"],["asn1flag"]]]],[11,"from_ptr","","",32,N],[11,"as_ptr","","",32,N],[11,"drop","","",32,[[["self"]]]],[11,"deref","","",32,[[["self"]],["ecpointref"]]],[11,"deref_mut","","",32,[[["self"]],["ecpointref"]]],[11,"borrow","","",32,[[["self"]],["ecpointref"]]],[11,"as_ref","","",32,[[["self"]],["ecpointref"]]],[11,"add","","Computes `a + b`, storing the result in `self`.",33,[[["self"],["ecgroupref"],["ecpointref"],["ecpointref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul","","Computes `q * m`, storing the result in `self`.",33,[[["self"],["ecgroupref"],["ecpointref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul_generator","","Computes `generator * n`, storing the result ing `self`.",33,[[["self"],["ecgroupref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul_full","","Computes `generator * n + q * m`, storing the result in `self`.",33,[[["self"],["ecgroupref"],["bignumref"],["ecpointref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"invert","","Inverts `self`.",33,[[["self"],["ecgroupref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"to_bytes","","Serializes the point to a binary representation.",33,[[["self"],["ecgroupref"],["pointconversionform"],["bignumcontextref"]],["result",["vec","errorstack"]]]],[11,"eq","","Determines if this point is equal to another.",33,[[["self"],["ecgroupref"],["ecpointref"],["bignumcontextref"]],["result",["bool","errorstack"]]]],[11,"affine_coordinates_gfp","","Place affine coordinates of a curve over a prime field in the provided `x` and `y` `BigNum`s",33,[[["self"],["ecgroupref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"affine_coordinates_gf2m","","Place affine coordinates of a curve over a binary field in the provided `x` and `y` `BigNum`s",33,[[["self"],["ecgroupref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"new","","Creates a new point on the specified curve.",32,[[["ecgroupref"]],["result",["ecpoint","errorstack"]]]],[11,"from_bytes","","Creates point from a binary representation",32,N],[11,"from_ptr","","",34,N],[11,"as_ptr","","",34,N],[11,"drop","","",34,[[["self"]]]],[11,"deref","","",34,[[["self"]],["eckeyref"]]],[11,"deref_mut","","",34,[[["self"]],["eckeyref"]]],[11,"borrow","","",34,[[["self"]],["eckeyref"]]],[11,"as_ref","","",34,[[["self"]],["eckeyref"]]],[11,"private_key_to_pem","","Serializes the private key to a PEM-encoded ECPrivateKey structure.",35,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to a PEM-encoded encrypted ECPrivateKey structure.",35,N],[11,"private_key_to_der","","Serializes the private key into a DER-encoded ECPrivateKey structure.",35,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key","","Return [`EcPoint`] associated with the private key",35,[[["self"]],["bignumref"]]],[11,"public_key","","Returns the public key.",35,[[["self"]],["ecpointref"]]],[11,"group","","Return [`EcGroup`] of the `EcKey`",35,[[["self"]],["ecgroupref"]]],[11,"check_key","","Checks the key for validity.",35,[[["self"]],["result",["errorstack"]]]],[11,"to_owned","","",35,[[["self"]],["eckey"]]],[11,"from_curve_name","","Constructs an `EcKey` corresponding to a known curve.",34,[[["nid"]],["result",["eckey","errorstack"]]]],[11,"from_group","","Constructs an `EcKey` corresponding to a curve.",34,[[["ecgroupref"]],["result",["eckey","errorstack"]]]],[11,"from_public_key","","Constructs an `EcKey` from the specified group with the associated `EcPoint`, public_key.",34,[[["ecgroupref"],["ecpointref"]],["result",["eckey","errorstack"]]]],[11,"from_public_key_affine_coordinates","","Constructs a public key from its affine coordinates.",34,[[["ecgroupref"],["bignumref"],["bignumref"]],["result",["eckey","errorstack"]]]],[11,"generate","","Generates a new public/private key pair on the specified curve.",34,[[["ecgroupref"]],["result",["eckey","errorstack"]]]],[11,"from_private_components","","Constructs an public/private key pair given a curve, a private key and a public key point.",34,[[["ecgroupref"],["bignumref"],["ecpointref"]],["result",["eckey","errorstack"]]]],[11,"private_key_from_pem","","Deserializes a private key from a PEM-encoded ECPrivateKey structure.",34,N],[11,"private_key_from_pem_passphrase","","Deserializes a private key from a PEM-encoded encrypted ECPrivateKey structure.",34,N],[11,"private_key_from_pem_callback","","Deserializes a private key from a PEM-encoded encrypted ECPrivateKey structure.",34,N],[11,"private_key_from_der","","Decodes a DER-encoded elliptic curve private key structure.",34,N],[11,"clone","","",34,[[["self"]],["eckey"]]],[0,"ecdsa","openssl","Low level Elliptic Curve Digital Signature Algorithm (ECDSA) functions.",N,N],[3,"EcdsaSig","openssl::ecdsa","A low level interface to ECDSA",N,N],[3,"EcdsaSigRef","","Reference to [`EcdsaSig`]",N,N],[11,"from_ptr","","",36,N],[11,"as_ptr","","",36,N],[11,"drop","","",36,[[["self"]]]],[11,"deref","","",36,[[["self"]],["ecdsasigref"]]],[11,"deref_mut","","",36,[[["self"]],["ecdsasigref"]]],[11,"borrow","","",36,[[["self"]],["ecdsasigref"]]],[11,"as_ref","","",36,[[["self"]],["ecdsasigref"]]],[11,"sign","","Computes a digital signature of the hash value `data` using the private EC key eckey.",36,N],[11,"from_private_components","","Returns a new `EcdsaSig` by setting the `r` and `s` values associated with a ECDSA signature.",36,[[["bignum"],["bignum"]],["result",["ecdsasig","errorstack"]]]],[11,"verify","","Verifies if the signature is a valid ECDSA signature using the given public key.",36,N],[11,"r","","Returns internal component: `r` of a `EcdsaSig`. (See X9.62 or FIPS 186-2)",36,[[["self"]],["bignumref"]]],[11,"s","","Returns internal components: `s` of a `EcdsaSig`. (See X9.62 or FIPS 186-2)",36,[[["self"]],["bignumref"]]],[0,"error","openssl","Errors returned by OpenSSL library.",N,N],[3,"ErrorStack","openssl::error","Collection of [`Error`]s from OpenSSL.",N,N],[3,"Error","","An error reported from OpenSSL.",N,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["errorstack"]]],[11,"get","","Returns the contents of the OpenSSL error stack.",37,[[],["errorstack"]]],[11,"put","","Pushes the errors back onto the OpenSSL error stack.",37,[[["self"]]]],[11,"errors","","Returns the errors in the stack.",37,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"description","","",37,[[["self"]],["str"]]],[11,"clone","","",38,[[["self"]],["error"]]],[11,"get","","Returns the first error on the OpenSSL error stack.",38,[[],["option",["error"]]]],[11,"put","","Pushes the error back onto the OpenSSL error stack.",38,[[["self"]]]],[11,"code","","Returns the raw OpenSSL error code for this error.",38,[[["self"]],["c_ulong"]]],[11,"library","","Returns the name of the library reporting the error, if available.",38,[[["self"]],["option",["str"]]]],[11,"function","","Returns the name of the function reporting the error.",38,[[["self"]],["option",["str"]]]],[11,"reason","","Returns the reason for the error.",38,[[["self"]],["option",["str"]]]],[11,"file","","Returns the name of the source file which encountered the error.",38,[[["self"]],["str"]]],[11,"line","","Returns the line in the source file which encountered the error.",38,[[["self"]],["u32"]]],[11,"data","","Returns additional data describing the error.",38,[[["self"]],["option",["str"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"description","","",38,[[["self"]],["str"]]],[0,"ex_data","openssl","",N,N],[3,"Index","openssl::ex_data","A slot in a type's \"extra data\" structure.",N,N],[11,"clone","","",39,[[["self"]],["index"]]],[11,"from_raw","","",39,[[["c_int"]],["index"]]],[11,"as_raw","","",39,[[["self"]],["c_int"]]],[0,"fips","openssl","FIPS 140-2 support.",N,N],[5,"enable","openssl::fips","Moves the library into or out of the FIPS 140-2 mode of operation.",N,[[["bool"]],["result",["errorstack"]]]],[5,"enabled","","Determines if the library is running in the FIPS 140-2 mode of operation.",N,[[],["bool"]]],[0,"hash","openssl","",N,N],[3,"MessageDigest","openssl::hash","",N,N],[3,"Hasher","","Provides message digest (hash) computation.",N,N],[3,"DigestBytes","","The resulting bytes of a digest.",N,N],[5,"hash","","Computes the hash of the `data` with the hash `t`.",N,N],[11,"clone","","",40,[[["self"]],["messagedigest"]]],[11,"from_ptr","","",40,N],[11,"from_nid","","Returns the `MessageDigest` corresponding to an `Nid`.",40,[[["nid"]],["option",["messagedigest"]]]],[11,"md5","","",40,[[],["messagedigest"]]],[11,"sha1","","",40,[[],["messagedigest"]]],[11,"sha224","","",40,[[],["messagedigest"]]],[11,"sha256","","",40,[[],["messagedigest"]]],[11,"sha384","","",40,[[],["messagedigest"]]],[11,"sha512","","",40,[[],["messagedigest"]]],[11,"ripemd160","","",40,[[],["messagedigest"]]],[11,"as_ptr","","",40,N],[11,"size","","The size of the digest in bytes",40,[[["self"]],["usize"]]],[11,"new","","Creates a new `Hasher` with the specified hash type.",41,[[["messagedigest"]],["result",["hasher","errorstack"]]]],[11,"update","","Feeds data into the hasher.",41,N],[11,"finish","","Returns the hash of the data written and resets the hasher.",41,[[["self"]],["result",["digestbytes","errorstack"]]]],[11,"write","","",41,N],[11,"flush","","",41,[[["self"]],["result"]]],[11,"clone","","",41,[[["self"]],["hasher"]]],[11,"drop","","",41,[[["self"]]]],[11,"clone","","",42,[[["self"]],["digestbytes"]]],[11,"deref","","",42,N],[11,"deref_mut","","",42,N],[11,"as_ref","","",42,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[0,"memcmp","openssl","Utilities to safely compare cryptographic values.",N,N],[5,"eq","openssl::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",N,N],[0,"nid","openssl","A collection of numerical identifiers for OpenSSL objects.",N,N],[3,"SignatureAlgorithms","openssl::nid","The digest and public-key algorithms associated with a signature.",N,N],[12,"digest","","The signature's digest.",43,N],[12,"pkey","","The signature's public-key.",43,N],[3,"Nid","","A numerical identifier for an OpenSSL object.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["nid"]]],[11,"eq","","",44,[[["self"],["nid"]],["bool"]]],[11,"ne","","",44,[[["self"],["nid"]],["bool"]]],[11,"hash","","",44,N],[11,"from_raw","","Create a `Nid` from an integer representation.",44,[[["c_int"]],["nid"]]],[11,"as_raw","","Return the integer representation of a `Nid`.",44,[[["self"]],["c_int"]]],[11,"signature_algorithms","","Returns the `Nid`s of the digest and public key algorithms associated with a signature ID.",44,[[["self"]],["option",["signaturealgorithms"]]]],[11,"long_name","","Return the string representation of a `Nid` (long) This corresponds to [`OBJ_nid2ln`]",44,[[["self"]],["result",["str","errorstack"]]]],[11,"short_name","","Return the string representation of a `Nid` (short) This corresponds to [`OBJ_nid2sn`]",44,[[["self"]],["result",["str","errorstack"]]]],[18,"UNDEF","","",44,N],[18,"ITU_T","","",44,N],[18,"CCITT","","",44,N],[18,"ISO","","",44,N],[18,"JOINT_ISO_ITU_T","","",44,N],[18,"JOINT_ISO_CCITT","","",44,N],[18,"MEMBER_BODY","","",44,N],[18,"IDENTIFIED_ORGANIZATION","","",44,N],[18,"HMAC_MD5","","",44,N],[18,"HMAC_SHA1","","",44,N],[18,"CERTICOM_ARC","","",44,N],[18,"INTERNATIONAL_ORGANIZATIONS","","",44,N],[18,"WAP","","",44,N],[18,"WAP_WSG","","",44,N],[18,"SELECTED_ATTRIBUTE_TYPES","","",44,N],[18,"CLEARANCE","","",44,N],[18,"ISO_US","","",44,N],[18,"X9_57","","",44,N],[18,"X9CM","","",44,N],[18,"DSA","","",44,N],[18,"DSAWITHSHA1","","",44,N],[18,"ANSI_X9_62","","",44,N],[18,"X9_62_PRIME_FIELD","","",44,N],[18,"X9_62_CHARACTERISTIC_TWO_FIELD","","",44,N],[18,"X9_62_ID_CHARACTERISTIC_TWO_BASIS","","",44,N],[18,"X9_62_ONBASIS","","",44,N],[18,"X9_62_TPBASIS","","",44,N],[18,"X9_62_PPBASIS","","",44,N],[18,"X9_62_ID_ECPUBLICKEY","","",44,N],[18,"X9_62_C2PNB163V1","","",44,N],[18,"X9_62_C2PNB163V2","","",44,N],[18,"X9_62_C2PNB163V3","","",44,N],[18,"X9_62_C2PNB176V1","","",44,N],[18,"X9_62_C2TNB191V1","","",44,N],[18,"X9_62_C2TNB191V2","","",44,N],[18,"X9_62_C2TNB191V3","","",44,N],[18,"X9_62_C2ONB191V4","","",44,N],[18,"X9_62_C2ONB191V5","","",44,N],[18,"X9_62_C2PNB208W1","","",44,N],[18,"X9_62_C2TNB239V1","","",44,N],[18,"X9_62_C2TNB239V2","","",44,N],[18,"X9_62_C2TNB239V3","","",44,N],[18,"X9_62_C2ONB239V4","","",44,N],[18,"X9_62_C2ONB239V5","","",44,N],[18,"X9_62_C2PNB272W1","","",44,N],[18,"X9_62_C2PNB304W1","","",44,N],[18,"X9_62_C2TNB359V1","","",44,N],[18,"X9_62_C2PNB368W1","","",44,N],[18,"X9_62_C2TNB431R1","","",44,N],[18,"X9_62_PRIME192V1","","",44,N],[18,"X9_62_PRIME192V2","","",44,N],[18,"X9_62_PRIME192V3","","",44,N],[18,"X9_62_PRIME239V1","","",44,N],[18,"X9_62_PRIME239V2","","",44,N],[18,"X9_62_PRIME239V3","","",44,N],[18,"X9_62_PRIME256V1","","",44,N],[18,"ECDSA_WITH_SHA1","","",44,N],[18,"ECDSA_WITH_RECOMMENDED","","",44,N],[18,"ECDSA_WITH_SPECIFIED","","",44,N],[18,"ECDSA_WITH_SHA224","","",44,N],[18,"ECDSA_WITH_SHA256","","",44,N],[18,"ECDSA_WITH_SHA384","","",44,N],[18,"ECDSA_WITH_SHA512","","",44,N],[18,"SECP112R1","","",44,N],[18,"SECP112R2","","",44,N],[18,"SECP128R1","","",44,N],[18,"SECP128R2","","",44,N],[18,"SECP160K1","","",44,N],[18,"SECP160R1","","",44,N],[18,"SECP160R2","","",44,N],[18,"SECP192K1","","",44,N],[18,"SECP224K1","","",44,N],[18,"SECP224R1","","",44,N],[18,"SECP256K1","","",44,N],[18,"SECP384R1","","",44,N],[18,"SECP521R1","","",44,N],[18,"SECT113R1","","",44,N],[18,"SECT113R2","","",44,N],[18,"SECT131R1","","",44,N],[18,"SECT131R2","","",44,N],[18,"SECT163K1","","",44,N],[18,"SECT163R1","","",44,N],[18,"SECT163R2","","",44,N],[18,"SECT193R1","","",44,N],[18,"SECT193R2","","",44,N],[18,"SECT233K1","","",44,N],[18,"SECT233R1","","",44,N],[18,"SECT239K1","","",44,N],[18,"SECT283K1","","",44,N],[18,"SECT283R1","","",44,N],[18,"SECT409K1","","",44,N],[18,"SECT409R1","","",44,N],[18,"SECT571K1","","",44,N],[18,"SECT571R1","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS1","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS3","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS4","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS5","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS6","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS7","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS8","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS9","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS10","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS11","","",44,N],[18,"WAP_WSG_IDM_ECID_WTLS12","","",44,N],[18,"CAST5_CBC","","",44,N],[18,"CAST5_ECB","","",44,N],[18,"CAST5_CFB64","","",44,N],[18,"CAST5_OFB64","","",44,N],[18,"PBEWITHMD5ANDCAST5_CBC","","",44,N],[18,"ID_PASSWORDBASEDMAC","","",44,N],[18,"ID_DHBASEDMAC","","",44,N],[18,"RSADSI","","",44,N],[18,"PKCS","","",44,N],[18,"PKCS1","","",44,N],[18,"RSAENCRYPTION","","",44,N],[18,"MD2WITHRSAENCRYPTION","","",44,N],[18,"MD4WITHRSAENCRYPTION","","",44,N],[18,"MD5WITHRSAENCRYPTION","","",44,N],[18,"SHA1WITHRSAENCRYPTION","","",44,N],[18,"RSAESOAEP","","",44,N],[18,"MGF1","","",44,N],[18,"RSASSAPSS","","",44,N],[18,"SHA256WITHRSAENCRYPTION","","",44,N],[18,"SHA384WITHRSAENCRYPTION","","",44,N],[18,"SHA512WITHRSAENCRYPTION","","",44,N],[18,"SHA224WITHRSAENCRYPTION","","",44,N],[18,"PKCS3","","",44,N],[18,"DHKEYAGREEMENT","","",44,N],[18,"PKCS5","","",44,N],[18,"PBEWITHMD2ANDDES_CBC","","",44,N],[18,"PBEWITHMD5ANDDES_CBC","","",44,N],[18,"PBEWITHMD2ANDRC2_CBC","","",44,N],[18,"PBEWITHMD5ANDRC2_CBC","","",44,N],[18,"PBEWITHSHA1ANDDES_CBC","","",44,N],[18,"PBEWITHSHA1ANDRC2_CBC","","",44,N],[18,"ID_PBKDF2","","",44,N],[18,"PBES2","","",44,N],[18,"PBMAC1","","",44,N],[18,"PKCS7","","",44,N],[18,"PKCS7_DATA","","",44,N],[18,"PKCS7_SIGNED","","",44,N],[18,"PKCS7_ENVELOPED","","",44,N],[18,"PKCS7_SIGNEDANDENVELOPED","","",44,N],[18,"PKCS7_DIGEST","","",44,N],[18,"PKCS7_ENCRYPTED","","",44,N],[18,"PKCS9","","",44,N],[18,"PKCS9_EMAILADDRESS","","",44,N],[18,"PKCS9_UNSTRUCTUREDNAME","","",44,N],[18,"PKCS9_CONTENTTYPE","","",44,N],[18,"PKCS9_MESSAGEDIGEST","","",44,N],[18,"PKCS9_SIGNINGTIME","","",44,N],[18,"PKCS9_COUNTERSIGNATURE","","",44,N],[18,"PKCS9_CHALLENGEPASSWORD","","",44,N],[18,"PKCS9_UNSTRUCTUREDADDRESS","","",44,N],[18,"PKCS9_EXTCERTATTRIBUTES","","",44,N],[18,"EXT_REQ","","",44,N],[18,"SMIMECAPABILITIES","","",44,N],[18,"SMIME","","",44,N],[18,"ID_SMIME_MOD","","",44,N],[18,"ID_SMIME_CT","","",44,N],[18,"ID_SMIME_AA","","",44,N],[18,"ID_SMIME_ALG","","",44,N],[18,"ID_SMIME_CD","","",44,N],[18,"ID_SMIME_SPQ","","",44,N],[18,"ID_SMIME_CTI","","",44,N],[18,"ID_SMIME_MOD_CMS","","",44,N],[18,"ID_SMIME_MOD_ESS","","",44,N],[18,"ID_SMIME_MOD_OID","","",44,N],[18,"ID_SMIME_MOD_MSG_V3","","",44,N],[18,"ID_SMIME_MOD_ETS_ESIGNATURE_88","","",44,N],[18,"ID_SMIME_MOD_ETS_ESIGNATURE_97","","",44,N],[18,"ID_SMIME_MOD_ETS_ESIGPOLICY_88","","",44,N],[18,"ID_SMIME_MOD_ETS_ESIGPOLICY_97","","",44,N],[18,"ID_SMIME_CT_RECEIPT","","",44,N],[18,"ID_SMIME_CT_AUTHDATA","","",44,N],[18,"ID_SMIME_CT_PUBLISHCERT","","",44,N],[18,"ID_SMIME_CT_TSTINFO","","",44,N],[18,"ID_SMIME_CT_TDTINFO","","",44,N],[18,"ID_SMIME_CT_CONTENTINFO","","",44,N],[18,"ID_SMIME_CT_DVCSREQUESTDATA","","",44,N],[18,"ID_SMIME_CT_DVCSRESPONSEDATA","","",44,N],[18,"ID_SMIME_CT_COMPRESSEDDATA","","",44,N],[18,"ID_CT_ASCIITEXTWITHCRLF","","",44,N],[18,"ID_SMIME_AA_RECEIPTREQUEST","","",44,N],[18,"ID_SMIME_AA_SECURITYLABEL","","",44,N],[18,"ID_SMIME_AA_MLEXPANDHISTORY","","",44,N],[18,"ID_SMIME_AA_CONTENTHINT","","",44,N],[18,"ID_SMIME_AA_MSGSIGDIGEST","","",44,N],[18,"ID_SMIME_AA_ENCAPCONTENTTYPE","","",44,N],[18,"ID_SMIME_AA_CONTENTIDENTIFIER","","",44,N],[18,"ID_SMIME_AA_MACVALUE","","",44,N],[18,"ID_SMIME_AA_EQUIVALENTLABELS","","",44,N],[18,"ID_SMIME_AA_CONTENTREFERENCE","","",44,N],[18,"ID_SMIME_AA_ENCRYPKEYPREF","","",44,N],[18,"ID_SMIME_AA_SIGNINGCERTIFICATE","","",44,N],[18,"ID_SMIME_AA_SMIMEENCRYPTCERTS","","",44,N],[18,"ID_SMIME_AA_TIMESTAMPTOKEN","","",44,N],[18,"ID_SMIME_AA_ETS_SIGPOLICYID","","",44,N],[18,"ID_SMIME_AA_ETS_COMMITMENTTYPE","","",44,N],[18,"ID_SMIME_AA_ETS_SIGNERLOCATION","","",44,N],[18,"ID_SMIME_AA_ETS_SIGNERATTR","","",44,N],[18,"ID_SMIME_AA_ETS_OTHERSIGCERT","","",44,N],[18,"ID_SMIME_AA_ETS_CONTENTTIMESTAMP","","",44,N],[18,"ID_SMIME_AA_ETS_CERTIFICATEREFS","","",44,N],[18,"ID_SMIME_AA_ETS_REVOCATIONREFS","","",44,N],[18,"ID_SMIME_AA_ETS_CERTVALUES","","",44,N],[18,"ID_SMIME_AA_ETS_REVOCATIONVALUES","","",44,N],[18,"ID_SMIME_AA_ETS_ESCTIMESTAMP","","",44,N],[18,"ID_SMIME_AA_ETS_CERTCRLTIMESTAMP","","",44,N],[18,"ID_SMIME_AA_ETS_ARCHIVETIMESTAMP","","",44,N],[18,"ID_SMIME_AA_SIGNATURETYPE","","",44,N],[18,"ID_SMIME_AA_DVCS_DVC","","",44,N],[18,"ID_SMIME_ALG_ESDHWITH3DES","","",44,N],[18,"ID_SMIME_ALG_ESDHWITHRC2","","",44,N],[18,"ID_SMIME_ALG_3DESWRAP","","",44,N],[18,"ID_SMIME_ALG_RC2WRAP","","",44,N],[18,"ID_SMIME_ALG_ESDH","","",44,N],[18,"ID_SMIME_ALG_CMS3DESWRAP","","",44,N],[18,"ID_SMIME_ALG_CMSRC2WRAP","","",44,N],[18,"ID_ALG_PWRI_KEK","","",44,N],[18,"ID_SMIME_CD_LDAP","","",44,N],[18,"ID_SMIME_SPQ_ETS_SQT_URI","","",44,N],[18,"ID_SMIME_SPQ_ETS_SQT_UNOTICE","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFORIGIN","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFRECEIPT","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFDELIVERY","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFSENDER","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFAPPROVAL","","",44,N],[18,"ID_SMIME_CTI_ETS_PROOFOFCREATION","","",44,N],[18,"FRIENDLYNAME","","",44,N],[18,"LOCALKEYID","","",44,N],[18,"MS_CSP_NAME","","",44,N],[18,"LOCALKEYSET","","",44,N],[18,"X509CERTIFICATE","","",44,N],[18,"SDSICERTIFICATE","","",44,N],[18,"X509CRL","","",44,N],[18,"PBE_WITHSHA1AND128BITRC4","","",44,N],[18,"PBE_WITHSHA1AND40BITRC4","","",44,N],[18,"PBE_WITHSHA1AND3_KEY_TRIPLEDES_CBC","","",44,N],[18,"PBE_WITHSHA1AND2_KEY_TRIPLEDES_CBC","","",44,N],[18,"PBE_WITHSHA1AND128BITRC2_CBC","","",44,N],[18,"PBE_WITHSHA1AND40BITRC2_CBC","","",44,N],[18,"KEYBAG","","",44,N],[18,"PKCS8SHROUDEDKEYBAG","","",44,N],[18,"CERTBAG","","",44,N],[18,"CRLBAG","","",44,N],[18,"SECRETBAG","","",44,N],[18,"SAFECONTENTSBAG","","",44,N],[18,"MD2","","",44,N],[18,"MD4","","",44,N],[18,"MD5","","",44,N],[18,"MD5_SHA1","","",44,N],[18,"HMACWITHMD5","","",44,N],[18,"HMACWITHSHA1","","",44,N],[18,"HMACWITHSHA224","","",44,N],[18,"HMACWITHSHA256","","",44,N],[18,"HMACWITHSHA384","","",44,N],[18,"HMACWITHSHA512","","",44,N],[18,"RC2_CBC","","",44,N],[18,"RC2_ECB","","",44,N],[18,"RC2_CFB64","","",44,N],[18,"RC2_OFB64","","",44,N],[18,"RC2_40_CBC","","",44,N],[18,"RC2_64_CBC","","",44,N],[18,"RC4","","",44,N],[18,"RC4_40","","",44,N],[18,"DES_EDE3_CBC","","",44,N],[18,"RC5_CBC","","",44,N],[18,"RC5_ECB","","",44,N],[18,"RC5_CFB64","","",44,N],[18,"RC5_OFB64","","",44,N],[18,"MS_EXT_REQ","","",44,N],[18,"MS_CODE_IND","","",44,N],[18,"MS_CODE_COM","","",44,N],[18,"MS_CTL_SIGN","","",44,N],[18,"MS_SGC","","",44,N],[18,"MS_EFS","","",44,N],[18,"MS_SMARTCARD_LOGIN","","",44,N],[18,"MS_UPN","","",44,N],[18,"IDEA_CBC","","",44,N],[18,"IDEA_ECB","","",44,N],[18,"IDEA_CFB64","","",44,N],[18,"IDEA_OFB64","","",44,N],[18,"BF_CBC","","",44,N],[18,"BF_ECB","","",44,N],[18,"BF_CFB64","","",44,N],[18,"BF_OFB64","","",44,N],[18,"ID_PKIX","","",44,N],[18,"ID_PKIX_MOD","","",44,N],[18,"ID_PE","","",44,N],[18,"ID_QT","","",44,N],[18,"ID_KP","","",44,N],[18,"ID_IT","","",44,N],[18,"ID_PKIP","","",44,N],[18,"ID_ALG","","",44,N],[18,"ID_CMC","","",44,N],[18,"ID_ON","","",44,N],[18,"ID_PDA","","",44,N],[18,"ID_ACA","","",44,N],[18,"ID_QCS","","",44,N],[18,"ID_CCT","","",44,N],[18,"ID_PPL","","",44,N],[18,"ID_AD","","",44,N],[18,"ID_PKIX1_EXPLICIT_88","","",44,N],[18,"ID_PKIX1_IMPLICIT_88","","",44,N],[18,"ID_PKIX1_EXPLICIT_93","","",44,N],[18,"ID_PKIX1_IMPLICIT_93","","",44,N],[18,"ID_MOD_CRMF","","",44,N],[18,"ID_MOD_CMC","","",44,N],[18,"ID_MOD_KEA_PROFILE_88","","",44,N],[18,"ID_MOD_KEA_PROFILE_93","","",44,N],[18,"ID_MOD_CMP","","",44,N],[18,"ID_MOD_QUALIFIED_CERT_88","","",44,N],[18,"ID_MOD_QUALIFIED_CERT_93","","",44,N],[18,"ID_MOD_ATTRIBUTE_CERT","","",44,N],[18,"ID_MOD_TIMESTAMP_PROTOCOL","","",44,N],[18,"ID_MOD_OCSP","","",44,N],[18,"ID_MOD_DVCS","","",44,N],[18,"ID_MOD_CMP2000","","",44,N],[18,"INFO_ACCESS","","",44,N],[18,"BIOMETRICINFO","","",44,N],[18,"QCSTATEMENTS","","",44,N],[18,"AC_AUDITENTITY","","",44,N],[18,"AC_TARGETING","","",44,N],[18,"AACONTROLS","","",44,N],[18,"SBGP_IPADDRBLOCK","","",44,N],[18,"SBGP_AUTONOMOUSSYSNUM","","",44,N],[18,"SBGP_ROUTERIDENTIFIER","","",44,N],[18,"AC_PROXYING","","",44,N],[18,"SINFO_ACCESS","","",44,N],[18,"PROXYCERTINFO","","",44,N],[18,"ID_QT_CPS","","",44,N],[18,"ID_QT_UNOTICE","","",44,N],[18,"TEXTNOTICE","","",44,N],[18,"SERVER_AUTH","","",44,N],[18,"CLIENT_AUTH","","",44,N],[18,"CODE_SIGN","","",44,N],[18,"EMAIL_PROTECT","","",44,N],[18,"IPSECENDSYSTEM","","",44,N],[18,"IPSECTUNNEL","","",44,N],[18,"IPSECUSER","","",44,N],[18,"TIME_STAMP","","",44,N],[18,"OCSP_SIGN","","",44,N],[18,"DVCS","","",44,N],[18,"ID_IT_CAPROTENCCERT","","",44,N],[18,"ID_IT_SIGNKEYPAIRTYPES","","",44,N],[18,"ID_IT_ENCKEYPAIRTYPES","","",44,N],[18,"ID_IT_PREFERREDSYMMALG","","",44,N],[18,"ID_IT_CAKEYUPDATEINFO","","",44,N],[18,"ID_IT_CURRENTCRL","","",44,N],[18,"ID_IT_UNSUPPORTEDOIDS","","",44,N],[18,"ID_IT_SUBSCRIPTIONREQUEST","","",44,N],[18,"ID_IT_SUBSCRIPTIONRESPONSE","","",44,N],[18,"ID_IT_KEYPAIRPARAMREQ","","",44,N],[18,"ID_IT_KEYPAIRPARAMREP","","",44,N],[18,"ID_IT_REVPASSPHRASE","","",44,N],[18,"ID_IT_IMPLICITCONFIRM","","",44,N],[18,"ID_IT_CONFIRMWAITTIME","","",44,N],[18,"ID_IT_ORIGPKIMESSAGE","","",44,N],[18,"ID_IT_SUPPLANGTAGS","","",44,N],[18,"ID_REGCTRL","","",44,N],[18,"ID_REGINFO","","",44,N],[18,"ID_REGCTRL_REGTOKEN","","",44,N],[18,"ID_REGCTRL_AUTHENTICATOR","","",44,N],[18,"ID_REGCTRL_PKIPUBLICATIONINFO","","",44,N],[18,"ID_REGCTRL_PKIARCHIVEOPTIONS","","",44,N],[18,"ID_REGCTRL_OLDCERTID","","",44,N],[18,"ID_REGCTRL_PROTOCOLENCRKEY","","",44,N],[18,"ID_REGINFO_UTF8PAIRS","","",44,N],[18,"ID_REGINFO_CERTREQ","","",44,N],[18,"ID_ALG_DES40","","",44,N],[18,"ID_ALG_NOSIGNATURE","","",44,N],[18,"ID_ALG_DH_SIG_HMAC_SHA1","","",44,N],[18,"ID_ALG_DH_POP","","",44,N],[18,"ID_CMC_STATUSINFO","","",44,N],[18,"ID_CMC_IDENTIFICATION","","",44,N],[18,"ID_CMC_IDENTITYPROOF","","",44,N],[18,"ID_CMC_DATARETURN","","",44,N],[18,"ID_CMC_TRANSACTIONID","","",44,N],[18,"ID_CMC_SENDERNONCE","","",44,N],[18,"ID_CMC_RECIPIENTNONCE","","",44,N],[18,"ID_CMC_ADDEXTENSIONS","","",44,N],[18,"ID_CMC_ENCRYPTEDPOP","","",44,N],[18,"ID_CMC_DECRYPTEDPOP","","",44,N],[18,"ID_CMC_LRAPOPWITNESS","","",44,N],[18,"ID_CMC_GETCERT","","",44,N],[18,"ID_CMC_GETCRL","","",44,N],[18,"ID_CMC_REVOKEREQUEST","","",44,N],[18,"ID_CMC_REGINFO","","",44,N],[18,"ID_CMC_RESPONSEINFO","","",44,N],[18,"ID_CMC_QUERYPENDING","","",44,N],[18,"ID_CMC_POPLINKRANDOM","","",44,N],[18,"ID_CMC_POPLINKWITNESS","","",44,N],[18,"ID_CMC_CONFIRMCERTACCEPTANCE","","",44,N],[18,"ID_ON_PERSONALDATA","","",44,N],[18,"ID_ON_PERMANENTIDENTIFIER","","",44,N],[18,"ID_PDA_DATEOFBIRTH","","",44,N],[18,"ID_PDA_PLACEOFBIRTH","","",44,N],[18,"ID_PDA_GENDER","","",44,N],[18,"ID_PDA_COUNTRYOFCITIZENSHIP","","",44,N],[18,"ID_PDA_COUNTRYOFRESIDENCE","","",44,N],[18,"ID_ACA_AUTHENTICATIONINFO","","",44,N],[18,"ID_ACA_ACCESSIDENTITY","","",44,N],[18,"ID_ACA_CHARGINGIDENTITY","","",44,N],[18,"ID_ACA_GROUP","","",44,N],[18,"ID_ACA_ROLE","","",44,N],[18,"ID_ACA_ENCATTRS","","",44,N],[18,"ID_QCS_PKIXQCSYNTAX_V1","","",44,N],[18,"ID_CCT_CRS","","",44,N],[18,"ID_CCT_PKIDATA","","",44,N],[18,"ID_CCT_PKIRESPONSE","","",44,N],[18,"ID_PPL_ANYLANGUAGE","","",44,N],[18,"ID_PPL_INHERITALL","","",44,N],[18,"INDEPENDENT","","",44,N],[18,"AD_OCSP","","",44,N],[18,"AD_CA_ISSUERS","","",44,N],[18,"AD_TIMESTAMPING","","",44,N],[18,"AD_DVCS","","",44,N],[18,"CAREPOSITORY","","",44,N],[18,"ID_PKIX_OCSP_BASIC","","",44,N],[18,"ID_PKIX_OCSP_NONCE","","",44,N],[18,"ID_PKIX_OCSP_CRLID","","",44,N],[18,"ID_PKIX_OCSP_ACCEPTABLERESPONSES","","",44,N],[18,"ID_PKIX_OCSP_NOCHECK","","",44,N],[18,"ID_PKIX_OCSP_ARCHIVECUTOFF","","",44,N],[18,"ID_PKIX_OCSP_SERVICELOCATOR","","",44,N],[18,"ID_PKIX_OCSP_EXTENDEDSTATUS","","",44,N],[18,"ID_PKIX_OCSP_VALID","","",44,N],[18,"ID_PKIX_OCSP_PATH","","",44,N],[18,"ID_PKIX_OCSP_TRUSTROOT","","",44,N],[18,"ALGORITHM","","",44,N],[18,"MD5WITHRSA","","",44,N],[18,"DES_ECB","","",44,N],[18,"DES_CBC","","",44,N],[18,"DES_OFB64","","",44,N],[18,"DES_CFB64","","",44,N],[18,"RSASIGNATURE","","",44,N],[18,"DSA_2","","",44,N],[18,"DSAWITHSHA","","",44,N],[18,"SHAWITHRSAENCRYPTION","","",44,N],[18,"DES_EDE_ECB","","",44,N],[18,"DES_EDE3_ECB","","",44,N],[18,"DES_EDE_CBC","","",44,N],[18,"DES_EDE_CFB64","","",44,N],[18,"DES_EDE3_CFB64","","",44,N],[18,"DES_EDE_OFB64","","",44,N],[18,"DES_EDE3_OFB64","","",44,N],[18,"DESX_CBC","","",44,N],[18,"SHA","","",44,N],[18,"SHA1","","",44,N],[18,"DSAWITHSHA1_2","","",44,N],[18,"SHA1WITHRSA","","",44,N],[18,"RIPEMD160","","",44,N],[18,"RIPEMD160WITHRSA","","",44,N],[18,"SXNET","","",44,N],[18,"X500","","",44,N],[18,"X509","","",44,N],[18,"COMMONNAME","","",44,N],[18,"SURNAME","","",44,N],[18,"SERIALNUMBER","","",44,N],[18,"COUNTRYNAME","","",44,N],[18,"LOCALITYNAME","","",44,N],[18,"STATEORPROVINCENAME","","",44,N],[18,"STREETADDRESS","","",44,N],[18,"ORGANIZATIONNAME","","",44,N],[18,"ORGANIZATIONALUNITNAME","","",44,N],[18,"TITLE","","",44,N],[18,"DESCRIPTION","","",44,N],[18,"SEARCHGUIDE","","",44,N],[18,"BUSINESSCATEGORY","","",44,N],[18,"POSTALADDRESS","","",44,N],[18,"POSTALCODE","","",44,N],[18,"POSTOFFICEBOX","","",44,N],[18,"PHYSICALDELIVERYOFFICENAME","","",44,N],[18,"TELEPHONENUMBER","","",44,N],[18,"TELEXNUMBER","","",44,N],[18,"TELETEXTERMINALIDENTIFIER","","",44,N],[18,"FACSIMILETELEPHONENUMBER","","",44,N],[18,"X121ADDRESS","","",44,N],[18,"INTERNATIONALISDNNUMBER","","",44,N],[18,"REGISTEREDADDRESS","","",44,N],[18,"DESTINATIONINDICATOR","","",44,N],[18,"PREFERREDDELIVERYMETHOD","","",44,N],[18,"PRESENTATIONADDRESS","","",44,N],[18,"SUPPORTEDAPPLICATIONCONTEXT","","",44,N],[18,"MEMBER","","",44,N],[18,"OWNER","","",44,N],[18,"ROLEOCCUPANT","","",44,N],[18,"SEEALSO","","",44,N],[18,"USERPASSWORD","","",44,N],[18,"USERCERTIFICATE","","",44,N],[18,"CACERTIFICATE","","",44,N],[18,"AUTHORITYREVOCATIONLIST","","",44,N],[18,"CERTIFICATEREVOCATIONLIST","","",44,N],[18,"CROSSCERTIFICATEPAIR","","",44,N],[18,"NAME","","",44,N],[18,"GIVENNAME","","",44,N],[18,"INITIALS","","",44,N],[18,"GENERATIONQUALIFIER","","",44,N],[18,"X500UNIQUEIDENTIFIER","","",44,N],[18,"DNQUALIFIER","","",44,N],[18,"ENHANCEDSEARCHGUIDE","","",44,N],[18,"PROTOCOLINFORMATION","","",44,N],[18,"DISTINGUISHEDNAME","","",44,N],[18,"UNIQUEMEMBER","","",44,N],[18,"HOUSEIDENTIFIER","","",44,N],[18,"SUPPORTEDALGORITHMS","","",44,N],[18,"DELTAREVOCATIONLIST","","",44,N],[18,"DMDNAME","","",44,N],[18,"PSEUDONYM","","",44,N],[18,"ROLE","","",44,N],[18,"X500ALGORITHMS","","",44,N],[18,"RSA","","",44,N],[18,"MDC2WITHRSA","","",44,N],[18,"MDC2","","",44,N],[18,"ID_CE","","",44,N],[18,"SUBJECT_DIRECTORY_ATTRIBUTES","","",44,N],[18,"SUBJECT_KEY_IDENTIFIER","","",44,N],[18,"KEY_USAGE","","",44,N],[18,"PRIVATE_KEY_USAGE_PERIOD","","",44,N],[18,"SUBJECT_ALT_NAME","","",44,N],[18,"ISSUER_ALT_NAME","","",44,N],[18,"BASIC_CONSTRAINTS","","",44,N],[18,"CRL_NUMBER","","",44,N],[18,"CRL_REASON","","",44,N],[18,"INVALIDITY_DATE","","",44,N],[18,"DELTA_CRL","","",44,N],[18,"ISSUING_DISTRIBUTION_POINT","","",44,N],[18,"CERTIFICATE_ISSUER","","",44,N],[18,"NAME_CONSTRAINTS","","",44,N],[18,"CRL_DISTRIBUTION_POINTS","","",44,N],[18,"CERTIFICATE_POLICIES","","",44,N],[18,"ANY_POLICY","","",44,N],[18,"POLICY_MAPPINGS","","",44,N],[18,"AUTHORITY_KEY_IDENTIFIER","","",44,N],[18,"POLICY_CONSTRAINTS","","",44,N],[18,"EXT_KEY_USAGE","","",44,N],[18,"FRESHEST_CRL","","",44,N],[18,"INHIBIT_ANY_POLICY","","",44,N],[18,"TARGET_INFORMATION","","",44,N],[18,"NO_REV_AVAIL","","",44,N],[18,"ANYEXTENDEDKEYUSAGE","","",44,N],[18,"NETSCAPE","","",44,N],[18,"NETSCAPE_CERT_EXTENSION","","",44,N],[18,"NETSCAPE_DATA_TYPE","","",44,N],[18,"NETSCAPE_CERT_TYPE","","",44,N],[18,"NETSCAPE_BASE_URL","","",44,N],[18,"NETSCAPE_REVOCATION_URL","","",44,N],[18,"NETSCAPE_CA_REVOCATION_URL","","",44,N],[18,"NETSCAPE_RENEWAL_URL","","",44,N],[18,"NETSCAPE_CA_POLICY_URL","","",44,N],[18,"NETSCAPE_SSL_SERVER_NAME","","",44,N],[18,"NETSCAPE_COMMENT","","",44,N],[18,"NETSCAPE_CERT_SEQUENCE","","",44,N],[18,"NS_SGC","","",44,N],[18,"ORG","","",44,N],[18,"DOD","","",44,N],[18,"IANA","","",44,N],[18,"DIRECTORY","","",44,N],[18,"MANAGEMENT","","",44,N],[18,"EXPERIMENTAL","","",44,N],[18,"PRIVATE","","",44,N],[18,"SECURITY","","",44,N],[18,"SNMPV2","","",44,N],[18,"MAIL","","",44,N],[18,"ENTERPRISES","","",44,N],[18,"DCOBJECT","","",44,N],[18,"MIME_MHS","","",44,N],[18,"MIME_MHS_HEADINGS","","",44,N],[18,"MIME_MHS_BODIES","","",44,N],[18,"ID_HEX_PARTIAL_MESSAGE","","",44,N],[18,"ID_HEX_MULTIPART_MESSAGE","","",44,N],[18,"ZLIB_COMPRESSION","","",44,N],[18,"AES_128_ECB","","",44,N],[18,"AES_128_CBC","","",44,N],[18,"AES_128_OFB128","","",44,N],[18,"AES_128_CFB128","","",44,N],[18,"ID_AES128_WRAP","","",44,N],[18,"AES_128_GCM","","",44,N],[18,"AES_128_CCM","","",44,N],[18,"ID_AES128_WRAP_PAD","","",44,N],[18,"AES_192_ECB","","",44,N],[18,"AES_192_CBC","","",44,N],[18,"AES_192_OFB128","","",44,N],[18,"AES_192_CFB128","","",44,N],[18,"ID_AES192_WRAP","","",44,N],[18,"AES_192_GCM","","",44,N],[18,"AES_192_CCM","","",44,N],[18,"ID_AES192_WRAP_PAD","","",44,N],[18,"AES_256_ECB","","",44,N],[18,"AES_256_CBC","","",44,N],[18,"AES_256_OFB128","","",44,N],[18,"AES_256_CFB128","","",44,N],[18,"ID_AES256_WRAP","","",44,N],[18,"AES_256_GCM","","",44,N],[18,"AES_256_CCM","","",44,N],[18,"ID_AES256_WRAP_PAD","","",44,N],[18,"AES_128_CFB1","","",44,N],[18,"AES_192_CFB1","","",44,N],[18,"AES_256_CFB1","","",44,N],[18,"AES_128_CFB8","","",44,N],[18,"AES_192_CFB8","","",44,N],[18,"AES_256_CFB8","","",44,N],[18,"AES_128_CTR","","",44,N],[18,"AES_192_CTR","","",44,N],[18,"AES_256_CTR","","",44,N],[18,"AES_128_XTS","","",44,N],[18,"AES_256_XTS","","",44,N],[18,"DES_CFB1","","",44,N],[18,"DES_CFB8","","",44,N],[18,"DES_EDE3_CFB1","","",44,N],[18,"DES_EDE3_CFB8","","",44,N],[18,"SHA256","","",44,N],[18,"SHA384","","",44,N],[18,"SHA512","","",44,N],[18,"SHA224","","",44,N],[18,"DSA_WITH_SHA224","","",44,N],[18,"DSA_WITH_SHA256","","",44,N],[18,"HOLD_INSTRUCTION_CODE","","",44,N],[18,"HOLD_INSTRUCTION_NONE","","",44,N],[18,"HOLD_INSTRUCTION_CALL_ISSUER","","",44,N],[18,"HOLD_INSTRUCTION_REJECT","","",44,N],[18,"DATA","","",44,N],[18,"PSS","","",44,N],[18,"UCL","","",44,N],[18,"PILOT","","",44,N],[18,"PILOTATTRIBUTETYPE","","",44,N],[18,"PILOTATTRIBUTESYNTAX","","",44,N],[18,"PILOTOBJECTCLASS","","",44,N],[18,"PILOTGROUPS","","",44,N],[18,"IA5STRINGSYNTAX","","",44,N],[18,"CASEIGNOREIA5STRINGSYNTAX","","",44,N],[18,"PILOTOBJECT","","",44,N],[18,"PILOTPERSON","","",44,N],[18,"ACCOUNT","","",44,N],[18,"DOCUMENT","","",44,N],[18,"ROOM","","",44,N],[18,"DOCUMENTSERIES","","",44,N],[18,"DOMAIN","","",44,N],[18,"RFC822LOCALPART","","",44,N],[18,"DNSDOMAIN","","",44,N],[18,"DOMAINRELATEDOBJECT","","",44,N],[18,"FRIENDLYCOUNTRY","","",44,N],[18,"SIMPLESECURITYOBJECT","","",44,N],[18,"PILOTORGANIZATION","","",44,N],[18,"PILOTDSA","","",44,N],[18,"QUALITYLABELLEDDATA","","",44,N],[18,"USERID","","",44,N],[18,"TEXTENCODEDORADDRESS","","",44,N],[18,"RFC822MAILBOX","","",44,N],[18,"INFO","","",44,N],[18,"FAVOURITEDRINK","","",44,N],[18,"ROOMNUMBER","","",44,N],[18,"PHOTO","","",44,N],[18,"USERCLASS","","",44,N],[18,"HOST","","",44,N],[18,"MANAGER","","",44,N],[18,"DOCUMENTIDENTIFIER","","",44,N],[18,"DOCUMENTTITLE","","",44,N],[18,"DOCUMENTVERSION","","",44,N],[18,"DOCUMENTAUTHOR","","",44,N],[18,"DOCUMENTLOCATION","","",44,N],[18,"HOMETELEPHONENUMBER","","",44,N],[18,"SECRETARY","","",44,N],[18,"OTHERMAILBOX","","",44,N],[18,"LASTMODIFIEDTIME","","",44,N],[18,"LASTMODIFIEDBY","","",44,N],[18,"DOMAINCOMPONENT","","",44,N],[18,"ARECORD","","",44,N],[18,"PILOTATTRIBUTETYPE27","","",44,N],[18,"MXRECORD","","",44,N],[18,"NSRECORD","","",44,N],[18,"SOARECORD","","",44,N],[18,"CNAMERECORD","","",44,N],[18,"ASSOCIATEDDOMAIN","","",44,N],[18,"ASSOCIATEDNAME","","",44,N],[18,"HOMEPOSTALADDRESS","","",44,N],[18,"PERSONALTITLE","","",44,N],[18,"MOBILETELEPHONENUMBER","","",44,N],[18,"PAGERTELEPHONENUMBER","","",44,N],[18,"FRIENDLYCOUNTRYNAME","","",44,N],[18,"ORGANIZATIONALSTATUS","","",44,N],[18,"JANETMAILBOX","","",44,N],[18,"MAILPREFERENCEOPTION","","",44,N],[18,"BUILDINGNAME","","",44,N],[18,"DSAQUALITY","","",44,N],[18,"SINGLELEVELQUALITY","","",44,N],[18,"SUBTREEMINIMUMQUALITY","","",44,N],[18,"SUBTREEMAXIMUMQUALITY","","",44,N],[18,"PERSONALSIGNATURE","","",44,N],[18,"DITREDIRECT","","",44,N],[18,"AUDIO","","",44,N],[18,"DOCUMENTPUBLISHER","","",44,N],[18,"ID_SET","","",44,N],[18,"SET_CTYPE","","",44,N],[18,"SET_MSGEXT","","",44,N],[18,"SET_ATTR","","",44,N],[18,"SET_POLICY","","",44,N],[18,"SET_CERTEXT","","",44,N],[18,"SET_BRAND","","",44,N],[18,"SETCT_PANDATA","","",44,N],[18,"SETCT_PANTOKEN","","",44,N],[18,"SETCT_PANONLY","","",44,N],[18,"SETCT_OIDATA","","",44,N],[18,"SETCT_PI","","",44,N],[18,"SETCT_PIDATA","","",44,N],[18,"SETCT_PIDATAUNSIGNED","","",44,N],[18,"SETCT_HODINPUT","","",44,N],[18,"SETCT_AUTHRESBAGGAGE","","",44,N],[18,"SETCT_AUTHREVREQBAGGAGE","","",44,N],[18,"SETCT_AUTHREVRESBAGGAGE","","",44,N],[18,"SETCT_CAPTOKENSEQ","","",44,N],[18,"SETCT_PINITRESDATA","","",44,N],[18,"SETCT_PI_TBS","","",44,N],[18,"SETCT_PRESDATA","","",44,N],[18,"SETCT_AUTHREQTBS","","",44,N],[18,"SETCT_AUTHRESTBS","","",44,N],[18,"SETCT_AUTHRESTBSX","","",44,N],[18,"SETCT_AUTHTOKENTBS","","",44,N],[18,"SETCT_CAPTOKENDATA","","",44,N],[18,"SETCT_CAPTOKENTBS","","",44,N],[18,"SETCT_ACQCARDCODEMSG","","",44,N],[18,"SETCT_AUTHREVREQTBS","","",44,N],[18,"SETCT_AUTHREVRESDATA","","",44,N],[18,"SETCT_AUTHREVRESTBS","","",44,N],[18,"SETCT_CAPREQTBS","","",44,N],[18,"SETCT_CAPREQTBSX","","",44,N],[18,"SETCT_CAPRESDATA","","",44,N],[18,"SETCT_CAPREVREQTBS","","",44,N],[18,"SETCT_CAPREVREQTBSX","","",44,N],[18,"SETCT_CAPREVRESDATA","","",44,N],[18,"SETCT_CREDREQTBS","","",44,N],[18,"SETCT_CREDREQTBSX","","",44,N],[18,"SETCT_CREDRESDATA","","",44,N],[18,"SETCT_CREDREVREQTBS","","",44,N],[18,"SETCT_CREDREVREQTBSX","","",44,N],[18,"SETCT_CREDREVRESDATA","","",44,N],[18,"SETCT_PCERTREQDATA","","",44,N],[18,"SETCT_PCERTRESTBS","","",44,N],[18,"SETCT_BATCHADMINREQDATA","","",44,N],[18,"SETCT_BATCHADMINRESDATA","","",44,N],[18,"SETCT_CARDCINITRESTBS","","",44,N],[18,"SETCT_MEAQCINITRESTBS","","",44,N],[18,"SETCT_REGFORMRESTBS","","",44,N],[18,"SETCT_CERTREQDATA","","",44,N],[18,"SETCT_CERTREQTBS","","",44,N],[18,"SETCT_CERTRESDATA","","",44,N],[18,"SETCT_CERTINQREQTBS","","",44,N],[18,"SETCT_ERRORTBS","","",44,N],[18,"SETCT_PIDUALSIGNEDTBE","","",44,N],[18,"SETCT_PIUNSIGNEDTBE","","",44,N],[18,"SETCT_AUTHREQTBE","","",44,N],[18,"SETCT_AUTHRESTBE","","",44,N],[18,"SETCT_AUTHRESTBEX","","",44,N],[18,"SETCT_AUTHTOKENTBE","","",44,N],[18,"SETCT_CAPTOKENTBE","","",44,N],[18,"SETCT_CAPTOKENTBEX","","",44,N],[18,"SETCT_ACQCARDCODEMSGTBE","","",44,N],[18,"SETCT_AUTHREVREQTBE","","",44,N],[18,"SETCT_AUTHREVRESTBE","","",44,N],[18,"SETCT_AUTHREVRESTBEB","","",44,N],[18,"SETCT_CAPREQTBE","","",44,N],[18,"SETCT_CAPREQTBEX","","",44,N],[18,"SETCT_CAPRESTBE","","",44,N],[18,"SETCT_CAPREVREQTBE","","",44,N],[18,"SETCT_CAPREVREQTBEX","","",44,N],[18,"SETCT_CAPREVRESTBE","","",44,N],[18,"SETCT_CREDREQTBE","","",44,N],[18,"SETCT_CREDREQTBEX","","",44,N],[18,"SETCT_CREDRESTBE","","",44,N],[18,"SETCT_CREDREVREQTBE","","",44,N],[18,"SETCT_CREDREVREQTBEX","","",44,N],[18,"SETCT_CREDREVRESTBE","","",44,N],[18,"SETCT_BATCHADMINREQTBE","","",44,N],[18,"SETCT_BATCHADMINRESTBE","","",44,N],[18,"SETCT_REGFORMREQTBE","","",44,N],[18,"SETCT_CERTREQTBE","","",44,N],[18,"SETCT_CERTREQTBEX","","",44,N],[18,"SETCT_CERTRESTBE","","",44,N],[18,"SETCT_CRLNOTIFICATIONTBS","","",44,N],[18,"SETCT_CRLNOTIFICATIONRESTBS","","",44,N],[18,"SETCT_BCIDISTRIBUTIONTBS","","",44,N],[18,"SETEXT_GENCRYPT","","",44,N],[18,"SETEXT_MIAUTH","","",44,N],[18,"SETEXT_PINSECURE","","",44,N],[18,"SETEXT_PINANY","","",44,N],[18,"SETEXT_TRACK2","","",44,N],[18,"SETEXT_CV","","",44,N],[18,"SET_POLICY_ROOT","","",44,N],[18,"SETCEXT_HASHEDROOT","","",44,N],[18,"SETCEXT_CERTTYPE","","",44,N],[18,"SETCEXT_MERCHDATA","","",44,N],[18,"SETCEXT_CCERTREQUIRED","","",44,N],[18,"SETCEXT_TUNNELING","","",44,N],[18,"SETCEXT_SETEXT","","",44,N],[18,"SETCEXT_SETQUALF","","",44,N],[18,"SETCEXT_PGWYCAPABILITIES","","",44,N],[18,"SETCEXT_TOKENIDENTIFIER","","",44,N],[18,"SETCEXT_TRACK2DATA","","",44,N],[18,"SETCEXT_TOKENTYPE","","",44,N],[18,"SETCEXT_ISSUERCAPABILITIES","","",44,N],[18,"SETATTR_CERT","","",44,N],[18,"SETATTR_PGWYCAP","","",44,N],[18,"SETATTR_TOKENTYPE","","",44,N],[18,"SETATTR_ISSCAP","","",44,N],[18,"SET_ROOTKEYTHUMB","","",44,N],[18,"SET_ADDPOLICY","","",44,N],[18,"SETATTR_TOKEN_EMV","","",44,N],[18,"SETATTR_TOKEN_B0PRIME","","",44,N],[18,"SETATTR_ISSCAP_CVM","","",44,N],[18,"SETATTR_ISSCAP_T2","","",44,N],[18,"SETATTR_ISSCAP_SIG","","",44,N],[18,"SETATTR_GENCRYPTGRM","","",44,N],[18,"SETATTR_T2ENC","","",44,N],[18,"SETATTR_T2CLEARTXT","","",44,N],[18,"SETATTR_TOKICCSIG","","",44,N],[18,"SETATTR_SECDEVSIG","","",44,N],[18,"SET_BRAND_IATA_ATA","","",44,N],[18,"SET_BRAND_DINERS","","",44,N],[18,"SET_BRAND_AMERICANEXPRESS","","",44,N],[18,"SET_BRAND_JCB","","",44,N],[18,"SET_BRAND_VISA","","",44,N],[18,"SET_BRAND_MASTERCARD","","",44,N],[18,"SET_BRAND_NOVUS","","",44,N],[18,"DES_CDMF","","",44,N],[18,"RSAOAEPENCRYPTIONSET","","",44,N],[18,"IPSEC3","","",44,N],[18,"IPSEC4","","",44,N],[18,"WHIRLPOOL","","",44,N],[18,"CRYPTOPRO","","",44,N],[18,"CRYPTOCOM","","",44,N],[18,"ID_GOSTR3411_94_WITH_GOSTR3410_2001","","",44,N],[18,"ID_GOSTR3411_94_WITH_GOSTR3410_94","","",44,N],[18,"ID_GOSTR3411_94","","",44,N],[18,"ID_HMACGOSTR3411_94","","",44,N],[18,"ID_GOSTR3410_2001","","",44,N],[18,"ID_GOSTR3410_94","","",44,N],[18,"ID_GOST28147_89","","",44,N],[18,"GOST89_CNT","","",44,N],[18,"ID_GOST28147_89_MAC","","",44,N],[18,"ID_GOSTR3411_94_PRF","","",44,N],[18,"ID_GOSTR3410_2001DH","","",44,N],[18,"ID_GOSTR3410_94DH","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_KEYMESHING","","",44,N],[18,"ID_GOST28147_89_NONE_KEYMESHING","","",44,N],[18,"ID_GOSTR3411_94_TESTPARAMSET","","",44,N],[18,"ID_GOSTR3411_94_CRYPTOPROPARAMSET","","",44,N],[18,"ID_GOST28147_89_TESTPARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_A_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_B_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_C_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_D_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_1_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_0_PARAMSET","","",44,N],[18,"ID_GOST28147_89_CRYPTOPRO_RIC_1_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_TESTPARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_A_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_B_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_C_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_D_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_XCHA_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_XCHB_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_CRYPTOPRO_XCHC_PARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_TESTPARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_CRYPTOPRO_A_PARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_CRYPTOPRO_B_PARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_CRYPTOPRO_C_PARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_CRYPTOPRO_XCHA_PARAMSET","","",44,N],[18,"ID_GOSTR3410_2001_CRYPTOPRO_XCHB_PARAMSET","","",44,N],[18,"ID_GOSTR3410_94_A","","",44,N],[18,"ID_GOSTR3410_94_ABIS","","",44,N],[18,"ID_GOSTR3410_94_B","","",44,N],[18,"ID_GOSTR3410_94_BBIS","","",44,N],[18,"ID_GOST28147_89_CC","","",44,N],[18,"ID_GOSTR3410_94_CC","","",44,N],[18,"ID_GOSTR3410_2001_CC","","",44,N],[18,"ID_GOSTR3411_94_WITH_GOSTR3410_94_CC","","",44,N],[18,"ID_GOSTR3411_94_WITH_GOSTR3410_2001_CC","","",44,N],[18,"ID_GOSTR3410_2001_PARAMSET_CC","","",44,N],[18,"CAMELLIA_128_CBC","","",44,N],[18,"CAMELLIA_192_CBC","","",44,N],[18,"CAMELLIA_256_CBC","","",44,N],[18,"ID_CAMELLIA128_WRAP","","",44,N],[18,"ID_CAMELLIA192_WRAP","","",44,N],[18,"ID_CAMELLIA256_WRAP","","",44,N],[18,"CAMELLIA_128_ECB","","",44,N],[18,"CAMELLIA_128_OFB128","","",44,N],[18,"CAMELLIA_128_CFB128","","",44,N],[18,"CAMELLIA_192_ECB","","",44,N],[18,"CAMELLIA_192_OFB128","","",44,N],[18,"CAMELLIA_192_CFB128","","",44,N],[18,"CAMELLIA_256_ECB","","",44,N],[18,"CAMELLIA_256_OFB128","","",44,N],[18,"CAMELLIA_256_CFB128","","",44,N],[18,"CAMELLIA_128_CFB1","","",44,N],[18,"CAMELLIA_192_CFB1","","",44,N],[18,"CAMELLIA_256_CFB1","","",44,N],[18,"CAMELLIA_128_CFB8","","",44,N],[18,"CAMELLIA_192_CFB8","","",44,N],[18,"CAMELLIA_256_CFB8","","",44,N],[18,"KISA","","",44,N],[18,"SEED_ECB","","",44,N],[18,"SEED_CBC","","",44,N],[18,"SEED_CFB128","","",44,N],[18,"SEED_OFB128","","",44,N],[18,"HMAC","","",44,N],[18,"CMAC","","",44,N],[18,"RC4_HMAC_MD5","","",44,N],[18,"AES_128_CBC_HMAC_SHA1","","",44,N],[18,"AES_192_CBC_HMAC_SHA1","","",44,N],[18,"AES_256_CBC_HMAC_SHA1","","",44,N],[0,"ocsp","openssl","",N,N],[3,"OcspFlag","openssl::ocsp","",N,N],[3,"OcspResponseStatus","","",N,N],[3,"OcspCertStatus","","",N,N],[3,"OcspRevokedStatus","","",N,N],[3,"OcspStatus","","",N,N],[12,"status","","The overall status of the response.",45,N],[12,"reason","","If `status` is `CERT_STATUS_REVOKED`, the reason for the revocation.",45,N],[12,"revocation_time","","If `status` is `CERT_STATUS_REVOKED`, the time at which the certificate was revoked.",45,N],[12,"this_update","","The time that this revocation check was performed.",45,N],[12,"next_update","","The time at which this revocation check expires.",45,N],[3,"OcspBasicResponse","","",N,N],[3,"OcspBasicResponseRef","","",N,N],[3,"OcspCertId","","",N,N],[3,"OcspCertIdRef","","",N,N],[3,"OcspResponse","","",N,N],[3,"OcspResponseRef","","",N,N],[3,"OcspRequest","","",N,N],[3,"OcspRequestRef","","",N,N],[3,"OcspOneReq","","",N,N],[3,"OcspOneReqRef","","",N,N],[11,"eq","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"ne","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"clone","","",46,[[["self"]],["ocspflag"]]],[11,"partial_cmp","","",46,[[["self"],["ocspflag"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"le","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"gt","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"ge","","",46,[[["self"],["ocspflag"]],["bool"]]],[11,"cmp","","",46,[[["self"],["ocspflag"]],["ordering"]]],[11,"hash","","",46,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[18,"NO_CERTS","","",46,N],[18,"NO_INTERN","","",46,N],[18,"NO_CHAIN","","",46,N],[18,"NO_VERIFY","","",46,N],[18,"NO_EXPLICIT","","",46,N],[18,"NO_CA_SIGN","","",46,N],[18,"NO_DELEGATED","","",46,N],[18,"NO_CHECKS","","",46,N],[18,"TRUST_OTHER","","",46,N],[18,"RESPID_KEY","","",46,N],[18,"NO_TIME","","",46,N],[11,"empty","","Returns an empty set of flags.",46,[[],["ocspflag"]]],[11,"all","","Returns the set containing all flags.",46,[[],["ocspflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",46,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",46,[[["c_ulong"]],["option",["ocspflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",46,[[["c_ulong"]],["ocspflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",46,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",46,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",46,[[["self"],["ocspflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",46,[[["self"],["ocspflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",46,[[["self"],["ocspflag"]]]],[11,"remove","","Removes the specified flags in-place.",46,[[["self"],["ocspflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",46,[[["self"],["ocspflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",46,[[["self"],["ocspflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",46,[[["self"],["ocspflag"]],["ocspflag"]]],[11,"bitor_assign","","Adds the set of flags.",46,[[["self"],["ocspflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",46,[[["self"],["ocspflag"]],["ocspflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",46,[[["self"],["ocspflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",46,[[["self"],["ocspflag"]],["ocspflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",46,[[["self"],["ocspflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",46,[[["self"],["ocspflag"]],["ocspflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",46,[[["self"],["ocspflag"]]]],[11,"not","","Returns the complement of this set of flags.",46,[[["self"]],["ocspflag"]]],[11,"extend","","",46,[[["self"],["t"]]]],[11,"from_iter","","",46,[[["t"]],["ocspflag"]]],[11,"clone","","",47,[[["self"]],["ocspresponsestatus"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["ocspresponsestatus"]],["bool"]]],[11,"ne","","",47,[[["self"],["ocspresponsestatus"]],["bool"]]],[11,"from_raw","","",47,[[["c_int"]],["ocspresponsestatus"]]],[11,"as_raw","","",47,[[["self"]],["c_int"]]],[18,"SUCCESSFUL","","",47,N],[18,"MALFORMED_REQUEST","","",47,N],[18,"INTERNAL_ERROR","","",47,N],[18,"TRY_LATER","","",47,N],[18,"SIG_REQUIRED","","",47,N],[18,"UNAUTHORIZED","","",47,N],[11,"clone","","",48,[[["self"]],["ocspcertstatus"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["ocspcertstatus"]],["bool"]]],[11,"ne","","",48,[[["self"],["ocspcertstatus"]],["bool"]]],[11,"from_raw","","",48,[[["c_int"]],["ocspcertstatus"]]],[11,"as_raw","","",48,[[["self"]],["c_int"]]],[18,"GOOD","","",48,N],[18,"REVOKED","","",48,N],[18,"UNKNOWN","","",48,N],[11,"clone","","",49,[[["self"]],["ocsprevokedstatus"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["ocsprevokedstatus"]],["bool"]]],[11,"ne","","",49,[[["self"],["ocsprevokedstatus"]],["bool"]]],[11,"from_raw","","",49,[[["c_int"]],["ocsprevokedstatus"]]],[11,"as_raw","","",49,[[["self"]],["c_int"]]],[18,"NO_STATUS","","",49,N],[18,"UNSPECIFIED","","",49,N],[18,"KEY_COMPROMISE","","",49,N],[18,"CA_COMPROMISE","","",49,N],[18,"AFFILIATION_CHANGED","","",49,N],[18,"STATUS_SUPERSEDED","","",49,N],[18,"STATUS_CESSATION_OF_OPERATION","","",49,N],[18,"STATUS_CERTIFICATE_HOLD","","",49,N],[18,"REMOVE_FROM_CRL","","",49,N],[11,"check_validity","","Checks validity of the `this_update` and `next_update` fields.",45,[[["self"],["u32"],["option",["u32"]]],["result",["errorstack"]]]],[11,"from_ptr","","",50,N],[11,"as_ptr","","",50,N],[11,"drop","","",50,[[["self"]]]],[11,"deref","","",50,[[["self"]],["ocspbasicresponseref"]]],[11,"deref_mut","","",50,[[["self"]],["ocspbasicresponseref"]]],[11,"borrow","","",50,[[["self"]],["ocspbasicresponseref"]]],[11,"as_ref","","",50,[[["self"]],["ocspbasicresponseref"]]],[11,"verify","","Verifies the validity of the response.",51,[[["self"],["stackref"],["x509storeref"],["ocspflag"]],["result",["errorstack"]]]],[11,"find_status","","Looks up the status for the specified certificate ID.",51,[[["self"],["ocspcertidref"]],["option",["ocspstatus"]]]],[11,"from_ptr","","",52,N],[11,"as_ptr","","",52,N],[11,"drop","","",52,[[["self"]]]],[11,"deref","","",52,[[["self"]],["ocspcertidref"]]],[11,"deref_mut","","",52,[[["self"]],["ocspcertidref"]]],[11,"borrow","","",52,[[["self"]],["ocspcertidref"]]],[11,"as_ref","","",52,[[["self"]],["ocspcertidref"]]],[11,"from_cert","","Constructs a certificate ID for certificate `subject`.",52,[[["messagedigest"],["x509ref"],["x509ref"]],["result",["ocspcertid","errorstack"]]]],[11,"from_ptr","","",53,N],[11,"as_ptr","","",53,N],[11,"drop","","",53,[[["self"]]]],[11,"deref","","",53,[[["self"]],["ocspresponseref"]]],[11,"deref_mut","","",53,[[["self"]],["ocspresponseref"]]],[11,"borrow","","",53,[[["self"]],["ocspresponseref"]]],[11,"as_ref","","",53,[[["self"]],["ocspresponseref"]]],[11,"create","","Creates an OCSP response from the status and optional body.",53,[[["ocspresponsestatus"],["option",["ocspbasicresponseref"]]],["result",["ocspresponse","errorstack"]]]],[11,"from_der","","Deserializes a DER-encoded OCSP response.",53,N],[11,"to_der","","Serializes the response to its standard DER encoding.",54,[[["self"]],["result",["vec","errorstack"]]]],[11,"status","","Returns the status of the response.",54,[[["self"]],["ocspresponsestatus"]]],[11,"basic","","Returns the basic response.",54,[[["self"]],["result",["ocspbasicresponse","errorstack"]]]],[11,"from_ptr","","",55,N],[11,"as_ptr","","",55,N],[11,"drop","","",55,[[["self"]]]],[11,"deref","","",55,[[["self"]],["ocsprequestref"]]],[11,"deref_mut","","",55,[[["self"]],["ocsprequestref"]]],[11,"borrow","","",55,[[["self"]],["ocsprequestref"]]],[11,"as_ref","","",55,[[["self"]],["ocsprequestref"]]],[11,"new","","",55,[[],["result",["ocsprequest","errorstack"]]]],[11,"from_der","","Deserializes a DER-encoded OCSP request.",55,N],[11,"to_der","","Serializes the request to its standard DER encoding.",56,[[["self"]],["result",["vec","errorstack"]]]],[11,"add_id","","",56,[[["self"],["ocspcertid"]],["result",["ocsponereqref","errorstack"]]]],[11,"from_ptr","","",57,N],[11,"as_ptr","","",57,N],[11,"drop","","",57,[[["self"]]]],[11,"deref","","",57,[[["self"]],["ocsponereqref"]]],[11,"deref_mut","","",57,[[["self"]],["ocsponereqref"]]],[11,"borrow","","",57,[[["self"]],["ocsponereqref"]]],[11,"as_ref","","",57,[[["self"]],["ocsponereqref"]]],[0,"pkcs12","openssl","PKCS #12 archives.",N,N],[3,"Pkcs12","openssl::pkcs12","",N,N],[3,"Pkcs12Ref","","",N,N],[3,"ParsedPkcs12","","",N,N],[12,"pkey","","",58,N],[12,"cert","","",58,N],[12,"chain","","",58,N],[3,"Pkcs12Builder","","",N,N],[11,"from_ptr","","",59,N],[11,"as_ptr","","",59,N],[11,"drop","","",59,[[["self"]]]],[11,"deref","","",59,[[["self"]],["pkcs12ref"]]],[11,"deref_mut","","",59,[[["self"]],["pkcs12ref"]]],[11,"borrow","","",59,[[["self"]],["pkcs12ref"]]],[11,"as_ref","","",59,[[["self"]],["pkcs12ref"]]],[11,"to_der","","Serializes the `Pkcs12` to its standard DER encoding.",60,[[["self"]],["result",["vec","errorstack"]]]],[11,"parse","","Extracts the contents of the `Pkcs12`.",60,[[["self"],["str"]],["result",["parsedpkcs12","errorstack"]]]],[11,"from_der","","Deserializes a DER-encoded PKCS#12 archive.",59,N],[11,"builder","","Creates a new builder for a protected pkcs12 certificate.",59,[[],["pkcs12builder"]]],[11,"key_algorithm","","The encryption algorithm that should be used for the key",61,[[["self"],["nid"]],["self"]]],[11,"cert_algorithm","","The encryption algorithm that should be used for the cert",61,[[["self"],["nid"]],["self"]]],[11,"key_iter","","Key iteration count, default is 2048 as of this writing",61,[[["self"],["u32"]],["self"]]],[11,"mac_iter","","MAC iteration count, default is the same as key_iter.",61,[[["self"],["u32"]],["self"]]],[11,"ca","","An additional set of certificates to include in the archive beyond the one provided to `build`.",61,[[["self"],["stack",["x509"]]],["self"]]],[11,"build","","Builds the PKCS #12 object",61,[[["self"],["str"],["str"],["pkeyref"],["x509ref"]],["result",["pkcs12","errorstack"]]]],[0,"pkcs5","openssl","",N,N],[3,"KeyIvPair","openssl::pkcs5","",N,N],[12,"key","","",62,N],[12,"iv","","",62,N],[5,"bytes_to_key","","Derives a key and an IV from various parameters.",N,N],[5,"pbkdf2_hmac","","Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.",N,N],[11,"clone","","",62,[[["self"]],["keyivpair"]]],[11,"eq","","",62,[[["self"],["keyivpair"]],["bool"]]],[11,"ne","","",62,[[["self"],["keyivpair"]],["bool"]]],[11,"hash","","",62,N],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[0,"pkey","openssl","Public/private key processing.",N,N],[3,"Id","openssl::pkey","An identifier of a kind of key.",N,N],[3,"PKey","","A public or private key.",N,N],[3,"PKeyRef","","Reference to `PKey`.",N,N],[4,"Params","","A tag type indicating that a key only has parameters.",N,N],[4,"Public","","A tag type indicating that a key only has public components.",N,N],[4,"Private","","A tag type indicating that a key has private components.",N,N],[8,"HasParams","","A trait indicating that a key has parameters.",N,N],[8,"HasPublic","","A trait indicating that a key has public components.",N,N],[8,"HasPrivate","","A trait indicating that a key has private components.",N,N],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["id"]]],[11,"eq","","",63,[[["self"],["id"]],["bool"]]],[11,"ne","","",63,[[["self"],["id"]],["bool"]]],[11,"from_raw","","Creates a `Id` from an integer representation.",63,[[["c_int"]],["id"]]],[11,"as_raw","","Returns the integer representation of the `Id`.",63,[[["self"]],["c_int"]]],[18,"RSA","","",63,N],[18,"HMAC","","",63,N],[18,"DSA","","",63,N],[18,"DH","","",63,N],[18,"EC","","",63,N],[11,"from_ptr","","",64,N],[11,"as_ptr","","",64,N],[11,"drop","","",64,[[["self"]]]],[11,"deref","","",64,[[["self"]],["pkeyref"]]],[11,"deref_mut","","",64,[[["self"]],["pkeyref"]]],[11,"borrow","","",64,[[["self"]],["pkeyref"]]],[11,"as_ref","","",64,[[["self"]],["pkeyref"]]],[11,"rsa","","Returns a copy of the internal RSA key.",65,[[["self"]],["result",["rsa","errorstack"]]]],[11,"dsa","","Returns a copy of the internal DSA key.",65,[[["self"]],["result",["dsa","errorstack"]]]],[11,"dh","","Returns a copy of the internal DH key.",65,[[["self"]],["result",["dh","errorstack"]]]],[11,"ec_key","","Returns a copy of the internal elliptic curve key.",65,[[["self"]],["result",["eckey","errorstack"]]]],[11,"id","","Returns the `Id` that represents the type of this key.",65,[[["self"]],["id"]]],[11,"public_key_to_pem","","Serializes the public key into a PEM-encoded SubjectPublicKeyInfo structure.",65,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key into a DER-encoded SubjectPublicKeyInfo structure.",65,[[["self"]],["result",["vec","errorstack"]]]],[11,"bits","","Returns the size of the key.",65,[[["self"]],["u32"]]],[11,"public_eq","","Compares the public component of this key with another.",65,[[["self"],["pkeyref"]],["bool"]]],[11,"private_key_to_pem_pkcs8","","Serializes the private key to a PEM-encoded PKCS#8 PrivateKeyInfo structure.",65,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_pkcs8_passphrase","","Serializes the private key to a PEM-encoded PKCS#8 EncryptedPrivateKeyInfo structure.",65,N],[11,"private_key_to_der","","Serializes the private key to a DER-encoded key type specific format.",65,[[["self"]],["result",["vec","errorstack"]]]],[11,"from_rsa","","Creates a new `PKey` containing an RSA key.",64,[[["rsa"]],["result",["pkey","errorstack"]]]],[11,"from_dsa","","Creates a new `PKey` containing a DSA key.",64,[[["dsa"]],["result",["pkey","errorstack"]]]],[11,"from_dh","","Creates a new `PKey` containing a Diffie-Hellman key.",64,[[["dh"]],["result",["pkey","errorstack"]]]],[11,"from_ec_key","","Creates a new `PKey` containing an elliptic curve key.",64,[[["eckey"]],["result",["pkey","errorstack"]]]],[11,"hmac","","Creates a new `PKey` containing an HMAC key.",64,N],[11,"private_key_from_pem","","Deserializes a private key from a PEM-encoded key type specific format.",64,N],[11,"private_key_from_pem_passphrase","","Deserializes a private key from a PEM-encoded encrypted key type specific format.",64,N],[11,"private_key_from_pem_callback","","Deserializes a private key from a PEM-encoded encrypted key type specific format.",64,N],[11,"private_key_from_der","","Decodes a DER-encoded private key.",64,N],[11,"private_key_from_pkcs8_callback","","Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password if the key is encrpyted.",64,N],[11,"private_key_from_pkcs8_passphrase","","Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is encrypted.",64,N],[11,"public_key_from_pem","","Decodes a PEM-encoded SubjectPublicKeyInfo structure.",64,N],[11,"public_key_from_der","","Decodes a DER-encoded SubjectPublicKeyInfo structure.",64,N],[0,"rand","openssl","Utilities for secure random number generation.",N,N],[5,"rand_bytes","openssl::rand","Fill buffer with cryptographically strong pseudo-random bytes.",N,N],[0,"rsa","openssl","Rivest–Shamir–Adleman cryptosystem",N,N],[3,"Padding","openssl::rsa","Type of encryption padding to use.",N,N],[3,"Rsa","","An RSA key.",N,N],[3,"RsaRef","","Reference to `RSA`",N,N],[3,"RsaPrivateKeyBuilder","","",N,N],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["padding"]]],[11,"eq","","",66,[[["self"],["padding"]],["bool"]]],[11,"ne","","",66,[[["self"],["padding"]],["bool"]]],[11,"from_raw","","Creates a `Padding` from an integer representation.",66,[[["c_int"]],["padding"]]],[11,"as_raw","","Returns the integer representation of `Padding`.",66,[[["self"]],["c_int"]]],[18,"NONE","","",66,N],[18,"PKCS1","","",66,N],[18,"PKCS1_OAEP","","",66,N],[18,"PKCS1_PSS","","",66,N],[11,"from_ptr","","",67,N],[11,"as_ptr","","",67,N],[11,"drop","","",67,[[["self"]]]],[11,"deref","","",67,[[["self"]],["rsaref"]]],[11,"deref_mut","","",67,[[["self"]],["rsaref"]]],[11,"borrow","","",67,[[["self"]],["rsaref"]]],[11,"as_ref","","",67,[[["self"]],["rsaref"]]],[11,"clone","","",67,[[["self"]],["rsa"]]],[11,"to_owned","","",68,[[["self"]],["rsa"]]],[11,"private_key_to_pem","","Serializes the private key to a PEM-encoded PKCS#1 RSAPrivateKey structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to a PEM-encoded encrypted PKCS#1 RSAPrivateKey structure.",68,N],[11,"private_key_to_der","","Serializes the private key to a DER-encoded PKCS#1 RSAPrivateKey structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_decrypt","","Decrypts data using the private key, returning the number of decrypted bytes.",68,N],[11,"private_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",68,N],[11,"d","","Returns a reference to the private exponent of the key.",68,[[["self"]],["bignumref"]]],[11,"p","","Returns a reference to the first factor of the exponent of the key.",68,[[["self"]],["option",["bignumref"]]]],[11,"q","","Returns a reference to the second factor of the exponent of the key.",68,[[["self"]],["option",["bignumref"]]]],[11,"dmp1","","Returns a reference to the first exponent used for CRT calculations.",68,[[["self"]],["option",["bignumref"]]]],[11,"dmq1","","Returns a reference to the second exponent used for CRT calculations.",68,[[["self"]],["option",["bignumref"]]]],[11,"iqmp","","Returns a reference to the coefficient used for CRT calculations.",68,[[["self"]],["option",["bignumref"]]]],[11,"public_key_to_pem","","Serializes the public key into a PEM-encoded SubjectPublicKeyInfo structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key into a DER-encoded SubjectPublicKeyInfo structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_pem_pkcs1","","Serializes the public key into a PEM-encoded PKCS#1 RSAPublicKey structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der_pkcs1","","Serializes the public key into a DER-encoded PKCS#1 RSAPublicKey structure.",68,[[["self"]],["result",["vec","errorstack"]]]],[11,"size","","Returns the size of the modulus in bytes.",68,[[["self"]],["u32"]]],[11,"public_decrypt","","Decrypts data using the public key, returning the number of decrypted bytes.",68,N],[11,"public_encrypt","","Encrypts data using the public key, returning the number of encrypted bytes.",68,N],[11,"n","","Returns a reference to the modulus of the key.",68,[[["self"]],["bignumref"]]],[11,"e","","Returns a reference to the public exponent of the key.",68,[[["self"]],["bignumref"]]],[11,"from_public_components","","Creates a new RSA key with only public components.",67,[[["bignum"],["bignum"]],["result",["rsa","errorstack"]]]],[11,"public_key_from_pem","","Decodes a PEM-encoded SubjectPublicKeyInfo structure containing an RSA key.",67,N],[11,"public_key_from_pem_pkcs1","","Decodes a PEM-encoded PKCS#1 RSAPublicKey structure.",67,N],[11,"public_key_from_der","","Decodes a DER-encoded SubjectPublicKeyInfo structure containing an RSA key.",67,N],[11,"public_key_from_der_pkcs1","","Decodes a DER-encoded PKCS#1 RSAPublicKey structure.",67,N],[11,"new","","Creates a new `RsaPrivateKeyBuilder`.",69,[[["bignum"],["bignum"],["bignum"]],["result",["rsaprivatekeybuilder","errorstack"]]]],[11,"set_factors","","Sets the factors of the Rsa key.",69,[[["self"],["bignum"],["bignum"]],["result",["rsaprivatekeybuilder","errorstack"]]]],[11,"set_crt_params","","Sets the Chinese Remainder Theorem params of the Rsa key.",69,[[["self"],["bignum"],["bignum"],["bignum"]],["result",["rsaprivatekeybuilder","errorstack"]]]],[11,"build","","Returns the Rsa key.",69,[[["self"]],["rsa",["private"]]]],[11,"from_private_components","","Creates a new RSA key with private components (public components are assumed).",67,[[["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"]],["result",["rsa","errorstack"]]]],[11,"generate","","Generates a public/private key pair with the specified size.",67,[[["u32"]],["result",["rsa","errorstack"]]]],[11,"private_key_from_pem","","Deserializes a private key from a PEM-encoded PKCS#1 RSAPrivateKey structure.",67,N],[11,"private_key_from_pem_passphrase","","Deserializes a private key from a PEM-encoded encrypted PKCS#1 RSAPrivateKey structure.",67,N],[11,"private_key_from_pem_callback","","Deserializes a private key from a PEM-encoded encrypted PKCS#1 RSAPrivateKey structure.",67,N],[11,"private_key_from_der","","Decodes a DER-encoded PKCS#1 RSAPrivateKey structure.",67,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[0,"sha","openssl","The SHA family of hashes.",N,N],[3,"Sha1","openssl::sha","An object which calculates a SHA1 hash of some data.",N,N],[3,"Sha224","","An object which calculates a SHA224 hash of some data.",N,N],[3,"Sha256","","An object which calculates a SHA256 hash of some data.",N,N],[3,"Sha384","","An object which calculates a SHA384 hash of some data.",N,N],[3,"Sha512","","An object which calculates a SHA512 hash of some data.",N,N],[5,"sha1","","Computes the SHA1 hash of some data.",N,N],[5,"sha224","","Computes the SHA224 hash of some data.",N,N],[5,"sha256","","Computes the SHA256 hash of some data.",N,N],[5,"sha384","","Computes the SHA384 hash of some data.",N,N],[5,"sha512","","Computes the SHA512 hash of some data.",N,N],[11,"new","","Creates a new hasher.",70,[[],["sha1"]]],[11,"update","","Feeds some data into the hasher.",70,N],[11,"finish","","Returns the hash of the data.",70,N],[11,"new","","Creates a new hasher.",71,[[],["sha224"]]],[11,"update","","Feeds some data into the hasher.",71,N],[11,"finish","","Returns the hash of the data.",71,N],[11,"new","","Creates a new hasher.",72,[[],["sha256"]]],[11,"update","","Feeds some data into the hasher.",72,N],[11,"finish","","Returns the hash of the data.",72,N],[11,"new","","Creates a new hasher.",73,[[],["sha384"]]],[11,"update","","Feeds some data into the hasher.",73,N],[11,"finish","","Returns the hash of the data.",73,N],[11,"new","","Creates a new hasher.",74,[[],["sha512"]]],[11,"update","","Feeds some data into the hasher.",74,N],[11,"finish","","Returns the hash of the data.",74,N],[0,"sign","openssl","Message signatures.",N,N],[3,"RsaPssSaltlen","openssl::sign","Salt lengths that must be used with `set_rsa_pss_saltlen`.",N,N],[3,"Signer","","A type which computes cryptographic signatures of data.",N,N],[3,"Verifier","","",N,N],[11,"custom","","Sets the salt length to the given value.",75,[[["c_int"]],["rsapsssaltlen"]]],[18,"DIGEST_LENGTH","","The salt length is set to the digest length. Corresponds to the special value `-1`.",75,N],[18,"MAXIMUM_LENGTH","","The salt length is set to the maximum permissible value. Corresponds to the special value `-2`.",75,N],[11,"drop","","",76,[[["self"]]]],[11,"new","","Creates a new `Signer`.",76,[[["messagedigest"],["pkeyref"]],["result",["signer","errorstack"]]]],[11,"new_without_digest","","Creates a new `Signer` without a digest.",76,[[["pkeyref"]],["result",["signer","errorstack"]]]],[11,"new_intern","","",76,[[["option",["messagedigest"]],["pkeyref"]],["result",["signer","errorstack"]]]],[11,"rsa_padding","","Returns the RSA padding mode in use.",76,[[["self"]],["result",["padding","errorstack"]]]],[11,"set_rsa_padding","","Sets the RSA padding mode.",76,[[["self"],["padding"]],["result",["errorstack"]]]],[11,"set_rsa_pss_saltlen","","Sets the RSA PSS salt length.",76,[[["self"],["rsapsssaltlen"]],["result",["errorstack"]]]],[11,"set_rsa_mgf1_md","","Sets the RSA MGF1 algorithm.",76,[[["self"],["messagedigest"]],["result",["errorstack"]]]],[11,"update","","Feeds more data into the `Signer`.",76,N],[11,"len","","Computes an upper bound on the signature length.",76,[[["self"]],["result",["usize","errorstack"]]]],[11,"sign","","Writes the signature into the provided buffer, returning the number of bytes written.",76,N],[11,"sign_to_vec","","Returns the signature.",76,[[["self"]],["result",["vec","errorstack"]]]],[11,"write","","",76,N],[11,"flush","","",76,[[["self"]],["result"]]],[11,"drop","","",77,[[["self"]]]],[11,"new","","Creates a new `Verifier`.",77,[[["messagedigest"],["pkeyref"]],["result",["verifier","errorstack"]]]],[11,"rsa_padding","","Returns the RSA padding mode in use.",77,[[["self"]],["result",["padding","errorstack"]]]],[11,"set_rsa_padding","","Sets the RSA padding mode.",77,[[["self"],["padding"]],["result",["errorstack"]]]],[11,"set_rsa_pss_saltlen","","Sets the RSA PSS salt length.",77,[[["self"],["rsapsssaltlen"]],["result",["errorstack"]]]],[11,"set_rsa_mgf1_md","","Sets the RSA MGF1 algorithm.",77,[[["self"],["messagedigest"]],["result",["errorstack"]]]],[11,"update","","Feeds more data into the `Verifier`.",77,N],[11,"verify","","Determines if the data fed into the `Verifier` matches the provided signature.",77,N],[11,"write","","",77,N],[11,"flush","","",77,[[["self"]],["result"]]],[0,"srtp","openssl","",N,N],[3,"SrtpProtectionProfile","openssl::srtp","",N,N],[3,"SrtpProtectionProfileRef","","Reference to `SrtpProtectionProfile`.",N,N],[3,"SrtpProfileId","","An identifier of an SRTP protection profile.",N,N],[11,"from_ptr","","",78,N],[11,"as_ptr","","",78,N],[11,"drop","","",78,[[["self"]]]],[11,"deref","","",78,[[["self"]],["srtpprotectionprofileref"]]],[11,"deref_mut","","",78,[[["self"]],["srtpprotectionprofileref"]]],[11,"borrow","","",78,[[["self"]],["srtpprotectionprofileref"]]],[11,"as_ref","","",78,[[["self"]],["srtpprotectionprofileref"]]],[11,"id","","",79,[[["self"]],["srtpprofileid"]]],[11,"name","","",79,[[["self"]],["str"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",80,[[["self"]],["srtpprofileid"]]],[11,"eq","","",80,[[["self"],["srtpprofileid"]],["bool"]]],[11,"ne","","",80,[[["self"],["srtpprofileid"]],["bool"]]],[11,"from_raw","","Creates a `SrtpProfileId` from an integer representation.",80,[[["c_ulong"]],["srtpprofileid"]]],[11,"as_raw","","Returns the integer representation of `SrtpProfileId`.",80,[[["self"]],["c_ulong"]]],[18,"SRTP_AES128_CM_SHA1_80","","",80,N],[18,"SRTP_AES128_CM_SHA1_32","","",80,N],[18,"SRTP_AES128_F8_SHA1_80","","",80,N],[18,"SRTP_AES128_F8_SHA1_32","","",80,N],[18,"SRTP_NULL_SHA1_80","","",80,N],[18,"SRTP_NULL_SHA1_32","","",80,N],[0,"ssl","openssl","SSL/TLS support.",N,N],[3,"ConnectConfiguration","openssl::ssl","A type which allows for configuration of a client-side TLS session before connection.",N,N],[3,"SslAcceptor","","A type which wraps server-side streams in a TLS session.",N,N],[3,"SslAcceptorBuilder","","A builder for `SslAcceptor`s.",N,N],[3,"SslConnector","","A type which wraps client-side streams in a TLS session.",N,N],[3,"SslConnectorBuilder","","A builder for `SslConnector`s.",N,N],[3,"Error","","An SSL error.",N,N],[3,"ErrorCode","","An error code returned from SSL functions.",N,N],[3,"SslOptions","","Options controlling the behavior of an `SslContext`.",N,N],[3,"SslMode","","Options controlling the behavior of an `SslContext`.",N,N],[3,"SslMethod","","A type specifying the kind of protocol an `SslContext` will speak.",N,N],[3,"SslVerifyMode","","Options controling the behavior of certificate verification.",N,N],[3,"SslSessionCacheMode","","Options controlling the behavior of session caching.",N,N],[3,"SslFiletype","","An identifier of the format of a certificate or key file.",N,N],[3,"StatusType","","An identifier of a certificate status type.",N,N],[3,"NameType","","An identifier of a session name type.",N,N],[3,"SniError","","An error returned from the SNI callback.",N,N],[3,"SslAlert","","An SSL/TLS alert.",N,N],[3,"SslVersion","","An SSL/TLS protocol version.",N,N],[3,"SslContextBuilder","","A builder for `SslContext`s.",N,N],[3,"SslContext","","A context object for TLS streams.",N,N],[3,"SslContextRef","","Reference to [`SslContext`]",N,N],[3,"CipherBits","","Information about the state of a cipher.",N,N],[12,"secret","","The number of secret bits used for the cipher.",81,N],[12,"algorithm","","The number of bits processed by the chosen algorithm.",81,N],[3,"SslCipher","","Information about a cipher.",N,N],[3,"SslCipherRef","","Reference to an [`SslCipher`].",N,N],[3,"SslSession","","An encoded SSL session.",N,N],[3,"SslSessionRef","","Reference to [`SslSession`].",N,N],[3,"Ssl","","The state of an SSL/TLS session.",N,N],[3,"SslRef","","Reference to an [`Ssl`].",N,N],[3,"MidHandshakeSslStream","","An SSL stream midway through the handshake process.",N,N],[3,"SslStream","","A TLS session over a stream.",N,N],[3,"SslStreamBuilder","","A partially constructed `SslStream`, useful for unusual handshakes.",N,N],[3,"ShutdownState","","The shutdown state of a session.",N,N],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",N,N],[13,"SetupFailure","","Setup failed.",82,N],[13,"Failure","","The handshake failed.",82,N],[13,"WouldBlock","","The handshake encountered a `WouldBlock` error midway through.",82,N],[4,"ShutdownResult","","The result of a shutdown request.",N,N],[13,"Sent","","A close notify message has been sent to the peer.",83,N],[13,"Received","","A close notify response message has been received from the peer.",83,N],[5,"select_next_proto","","A standard implementation of protocol selection for Application Layer Protocol Negotiation (ALPN).",N,N],[5,"SSL_CTX_up_ref","","",N,N],[5,"SSL_SESSION_get_master_key","","",N,N],[5,"SSL_is_server","","",N,N],[5,"SSL_SESSION_up_ref","","",N,N],[5,"get_new_idx","","",N,[[["crypto_ex_free"]],["c_int"]]],[5,"get_new_ssl_idx","","",N,[[["crypto_ex_free"]],["c_int"]]],[11,"clone","","",84,[[["self"]],["sslconnector"]]],[11,"builder","","Creates a new builder for TLS connections.",84,[[["sslmethod"]],["result",["sslconnectorbuilder","errorstack"]]]],[11,"connect","","Initiates a client-side TLS session on a stream.",84,[[["self"],["str"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"configure","","Returns a structure allowing for configuration of a single TLS session before connection.",84,[[["self"]],["result",["connectconfiguration","errorstack"]]]],[11,"build","","Consumes the builder, returning an `SslConnector`.",85,[[["self"]],["sslconnector"]]],[11,"deref","","",85,[[["self"]],["sslcontextbuilder"]]],[11,"deref_mut","","",85,[[["self"]],["sslcontextbuilder"]]],[11,"use_server_name_indication","","A builder-style version of `set_use_server_name_indication`.",86,[[["self"],["bool"]],["connectconfiguration"]]],[11,"set_use_server_name_indication","","Configures the use of Server Name Indication (SNI) when connecting.",86,[[["self"],["bool"]]]],[11,"verify_hostname","","A builder-style version of `set_verify_hostname`.",86,[[["self"],["bool"]],["connectconfiguration"]]],[11,"set_verify_hostname","","Configures the use of hostname verification when connecting.",86,[[["self"],["bool"]]]],[11,"connect","","Initiates a client-side TLS session on a stream.",86,[[["self"],["str"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"deref","","",86,[[["self"]],["sslref"]]],[11,"deref_mut","","",86,[[["self"]],["sslref"]]],[11,"clone","","",87,[[["self"]],["sslacceptor"]]],[11,"mozilla_intermediate","","Creates a new builder configured to connect to non-legacy clients. This should generally be considered a reasonable default choice.",87,[[["sslmethod"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"mozilla_modern","","Creates a new builder configured to connect to modern clients.",87,[[["sslmethod"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"accept","","Initiates a server-side TLS session on a stream.",87,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"build","","Consumes the builder, returning a `SslAcceptor`.",88,[[["self"]],["sslacceptor"]]],[11,"deref","","",88,[[["self"]],["sslcontextbuilder"]]],[11,"deref_mut","","",88,[[["self"]],["sslcontextbuilder"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["errorcode"]]],[11,"eq","","",89,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",89,[[["self"],["errorcode"]],["bool"]]],[11,"from_raw","","",89,[[["c_int"]],["errorcode"]]],[11,"as_raw","","",89,[[["self"]],["c_int"]]],[18,"ZERO_RETURN","","The SSL session has been closed.",89,N],[18,"WANT_READ","","An attempt to read data from the underlying socket returned `WouldBlock`.",89,N],[18,"WANT_WRITE","","An attempt to write data to the underlying socket returned `WouldBlock`.",89,N],[18,"SYSCALL","","A non-recoverable IO error occurred.",89,N],[18,"SSL","","An error occurred in the SSL library.",89,N],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"code","","",90,[[["self"]],["errorcode"]]],[11,"io_error","","",90,[[["self"]],["option",["error"]]]],[11,"into_io_error","","",90,[[["self"]],["result",["error","error"]]]],[11,"ssl_error","","",90,[[["self"]],["option",["errorstack"]]]],[11,"from","","",90,[[["errorstack"]],["error"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"description","","",90,[[["self"]],["str"]]],[11,"cause","","",90,[[["self"]],["option",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"description","","",82,[[["self"]],["str"]]],[11,"cause","","",82,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"from","","",82,[[["errorstack"]],["handshakeerror"]]],[11,"eq","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"ne","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"clone","","",91,[[["self"]],["ssloptions"]]],[11,"partial_cmp","","",91,[[["self"],["ssloptions"]],["option",["ordering"]]]],[11,"lt","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"le","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"gt","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"ge","","",91,[[["self"],["ssloptions"]],["bool"]]],[11,"cmp","","",91,[[["self"],["ssloptions"]],["ordering"]]],[11,"hash","","",91,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[18,"DONT_INSERT_EMPTY_FRAGMENTS","","Disables a countermeasure against an SSLv3/TLSv1.0 vulnerability affecting CBC ciphers.",91,N],[18,"ALL","","A \"reasonable default\" set of options which enables compatibility flags.",91,N],[18,"NO_QUERY_MTU","","Do not query the MTU.",91,N],[18,"COOKIE_EXCHANGE","","Enables Cookie Exchange as described in [RFC 4347 Section 4.2.1].",91,N],[18,"NO_TICKET","","Disables the use of session tickets for session resumption.",91,N],[18,"NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","Always start a new session when performing a renegotiation on the server side.",91,N],[18,"NO_COMPRESSION","","Disables the use of TLS compression.",91,N],[18,"ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","Allow legacy insecure renegotiation with servers or clients that do not support secure renegotiation.",91,N],[18,"SINGLE_ECDH_USE","","Creates a new key for each session when using ECDHE.",91,N],[18,"SINGLE_DH_USE","","Creates a new key for each session when using DHE.",91,N],[18,"CIPHER_SERVER_PREFERENCE","","Use the server's preferences rather than the client's when selecting a cipher.",91,N],[18,"TLS_ROLLBACK_BUG","","Disables version rollback attach detection.",91,N],[18,"NO_SSLV2","","Disables the use of SSLv2.",91,N],[18,"NO_SSLV3","","Disables the use of SSLv3.",91,N],[18,"NO_TLSV1","","Disables the use of TLSv1.0.",91,N],[18,"NO_TLSV1_1","","Disables the use of TLSv1.1.",91,N],[18,"NO_TLSV1_2","","Disables the use of TLSv1.2.",91,N],[11,"empty","","Returns an empty set of flags.",91,[[],["ssloptions"]]],[11,"all","","Returns the set containing all flags.",91,[[],["ssloptions"]]],[11,"bits","","Returns the raw value of the flags currently stored.",91,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,[[["c_ulong"]],["option",["ssloptions"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,[[["c_ulong"]],["ssloptions"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",91,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,[[["self"],["ssloptions"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,[[["self"],["ssloptions"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",91,[[["self"],["ssloptions"]]]],[11,"remove","","Removes the specified flags in-place.",91,[[["self"],["ssloptions"]]]],[11,"toggle","","Toggles the specified flags in-place.",91,[[["self"],["ssloptions"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",91,[[["self"],["ssloptions"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",91,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"bitor_assign","","Adds the set of flags.",91,[[["self"],["ssloptions"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"bitxor_assign","","Toggles the set of flags.",91,[[["self"],["ssloptions"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",91,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",91,[[["self"],["ssloptions"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",91,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"sub_assign","","Disables all flags enabled in the set.",91,[[["self"],["ssloptions"]]]],[11,"not","","Returns the complement of this set of flags.",91,[[["self"]],["ssloptions"]]],[11,"extend","","",91,[[["self"],["t"]]]],[11,"from_iter","","",91,[[["t"]],["ssloptions"]]],[11,"eq","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"ne","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"clone","","",92,[[["self"]],["sslmode"]]],[11,"partial_cmp","","",92,[[["self"],["sslmode"]],["option",["ordering"]]]],[11,"lt","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"le","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"gt","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"ge","","",92,[[["self"],["sslmode"]],["bool"]]],[11,"cmp","","",92,[[["self"],["sslmode"]],["ordering"]]],[11,"hash","","",92,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[18,"ENABLE_PARTIAL_WRITE","","Enables \"short writes\".",92,N],[18,"ACCEPT_MOVING_WRITE_BUFFER","","Disables a check that the data buffer has not moved between calls when operating in a nonblocking context.",92,N],[18,"AUTO_RETRY","","Enables automatic retries after TLS session events such as renegotiations or heartbeats.",92,N],[18,"NO_AUTO_CHAIN","","Disables automatic chain building when verifying a peer's certificate.",92,N],[18,"RELEASE_BUFFERS","","Release memory buffers when the session does not need them.",92,N],[18,"SEND_FALLBACK_SCSV","","Sends the fake `TLS_FALLBACK_SCSV` cipher suite in the ClientHello message of a handshake.",92,N],[11,"empty","","Returns an empty set of flags.",92,[[],["sslmode"]]],[11,"all","","Returns the set containing all flags.",92,[[],["sslmode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",92,[[["self"]],["c_long"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,[[["c_long"]],["option",["sslmode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,[[["c_long"]],["sslmode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",92,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,[[["self"],["sslmode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,[[["self"],["sslmode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",92,[[["self"],["sslmode"]]]],[11,"remove","","Removes the specified flags in-place.",92,[[["self"],["sslmode"]]]],[11,"toggle","","Toggles the specified flags in-place.",92,[[["self"],["sslmode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",92,[[["self"],["sslmode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",92,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitor_assign","","Adds the set of flags.",92,[[["self"],["sslmode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitxor_assign","","Toggles the set of flags.",92,[[["self"],["sslmode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",92,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",92,[[["self"],["sslmode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",92,[[["self"],["sslmode"]],["sslmode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",92,[[["self"],["sslmode"]]]],[11,"not","","Returns the complement of this set of flags.",92,[[["self"]],["sslmode"]]],[11,"extend","","",92,[[["self"],["t"]]]],[11,"from_iter","","",92,[[["t"]],["sslmode"]]],[11,"clone","","",93,[[["self"]],["sslmethod"]]],[11,"tls","","Support all versions of the TLS protocol.",93,[[],["sslmethod"]]],[11,"dtls","","Support all versions of the DTLS protocol.",93,[[],["sslmethod"]]],[11,"from_ptr","","Constructs an `SslMethod` from a pointer to the underlying OpenSSL value.",93,N],[11,"as_ptr","","Returns a pointer to the underlying OpenSSL value.",93,N],[11,"eq","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"ne","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"clone","","",94,[[["self"]],["sslverifymode"]]],[11,"partial_cmp","","",94,[[["self"],["sslverifymode"]],["option",["ordering"]]]],[11,"lt","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"le","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"gt","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"ge","","",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"cmp","","",94,[[["self"],["sslverifymode"]],["ordering"]]],[11,"hash","","",94,N],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[18,"PEER","","Verifies that the peer's certificate is trusted.",94,N],[18,"NONE","","Disables verification of the peer's certificate.",94,N],[18,"FAIL_IF_NO_PEER_CERT","","On the server side, abort the handshake if the client did not send a certificate.",94,N],[11,"empty","","Returns an empty set of flags.",94,[[],["sslverifymode"]]],[11,"all","","Returns the set containing all flags.",94,[[],["sslverifymode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",94,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",94,[[["i32"]],["option",["sslverifymode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",94,[[["i32"]],["sslverifymode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",94,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,[[["self"],["sslverifymode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",94,[[["self"],["sslverifymode"]]]],[11,"remove","","Removes the specified flags in-place.",94,[[["self"],["sslverifymode"]]]],[11,"toggle","","Toggles the specified flags in-place.",94,[[["self"],["sslverifymode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",94,[[["self"],["sslverifymode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",94,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitor_assign","","Adds the set of flags.",94,[[["self"],["sslverifymode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitxor_assign","","Toggles the set of flags.",94,[[["self"],["sslverifymode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",94,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",94,[[["self"],["sslverifymode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",94,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",94,[[["self"],["sslverifymode"]]]],[11,"not","","Returns the complement of this set of flags.",94,[[["self"]],["sslverifymode"]]],[11,"extend","","",94,[[["self"],["t"]]]],[11,"from_iter","","",94,[[["t"]],["sslverifymode"]]],[11,"eq","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"ne","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"clone","","",95,[[["self"]],["sslsessioncachemode"]]],[11,"partial_cmp","","",95,[[["self"],["sslsessioncachemode"]],["option",["ordering"]]]],[11,"lt","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"le","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"gt","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"ge","","",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"cmp","","",95,[[["self"],["sslsessioncachemode"]],["ordering"]]],[11,"hash","","",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[18,"OFF","","No session caching for the client or server takes place.",95,N],[18,"CLIENT","","Enable session caching on the client side.",95,N],[18,"SERVER","","Enable session caching on the server side.",95,N],[18,"BOTH","","Enable session caching on both the client and server side.",95,N],[18,"NO_AUTO_CLEAR","","Disable automatic removal of expired sessions from the session cache.",95,N],[18,"NO_INTERNAL_LOOKUP","","Disable use of the internal session cache for session lookups.",95,N],[18,"NO_INTERNAL_STORE","","Disable use of the internal session cache for session storage.",95,N],[18,"NO_INTERNAL","","Disable use of the internal session cache for storage and lookup.",95,N],[11,"empty","","Returns an empty set of flags.",95,[[],["sslsessioncachemode"]]],[11,"all","","Returns the set containing all flags.",95,[[],["sslsessioncachemode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",95,[[["self"]],["c_long"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,[[["c_long"]],["option",["sslsessioncachemode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,[[["c_long"]],["sslsessioncachemode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",95,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,[[["self"],["sslsessioncachemode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",95,[[["self"],["sslsessioncachemode"]]]],[11,"remove","","Removes the specified flags in-place.",95,[[["self"],["sslsessioncachemode"]]]],[11,"toggle","","Toggles the specified flags in-place.",95,[[["self"],["sslsessioncachemode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",95,[[["self"],["sslsessioncachemode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",95,[[["self"],["sslsessioncachemode"]],["sslsessioncachemode"]]],[11,"bitor_assign","","Adds the set of flags.",95,[[["self"],["sslsessioncachemode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,[[["self"],["sslsessioncachemode"]],["sslsessioncachemode"]]],[11,"bitxor_assign","","Toggles the set of flags.",95,[[["self"],["sslsessioncachemode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",95,[[["self"],["sslsessioncachemode"]],["sslsessioncachemode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",95,[[["self"],["sslsessioncachemode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",95,[[["self"],["sslsessioncachemode"]],["sslsessioncachemode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",95,[[["self"],["sslsessioncachemode"]]]],[11,"not","","Returns the complement of this set of flags.",95,[[["self"]],["sslsessioncachemode"]]],[11,"extend","","",95,[[["self"],["t"]]]],[11,"from_iter","","",95,[[["t"]],["sslsessioncachemode"]]],[11,"clone","","",96,[[["self"]],["sslfiletype"]]],[11,"from_raw","","Constructs an `SslFiletype` from a raw OpenSSL value.",96,[[["c_int"]],["sslfiletype"]]],[11,"as_raw","","Returns the raw OpenSSL value represented by this type.",96,[[["self"]],["c_int"]]],[18,"PEM","","The PEM format.",96,N],[18,"ASN1","","The ASN1 format.",96,N],[11,"clone","","",97,[[["self"]],["statustype"]]],[11,"from_raw","","Constructs a `StatusType` from a raw OpenSSL value.",97,[[["c_int"]],["statustype"]]],[11,"as_raw","","Returns the raw OpenSSL value represented by this type.",97,[[["self"]],["c_int"]]],[18,"OCSP","","An OSCP status.",97,N],[11,"clone","","",98,[[["self"]],["nametype"]]],[11,"from_raw","","Constructs a `StatusType` from a raw OpenSSL value.",98,[[["c_int"]],["statustype"]]],[11,"as_raw","","Returns the raw OpenSSL value represented by this type.",98,[[["self"]],["c_int"]]],[18,"HOST_NAME","","A host name.",98,N],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"clone","","",99,[[["self"]],["snierror"]]],[11,"eq","","",99,[[["self"],["snierror"]],["bool"]]],[11,"ne","","",99,[[["self"],["snierror"]],["bool"]]],[18,"ALERT_FATAL","","Abort the handshake with a fatal alert.",99,N],[18,"ALERT_WARNING","","Send a warning alert to the client and continue the handshake.",99,N],[18,"NOACK","","",99,N],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",100,[[["self"]],["sslalert"]]],[11,"eq","","",100,[[["self"],["sslalert"]],["bool"]]],[11,"ne","","",100,[[["self"],["sslalert"]],["bool"]]],[18,"UNRECOGNIZED_NAME","","Alert 112 - `unrecognized_name`.",100,N],[18,"ILLEGAL_PARAMETER","","",100,N],[18,"DECODE_ERROR","","",100,N],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["sslversion"]]],[11,"eq","","",101,[[["self"],["sslversion"]],["bool"]]],[11,"ne","","",101,[[["self"],["sslversion"]],["bool"]]],[18,"SSL3","","SSLv3",101,N],[18,"TLS1","","TLSv1.0",101,N],[18,"TLS1_1","","TLSv1.1",101,N],[18,"TLS1_2","","TLSv1.2",101,N],[11,"new","","Creates a new `SslContextBuilder`.",102,[[["sslmethod"]],["result",["sslcontextbuilder","errorstack"]]]],[11,"from_ptr","","Creates an `SslContextBuilder` from a pointer to a raw OpenSSL value.",102,N],[11,"as_ptr","","Returns a pointer to the raw OpenSSL value.",102,N],[11,"set_verify","","Configures the certificate verification method for new connections.",102,[[["self"],["sslverifymode"]]]],[11,"set_verify_callback","","Configures the certificate verification method for new connections and registers a verification callback.",102,[[["self"],["sslverifymode"],["f"]]]],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections.",102,[[["self"],["f"]]]],[11,"set_verify_depth","","Sets the certificate verification depth.",102,[[["self"],["u32"]]]],[11,"set_read_ahead","","Controls read ahead behavior.",102,[[["self"],["bool"]]]],[11,"set_mode","","Sets the mode used by the context, returning the previous mode.",102,[[["self"],["sslmode"]],["sslmode"]]],[11,"set_tmp_dh","","Sets the parameters to be used during ephemeral Diffie-Hellman key exchange.",102,[[["self"],["dhref"]],["result",["errorstack"]]]],[11,"set_tmp_dh_callback","","Sets the callback which will generate parameters to be used during ephemeral Diffie-Hellman key exchange.",102,[[["self"],["f"]]]],[11,"set_tmp_ecdh","","Sets the parameters to be used during ephemeral elliptic curve Diffie-Hellman key exchange.",102,[[["self"],["eckeyref"]],["result",["errorstack"]]]],[11,"set_tmp_ecdh_callback","","Sets the callback which will generate parameters to be used during ephemeral elliptic curve Diffie-Hellman key exchange.",102,[[["self"],["f"]]]],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",102,[[["self"]],["result",["errorstack"]]]],[11,"set_ca_file","","Loads trusted root certificates from a file.",102,[[["self"],["p"]],["result",["errorstack"]]]],[11,"set_client_ca_list","","Sets the list of CA names sent to the client.",102,[[["self"],["stack",["x509name"]]]]],[11,"set_session_id_context","","Set the context identifier for sessions.",102,N],[11,"set_certificate_file","","Loads a leaf certificate from a file.",102,[[["self"],["p"],["sslfiletype"]],["result",["errorstack"]]]],[11,"set_certificate_chain_file","","Loads a certificate chain from a file.",102,[[["self"],["p"]],["result",["errorstack"]]]],[11,"set_certificate","","Sets the leaf certificate.",102,[[["self"],["x509ref"]],["result",["errorstack"]]]],[11,"add_extra_chain_cert","","Appends a certificate to the certificate chain.",102,[[["self"],["x509"]],["result",["errorstack"]]]],[11,"set_private_key_file","","Loads the private key from a file.",102,[[["self"],["p"],["sslfiletype"]],["result",["errorstack"]]]],[11,"set_private_key","","Sets the private key.",102,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"set_cipher_list","","Sets the list of supported ciphers for protocols before TLSv1.3.",102,[[["self"],["str"]],["result",["errorstack"]]]],[11,"set_options","","Sets the options used by the context, returning the old set.",102,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"options","","Returns the options used by the context.",102,[[["self"]],["ssloptions"]]],[11,"clear_options","","Clears the options used by the context, returning the old set.",102,[[["self"],["ssloptions"]],["ssloptions"]]],[11,"set_tlsext_use_srtp","","Enables the DTLS extension \"use_srtp\" as defined in RFC5764.",102,[[["self"],["str"]],["result",["errorstack"]]]],[11,"check_private_key","","Checks for consistency between the private key and certificate.",102,[[["self"]],["result",["errorstack"]]]],[11,"cert_store","","Returns a shared reference to the context's certificate store.",102,[[["self"]],["x509storebuilderref"]]],[11,"cert_store_mut","","Returns a mutable reference to the context's certificate store.",102,[[["self"]],["x509storebuilderref"]]],[11,"set_status_callback","","Sets the callback dealing with OCSP stapling.",102,[[["self"],["f"]],["result",["errorstack"]]]],[11,"set_psk_client_callback","","Sets the callback for providing an identity and pre-shared key for a TLS-PSK client.",102,[[["self"],["f"]]]],[11,"set_psk_callback","","",102,[[["self"],["f"]]]],[11,"set_psk_server_callback","","Sets the callback for providing an identity and pre-shared key for a TLS-PSK server.",102,[[["self"],["f"]]]],[11,"set_new_session_callback","","Sets the callback which is called when new sessions are negotiated.",102,[[["self"],["f"]]]],[11,"set_remove_session_callback","","Sets the callback which is called when sessions are removed from the context.",102,[[["self"],["f"]]]],[11,"set_get_session_callback","","Sets the callback which is called when a client proposed to resume a session but it was not found in the internal cache.",102,[[["self"],["f"]]]],[11,"set_session_cache_mode","","Sets the session caching mode use for connections made with the context.",102,[[["self"],["sslsessioncachemode"]],["sslsessioncachemode"]]],[11,"set_cookie_generate_cb","","Sets the callback for generating a DTLSv1 cookie",102,[[["self"],["f"]]]],[11,"set_cookie_verify_cb","","Sets the callback for verifying a DTLSv1 cookie",102,[[["self"],["f"]]]],[11,"set_ex_data","","Sets the extra data at the specified index.",102,[[["self"],["index",["sslcontext"]],["t"]]]],[11,"build","","Consumes the builder, returning a new `SslContext`.",102,[[["self"]],["sslcontext"]]],[11,"from_ptr","","",103,N],[11,"as_ptr","","",103,N],[11,"drop","","",103,[[["self"]]]],[11,"deref","","",103,[[["self"]],["sslcontextref"]]],[11,"deref_mut","","",103,[[["self"]],["sslcontextref"]]],[11,"borrow","","",103,[[["self"]],["sslcontextref"]]],[11,"as_ref","","",103,[[["self"]],["sslcontextref"]]],[11,"clone","","",103,[[["self"]],["self"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new builder object for an `SslContext`.",103,[[["sslmethod"]],["result",["sslcontextbuilder","errorstack"]]]],[11,"new_ex_index","","Returns a new extra data index.",103,[[],["result",["index","errorstack"]]]],[11,"cert_store","","Returns a shared reference to the certificate store used for verification.",104,[[["self"]],["x509storeref"]]],[11,"extra_chain_certs","","Returns a shared reference to the stack of certificates making up the chain from the leaf.",104,[[["self"]],["stackref"]]],[11,"ex_data","","Returns a reference to the extra data at the specified index.",104,[[["self"],["index",["sslcontext"]]],["option"]]],[11,"from_ptr","","",105,N],[11,"as_ptr","","",105,N],[11,"deref","","",105,[[["self"]],["sslcipherref"]]],[11,"deref_mut","","",105,[[["self"]],["sslcipherref"]]],[11,"name","","Returns the name of the cipher.",106,[[["self"]],["str"]]],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",106,[[["self"]],["str"]]],[11,"bits","","Returns the number of bits used for the cipher.",106,[[["self"]],["cipherbits"]]],[11,"description","","Returns a textual description of the cipher.",106,[[["self"]],["string"]]],[11,"from_ptr","","",107,N],[11,"as_ptr","","",107,N],[11,"drop","","",107,[[["self"]]]],[11,"deref","","",107,[[["self"]],["sslsessionref"]]],[11,"deref_mut","","",107,[[["self"]],["sslsessionref"]]],[11,"borrow","","",107,[[["self"]],["sslsessionref"]]],[11,"as_ref","","",107,[[["self"]],["sslsessionref"]]],[11,"clone","","",107,[[["self"]],["sslsession"]]],[11,"from_der","","Deserializes a DER-encoded session structure.",107,N],[11,"to_owned","","",108,[[["self"]],["sslsession"]]],[11,"id","","Returns the SSL session ID.",108,N],[11,"master_key_len","","Returns the length of the master key.",108,[[["self"]],["usize"]]],[11,"master_key","","Copies the master key into the provided buffer.",108,N],[11,"to_der","","Serializes the session into a DER-encoded structure.",108,[[["self"]],["result",["vec","errorstack"]]]],[11,"from_ptr","","",109,N],[11,"as_ptr","","",109,N],[11,"drop","","",109,[[["self"]]]],[11,"deref","","",109,[[["self"]],["sslref"]]],[11,"deref_mut","","",109,[[["self"]],["sslref"]]],[11,"borrow","","",109,[[["self"]],["sslref"]]],[11,"as_ref","","",109,[[["self"]],["sslref"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"new_ex_index","","Returns a new extra data index.",109,[[],["result",["index","errorstack"]]]],[11,"new","","Creates a new `Ssl`.",109,[[["sslcontext"]],["result",["ssl","errorstack"]]]],[11,"connect","","Initiates a client-side TLS handshake.",109,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"accept","","Initiates a server-side TLS handshake.",109,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"set_verify","","Like [`SslContextBuilder::set_verify`].",110,[[["self"],["sslverifymode"]]]],[11,"set_verify_callback","","Like [`SslContextBuilder::set_verify_callback`].",110,[[["self"],["sslverifymode"],["f"]]]],[11,"set_tmp_dh","","Like [`SslContextBuilder::set_tmp_dh`].",110,[[["self"],["dhref"]],["result",["errorstack"]]]],[11,"set_tmp_dh_callback","","Like [`SslContextBuilder::set_tmp_dh_callback`].",110,[[["self"],["f"]]]],[11,"set_tmp_ecdh","","Like [`SslContextBuilder::set_tmp_ecdh`].",110,[[["self"],["eckeyref"]],["result",["errorstack"]]]],[11,"set_tmp_ecdh_callback","","Like [`SslContextBuilder::set_tmp_ecdh_callback`].",110,[[["self"],["f"]]]],[11,"current_cipher","","Returns the current cipher if the session is active.",110,[[["self"]],["option",["sslcipherref"]]]],[11,"state_string","","Returns a short string describing the state of the session.",110,[[["self"]],["str"]]],[11,"state_string_long","","Returns a longer string describing the state of the session.",110,[[["self"]],["str"]]],[11,"set_hostname","","Sets the host name to be sent to the server for Server Name Indication (SNI).",110,[[["self"],["str"]],["result",["errorstack"]]]],[11,"peer_certificate","","Returns the peer's certificate, if present.",110,[[["self"]],["option",["x509"]]]],[11,"peer_cert_chain","","Returns the certificate chain of the peer, if present.",110,[[["self"]],["option",["stackref"]]]],[11,"certificate","","Like [`SslContext::certificate`].",110,[[["self"]],["option",["x509ref"]]]],[11,"private_key","","Like [`SslContext::private_key`].",110,[[["self"]],["option",["pkeyref"]]]],[11,"version","","",110,[[["self"]],["str"]]],[11,"version2","","Returns the protocol version of the session.",110,[[["self"]],["option",["sslversion"]]]],[11,"version_str","","Returns a string describing the protocol version of the session.",110,[[["self"]],["str"]]],[11,"set_tlsext_use_srtp","","Enables the DTLS extension \"use_srtp\" as defined in RFC5764.",110,[[["self"],["str"]],["result",["errorstack"]]]],[11,"srtp_profiles","","Gets all SRTP profiles that are enabled for handshake via set_tlsext_use_srtp",110,[[["self"]],["option",["stackref"]]]],[11,"selected_srtp_profile","","Gets the SRTP profile selected by handshake.",110,[[["self"]],["option",["srtpprotectionprofileref"]]]],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",110,[[["self"]],["usize"]]],[11,"servername","","Returns the servername sent by the client via Server Name Indication (SNI).",110,[[["self"],["nametype"]],["option",["str"]]]],[11,"servername_raw","","Returns the servername sent by the client via Server Name Indication (SNI).",110,[[["self"],["nametype"]],["option"]]],[11,"set_ssl_context","","Changes the context corresponding to the current connection.",110,[[["self"],["sslcontextref"]],["result",["errorstack"]]]],[11,"ssl_context","","Returns the context corresponding to the current connection.",110,[[["self"]],["sslcontextref"]]],[11,"verify_result","","Returns the certificate verification result.",110,[[["self"]],["x509verifyresult"]]],[11,"session","","Returns a shared reference to the SSL session.",110,[[["self"]],["option",["sslsessionref"]]]],[11,"export_keying_material","","Derives keying material for application use in accordance to RFC 5705.",110,N],[11,"set_session","","Sets the session to be used.",110,[[["self"],["sslsessionref"]],["result",["errorstack"]]]],[11,"session_reused","","Determines if the session provided to `set_session` was successfully reused.",110,[[["self"]],["bool"]]],[11,"set_status_type","","Sets the status response a client wishes the server to reply with.",110,[[["self"],["statustype"]],["result",["errorstack"]]]],[11,"ocsp_status","","Returns the server's OCSP response, if present.",110,[[["self"]],["option"]]],[11,"set_ocsp_status","","Sets the OCSP response to be returned to the client.",110,N],[11,"is_server","","Determines if this `Ssl` is configured for server-side or client-side use.",110,[[["self"]],["bool"]]],[11,"set_ex_data","","Sets the extra data at the specified index.",110,[[["self"],["index",["ssl"]],["t"]]]],[11,"ex_data","","Returns a reference to the extra data at the specified index.",110,[[["self"],["index",["ssl"]]],["option"]]],[11,"ex_data_mut","","Returns a mutable reference to the extra data at the specified index.",110,[[["self"],["index",["ssl"]]],["option"]]],[11,"finished","","Copies the contents of the last Finished message sent to the peer into the provided buffer.",110,N],[11,"peer_finished","","Copies the contents of the last Finished message received from the peer into the provided buffer.",110,N],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",111,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",111,[[["self"]],["s"]]],[11,"ssl","","Returns a shared reference to the `Ssl` of the stream.",111,[[["self"]],["sslref"]]],[11,"error","","Returns the underlying error which interrupted this handshake.",111,[[["self"]],["error"]]],[11,"into_error","","Consumes `self`, returning its error.",111,[[["self"]],["error"]]],[11,"handshake","","Restarts the handshake process.",111,[[["self"]],["result",["sslstream","handshakeerror"]]]],[11,"drop","","",112,[[["self"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",112,N],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",112,N],[11,"shutdown","","Shuts down the session.",112,[[["self"]],["result",["shutdownresult","error"]]]],[11,"get_shutdown","","Returns the session's shutdown state.",112,[[["self"]],["shutdownstate"]]],[11,"set_shutdown","","Sets the session's shutdown state.",112,[[["self"],["shutdownstate"]]]],[11,"get_ref","","Returns a shared reference to the underlying stream.",112,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",112,[[["self"]],["s"]]],[11,"ssl","","Returns a shared reference to the `Ssl` object associated with this stream.",112,[[["self"]],["sslref"]]],[11,"read","","",112,N],[11,"write","","",112,N],[11,"flush","","",112,[[["self"]],["result"]]],[11,"new","","Begin creating an `SslStream` atop `stream`",113,[[["ssl"],["s"]],["self"]]],[11,"set_connect_state","","Configure as an outgoing stream from a client.",113,[[["self"]]]],[11,"set_accept_state","","Configure as an incoming stream to a server.",113,[[["self"]]]],[11,"connect","","See `Ssl::connect`",113,[[["self"]],["result",["sslstream","handshakeerror"]]]],[11,"accept","","See `Ssl::accept`",113,[[["self"]],["result",["sslstream","handshakeerror"]]]],[11,"handshake","","Initiates the handshake.",113,[[["self"]],["result",["sslstream","handshakeerror"]]]],[11,"get_ref","","Returns a shared reference to the underlying stream.",113,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",113,[[["self"]],["s"]]],[11,"ssl","","Returns a shared reference to the `Ssl` object associated with this builder.",113,[[["self"]],["sslref"]]],[11,"clone","","",83,[[["self"]],["shutdownresult"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["shutdownresult"]],["bool"]]],[11,"eq","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"ne","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"clone","","",114,[[["self"]],["shutdownstate"]]],[11,"partial_cmp","","",114,[[["self"],["shutdownstate"]],["option",["ordering"]]]],[11,"lt","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"le","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"gt","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"ge","","",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"cmp","","",114,[[["self"],["shutdownstate"]],["ordering"]]],[11,"hash","","",114,N],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[18,"SENT","","A close notify message has been sent to the peer.",114,N],[18,"RECEIVED","","A close notify message has been received from the peer.",114,N],[11,"empty","","Returns an empty set of flags.",114,[[],["shutdownstate"]]],[11,"all","","Returns the set containing all flags.",114,[[],["shutdownstate"]]],[11,"bits","","Returns the raw value of the flags currently stored.",114,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",114,[[["c_int"]],["option",["shutdownstate"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",114,[[["c_int"]],["shutdownstate"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",114,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",114,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",114,[[["self"],["shutdownstate"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",114,[[["self"],["shutdownstate"]]]],[11,"remove","","Removes the specified flags in-place.",114,[[["self"],["shutdownstate"]]]],[11,"toggle","","Toggles the specified flags in-place.",114,[[["self"],["shutdownstate"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",114,[[["self"],["shutdownstate"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",114,[[["self"],["shutdownstate"]],["shutdownstate"]]],[11,"bitor_assign","","Adds the set of flags.",114,[[["self"],["shutdownstate"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",114,[[["self"],["shutdownstate"]],["shutdownstate"]]],[11,"bitxor_assign","","Toggles the set of flags.",114,[[["self"],["shutdownstate"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",114,[[["self"],["shutdownstate"]],["shutdownstate"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",114,[[["self"],["shutdownstate"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",114,[[["self"],["shutdownstate"]],["shutdownstate"]]],[11,"sub_assign","","Disables all flags enabled in the set.",114,[[["self"],["shutdownstate"]]]],[11,"not","","Returns the complement of this set of flags.",114,[[["self"]],["shutdownstate"]]],[11,"extend","","",114,[[["self"],["t"]]]],[11,"from_iter","","",114,[[["t"]],["shutdownstate"]]],[0,"stack","openssl","",N,N],[3,"Stack","openssl::stack","An owned stack of `T`.",N,N],[3,"IntoIter","","",N,N],[3,"StackRef","","",N,N],[3,"Iter","","An iterator over the stack's contents.",N,N],[3,"IterMut","","A mutable iterator over the stack's contents.",N,N],[8,"Stackable","","Trait implemented by types which can be placed in a stack.",N,N],[16,"StackType","","The C stack type for this element.",115,N],[11,"drop","","",116,[[["self"]]]],[11,"new","","",116,[[],["result",["stack","errorstack"]]]],[11,"into_iter","","",116,[[["self"]],["intoiter"]]],[11,"as_ref","","",116,[[["self"]],["stackref"]]],[11,"borrow","","",116,[[["self"]],["stackref"]]],[11,"from_ptr","","",116,N],[11,"as_ptr","","",116,N],[11,"deref","","",116,[[["self"]],["stackref"]]],[11,"deref_mut","","",116,[[["self"]],["stackref"]]],[11,"drop","","",117,[[["self"]]]],[11,"next","","",117,[[["self"]],["option"]]],[11,"size_hint","","",117,N],[11,"len","","Returns the number of items in the stack",118,[[["self"]],["usize"]]],[11,"iter","","",118,[[["self"]],["iter"]]],[11,"iter_mut","","",118,[[["self"]],["itermut"]]],[11,"get","","Returns a reference to the element at the given index in the stack or `None` if the index is out of bounds",118,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the element at the given index in the stack or `None` if the index is out of bounds",118,[[["self"],["usize"]],["option"]]],[11,"push","","Pushes a value onto the top of the stack.",118,[[["self"],["t"]],["result",["errorstack"]]]],[11,"pop","","Removes the last element from the stack and returns it.",118,[[["self"]],["option"]]],[11,"index","","",118,N],[11,"index_mut","","",118,N],[11,"next","","",119,[[["self"]],["option"]]],[11,"size_hint","","",119,N],[11,"next","","",120,[[["self"]],["option"]]],[11,"size_hint","","",120,N],[0,"string","openssl","",N,N],[3,"OpensslString","openssl::string","",N,N],[3,"OpensslStringRef","","",N,N],[11,"from_ptr","","",121,N],[11,"as_ptr","","",121,N],[11,"drop","","",121,[[["self"]]]],[11,"deref","","",121,[[["self"]],["opensslstringref"]]],[11,"deref_mut","","",121,[[["self"]],["opensslstringref"]]],[11,"borrow","","",121,[[["self"]],["opensslstringref"]]],[11,"as_ref","","",121,[[["self"]],["opensslstringref"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"deref","","",122,[[["self"]],["str"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[0,"symm","openssl","High level interface to certain symmetric ciphers.",N,N],[3,"Cipher","openssl::symm","Represents a particular cipher algorithm.",N,N],[3,"Crypter","","Represents a symmetric cipher context.",N,N],[4,"Mode","","",N,N],[13,"Encrypt","","",123,N],[13,"Decrypt","","",123,N],[5,"encrypt","","Encrypts data in one go, and returns the encrypted data.",N,N],[5,"decrypt","","Decrypts data in one go, and returns the decrypted data.",N,N],[5,"encrypt_aead","","Like `encrypt`, but for AEAD ciphers such as AES GCM.",N,N],[5,"decrypt_aead","","Like `decrypt`, but for AEAD ciphers such as AES GCM.",N,N],[5,"EVP_CIPHER_iv_length","","",N,N],[5,"EVP_CIPHER_block_size","","",N,N],[5,"EVP_CIPHER_key_length","","",N,N],[11,"clone","","",123,[[["self"]],["mode"]]],[11,"clone","","",124,[[["self"]],["cipher"]]],[11,"eq","","",124,[[["self"],["cipher"]],["bool"]]],[11,"ne","","",124,[[["self"],["cipher"]],["bool"]]],[11,"from_nid","","Looks up the cipher for a certain nid.",124,[[["nid"]],["option",["cipher"]]]],[11,"aes_128_ecb","","",124,[[],["cipher"]]],[11,"aes_128_cbc","","",124,[[],["cipher"]]],[11,"aes_128_xts","","",124,[[],["cipher"]]],[11,"aes_128_ctr","","",124,[[],["cipher"]]],[11,"aes_128_cfb1","","",124,[[],["cipher"]]],[11,"aes_128_cfb128","","",124,[[],["cipher"]]],[11,"aes_128_cfb8","","",124,[[],["cipher"]]],[11,"aes_128_gcm","","",124,[[],["cipher"]]],[11,"aes_128_ccm","","",124,[[],["cipher"]]],[11,"aes_256_ecb","","",124,[[],["cipher"]]],[11,"aes_256_cbc","","",124,[[],["cipher"]]],[11,"aes_256_xts","","",124,[[],["cipher"]]],[11,"aes_256_ctr","","",124,[[],["cipher"]]],[11,"aes_256_cfb1","","",124,[[],["cipher"]]],[11,"aes_256_cfb128","","",124,[[],["cipher"]]],[11,"aes_256_cfb8","","",124,[[],["cipher"]]],[11,"aes_256_gcm","","",124,[[],["cipher"]]],[11,"aes_256_ccm","","",124,[[],["cipher"]]],[11,"bf_cbc","","",124,[[],["cipher"]]],[11,"bf_ecb","","",124,[[],["cipher"]]],[11,"bf_cfb64","","",124,[[],["cipher"]]],[11,"bf_ofb","","",124,[[],["cipher"]]],[11,"des_cbc","","",124,[[],["cipher"]]],[11,"des_ecb","","",124,[[],["cipher"]]],[11,"des_ede3","","",124,[[],["cipher"]]],[11,"des_ede3_cbc","","",124,[[],["cipher"]]],[11,"rc4","","",124,[[],["cipher"]]],[11,"from_ptr","","",124,N],[11,"as_ptr","","",124,N],[11,"key_len","","Returns the length of keys used with this cipher.",124,[[["self"]],["usize"]]],[11,"iv_len","","Returns the length of the IV used with this cipher, or `None` if the cipher does not use an IV.",124,[[["self"]],["option",["usize"]]]],[11,"block_size","","Returns the block size of the cipher.",124,[[["self"]],["usize"]]],[11,"new","","Creates a new `Crypter`.  The initialisation vector, `iv`, is not necesarry for certain types of `Cipher`.",125,N],[11,"pad","","Enables or disables padding.",125,[[["self"],["bool"]]]],[11,"set_tag","","Sets the tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",125,N],[11,"set_tag_len","","Sets the length of the authentication tag to generate in AES CCM.",125,[[["self"],["usize"]],["result",["errorstack"]]]],[11,"set_data_len","","Feeds total plaintext length to the cipher.",125,[[["self"],["usize"]],["result",["errorstack"]]]],[11,"aad_update","","Feeds Additional Authenticated Data (AAD) through the cipher.",125,N],[11,"update","","Feeds data from `input` through the cipher, writing encrypted/decrypted bytes into `output`.",125,N],[11,"finalize","","Finishes the encryption/decryption process, writing any remaining data to `output`.",125,N],[11,"get_tag","","Retrieves the authentication tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",125,N],[11,"drop","","",125,[[["self"]]]],[0,"version","openssl","",N,N],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",N,[[],["i64"]]],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",N,[[],["str"]]],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",N,[[],["str"]]],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",N,[[],["str"]]],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",N,[[],["str"]]],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",N,[[],["str"]]],[0,"x509","openssl","The standard defining the format of public key certificates.",N,N],[3,"X509StoreContext","openssl::x509","An `X509` certificate store context.",N,N],[3,"X509StoreContextRef","","Reference to `X509StoreContext`.",N,N],[3,"X509Builder","","A builder used to construct an `X509`.",N,N],[3,"X509","","An `X509` public key certificate.",N,N],[3,"X509Ref","","Reference to `X509`.",N,N],[3,"X509v3Context","","A context object required to construct certain `X509` extension values.",N,N],[3,"X509Extension","","Permit additional fields to be added to an `X509` v3 certificate.",N,N],[3,"X509ExtensionRef","","Reference to `X509Extension`.",N,N],[3,"X509NameBuilder","","A builder used to construct an `X509Name`.",N,N],[3,"X509Name","","The names of an `X509` certificate.",N,N],[3,"X509NameRef","","Reference to `X509Name`.",N,N],[3,"X509NameEntries","","A type to destructure and examine an `X509Name`.",N,N],[3,"X509NameEntry","","A name entry associated with a `X509Name`.",N,N],[3,"X509NameEntryRef","","Reference to `X509NameEntry`.",N,N],[3,"X509ReqBuilder","","A builder used to construct an `X509Req`.",N,N],[3,"X509Req","","An `X509` certificate request.",N,N],[3,"X509ReqRef","","Reference to `X509Req`.",N,N],[3,"X509VerifyResult","","The result of peer certificate verification.",N,N],[3,"GeneralName","","An `X509` certificate alternative names.",N,N],[3,"GeneralNameRef","","Reference to `GeneralName`.",N,N],[3,"X509Algorithm","","An `X509` certificate signature algorithm.",N,N],[3,"X509AlgorithmRef","","Reference to `X509Algorithm`.",N,N],[0,"extension","","Add extensions to an `X509` certificate or certificate request. ",N,N],[3,"BasicConstraints","openssl::x509::extension","An extension which indicates whether a certificate is a CA certificate.",N,N],[3,"KeyUsage","","An extension consisting of a list of names of the permitted key usages.",N,N],[3,"ExtendedKeyUsage","","An extension consisting of a list of usages indicating purposes for which the certificate public key can be used for.",N,N],[3,"SubjectKeyIdentifier","","An extension that provides a means of identifying certificates that contain a particular public key.",N,N],[3,"AuthorityKeyIdentifier","","An extension that provides a means of identifying the public key corresponding to the private key used to sign a CRL.",N,N],[3,"SubjectAlternativeName","","An extension that allows additional identities to be bound to the subject of the certificate.",N,N],[11,"new","","Construct a new `BasicConstraints` extension.",126,[[],["basicconstraints"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",126,[[["self"]],["basicconstraints"]]],[11,"ca","","Sets the `ca` flag to `true`.",126,[[["self"]],["basicconstraints"]]],[11,"pathlen","","Sets the pathlen to an optional non-negative value. The pathlen is the maximum number of CAs that can appear below this one in a chain.",126,[[["self"],["u32"]],["basicconstraints"]]],[11,"build","","Return the `BasicConstraints` extension as an `X509Extension`.",126,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","Construct a new `KeyUsage` extension.",127,[[],["keyusage"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",127,[[["self"]],["keyusage"]]],[11,"digital_signature","","Sets the `digitalSignature` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"non_repudiation","","Sets the `nonRepudiation` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"key_encipherment","","Sets the `keyEncipherment` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"data_encipherment","","Sets the `dataEncipherment` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"key_agreement","","Sets the `keyAgreement` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"key_cert_sign","","Sets the `keyCertSign` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"crl_sign","","Sets the `cRLSign` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"encipher_only","","Sets the `encipherOnly` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"decipher_only","","Sets the `decipherOnly` flag to `true`.",127,[[["self"]],["keyusage"]]],[11,"build","","Return the `KeyUsage` extension as an `X509Extension`.",127,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","Construct a new `ExtendedKeyUsage` extension.",128,[[],["extendedkeyusage"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",128,[[["self"]],["extendedkeyusage"]]],[11,"server_auth","","Sets the `serverAuth` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"client_auth","","Sets the `clientAuth` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"code_signing","","Sets the `codeSigning` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"time_stamping","","Sets the `timeStamping` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ms_code_ind","","Sets the `msCodeInd` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ms_code_com","","Sets the `msCodeCom` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ms_ctl_sign","","Sets the `msCTLSign` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ms_sgc","","Sets the `msSGC` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ms_efs","","Sets the `msEFS` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"ns_sgc","","Sets the `nsSGC` flag to `true`.",128,[[["self"]],["extendedkeyusage"]]],[11,"other","","Sets a flag not already defined.",128,[[["self"],["str"]],["extendedkeyusage"]]],[11,"build","","Return the `ExtendedKeyUsage` extension as an `X509Extension`.",128,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","Construct a new `SubjectKeyIdentifier` extension.",129,[[],["subjectkeyidentifier"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",129,[[["self"]],["subjectkeyidentifier"]]],[11,"build","","Return a `SubjectKeyIdentifier` extension as an `X509Extension`.",129,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[11,"new","","Construct a new `AuthorityKeyIdentifier` extension.",130,[[],["authoritykeyidentifier"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",130,[[["self"]],["authoritykeyidentifier"]]],[11,"keyid","","Sets the `keyid` flag.",130,[[["self"],["bool"]],["authoritykeyidentifier"]]],[11,"issuer","","Sets the `issuer` flag.",130,[[["self"],["bool"]],["authoritykeyidentifier"]]],[11,"build","","Return a `AuthorityKeyIdentifier` extension as an `X509Extension`.",130,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[11,"new","","Construct a new `SubjectAlternativeName` extension.",131,[[],["subjectalternativename"]]],[11,"critical","","Sets the `critical` flag to `true`. The extension will be critical.",131,[[["self"]],["subjectalternativename"]]],[11,"email","","Sets the `email` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"uri","","Sets the `uri` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"dns","","Sets the `dns` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"rid","","Sets the `rid` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"ip","","Sets the `ip` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"dir_name","","Sets the `dirName` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"other_name","","Sets the `otherName` flag.",131,[[["self"],["str"]],["subjectalternativename"]]],[11,"build","","Return a `SubjectAlternativeName` extension as an `X509Extension`.",131,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[0,"store","openssl::x509","Describe a context in which to verify an `X509` certificate.",N,N],[3,"X509StoreBuilder","openssl::x509::store","A builder type used to construct an `X509Store`.",N,N],[3,"X509StoreBuilderRef","","Reference to an `X509StoreBuilder`.",N,N],[3,"X509Store","","A certificate store to hold trusted `X509` certificates.",N,N],[3,"X509StoreRef","","Reference to an `X509Store`.",N,N],[11,"from_ptr","","",132,N],[11,"as_ptr","","",132,N],[11,"drop","","",132,[[["self"]]]],[11,"deref","","",132,[[["self"]],["x509storebuilderref"]]],[11,"deref_mut","","",132,[[["self"]],["x509storebuilderref"]]],[11,"borrow","","",132,[[["self"]],["x509storebuilderref"]]],[11,"as_ref","","",132,[[["self"]],["x509storebuilderref"]]],[11,"new","","Returns a builder for a certificate store.",132,[[],["result",["x509storebuilder","errorstack"]]]],[11,"build","","Constructs the `X509Store`.",132,[[["self"]],["x509store"]]],[11,"add_cert","","Adds a certificate to the certificate store.",133,[[["self"],["x509"]],["result",["errorstack"]]]],[11,"set_default_paths","","Load certificates from their default locations.",133,[[["self"]],["result",["errorstack"]]]],[11,"from_ptr","","",134,N],[11,"as_ptr","","",134,N],[11,"drop","","",134,[[["self"]]]],[11,"deref","","",134,[[["self"]],["x509storeref"]]],[11,"deref_mut","","",134,[[["self"]],["x509storeref"]]],[11,"borrow","","",134,[[["self"]],["x509storeref"]]],[11,"as_ref","","",134,[[["self"]],["x509storeref"]]],[11,"from_ptr","openssl::x509","",135,N],[11,"as_ptr","","",135,N],[11,"drop","","",135,[[["self"]]]],[11,"deref","","",135,[[["self"]],["x509storecontextref"]]],[11,"deref_mut","","",135,[[["self"]],["x509storecontextref"]]],[11,"borrow","","",135,[[["self"]],["x509storecontextref"]]],[11,"as_ref","","",135,[[["self"]],["x509storecontextref"]]],[11,"ssl_idx","","Returns the index which can be used to obtain a reference to the `Ssl` associated with a context.",135,[[],["result",["index","errorstack"]]]],[11,"new","","Creates a new `X509StoreContext` instance.",135,[[],["result",["x509storecontext","errorstack"]]]],[11,"ex_data","","Returns application data pertaining to an `X509` store context.",136,[[["self"],["index",["x509storecontext"]]],["option"]]],[11,"error","","Returns the error code of the context.",136,[[["self"]],["x509verifyresult"]]],[11,"init","","Initializes this context with the given certificate, certificates chain and certificate store. After initializing the context, the `with_context` closure is called with the prepared context. As long as the closure is running, the context stays initialized and can be used to e.g. verify a certificate. The context will be cleaned up, after the closure finished.",136,[[["self"],["x509storeref"],["x509ref"],["stackref"],["f"]],["result",["errorstack"]]]],[11,"verify_cert","","Verifies the stored certificate.",136,[[["self"]],["result",["bool","errorstack"]]]],[11,"set_error","","Set the error code of the context.",136,[[["self"],["x509verifyresult"]]]],[11,"current_cert","","Returns a reference to the certificate which caused the error or None if no certificate is relevant to the error.",136,[[["self"]],["option",["x509ref"]]]],[11,"error_depth","","Returns a non-negative integer representing the depth in the certificate chain where the error occurred. If it is zero it occurred in the end entity certificate, one if it is the certificate which signed the end entity certificate and so on.",136,[[["self"]],["u32"]]],[11,"chain","","Returns a reference to a complete valid `X509` certificate chain.",136,[[["self"]],["option",["stackref"]]]],[11,"new","","Creates a new builder.",137,[[],["result",["x509builder","errorstack"]]]],[11,"set_not_after","","Sets the notAfter constraint on the certificate.",137,[[["self"],["asn1timeref"]],["result",["errorstack"]]]],[11,"set_not_before","","Sets the notBefore constraint on the certificate.",137,[[["self"],["asn1timeref"]],["result",["errorstack"]]]],[11,"set_version","","Sets the version of the certificate.",137,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"set_serial_number","","Sets the serial number of the certificate.",137,[[["self"],["asn1integerref"]],["result",["errorstack"]]]],[11,"set_issuer_name","","Sets the issuer name of the certificate.",137,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_subject_name","","Sets the subject name of the certificate.",137,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_pubkey","","Sets the public key associated with the certificate.",137,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"x509v3_context","","Returns a context object which is needed to create certain X509 extension values.",137,[[["self"],["option",["x509ref"]],["option",["confref"]]],["x509v3context"]]],[11,"append_extension","","Adds an X509 extension value to the certificate.",137,[[["self"],["x509extension"]],["result",["errorstack"]]]],[11,"sign","","Signs the certificate with a private key.",137,[[["self"],["pkeyref"],["messagedigest"]],["result",["errorstack"]]]],[11,"build","","Consumes the builder, returning the certificate.",137,[[["self"]],["x509"]]],[11,"from_ptr","","",138,N],[11,"as_ptr","","",138,N],[11,"drop","","",138,[[["self"]]]],[11,"deref","","",138,[[["self"]],["x509ref"]]],[11,"deref_mut","","",138,[[["self"]],["x509ref"]]],[11,"borrow","","",138,[[["self"]],["x509ref"]]],[11,"as_ref","","",138,[[["self"]],["x509ref"]]],[11,"subject_name","","Returns this certificate's subject name.",139,[[["self"]],["x509nameref"]]],[11,"issuer_name","","Returns this certificate's issuer name.",139,[[["self"]],["x509nameref"]]],[11,"subject_alt_names","","Returns this certificate's subject alternative name entries, if they exist.",139,[[["self"]],["option",["stack"]]]],[11,"issuer_alt_names","","Returns this certificate's issuer alternative name entries, if they exist.",139,[[["self"]],["option",["stack"]]]],[11,"public_key","","",139,[[["self"]],["result",["pkey","errorstack"]]]],[11,"digest","","Returns a digest of the DER representation of the certificate.",139,[[["self"],["messagedigest"]],["result",["digestbytes","errorstack"]]]],[11,"fingerprint","","",139,[[["self"],["messagedigest"]],["result",["vec","errorstack"]]]],[11,"not_after","","Returns the certificate's Not After validity period.",139,[[["self"]],["asn1timeref"]]],[11,"not_before","","Returns the certificate's Not Before validity period.",139,[[["self"]],["asn1timeref"]]],[11,"signature","","Returns the certificate's signature",139,[[["self"]],["asn1bitstringref"]]],[11,"signature_algorithm","","Returns the certificate's signature algorithm.",139,[[["self"]],["x509algorithmref"]]],[11,"ocsp_responders","","Returns the list of OCSP responder URLs specified in the certificate's Authority Information Access field.",139,[[["self"]],["result",["stack","errorstack"]]]],[11,"issued","","Checks that this certificate issued `subject`.",139,[[["self"],["x509ref"]],["x509verifyresult"]]],[11,"serial_number","","Returns this certificate's serial number.",139,[[["self"]],["asn1integerref"]]],[11,"to_pem","","Serializes the certificate into a PEM-encoded X509 structure.",139,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes the certificate into a DER-encoded X509 structure.",139,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_owned","","",139,[[["self"]],["x509"]]],[11,"builder","","Returns a new builder.",138,[[],["result",["x509builder","errorstack"]]]],[11,"from_pem","","Deserializes a PEM-encoded X509 structure.",138,N],[11,"from_der","","Deserializes a DER-encoded X509 structure.",138,N],[11,"stack_from_pem","","Deserializes a list of PEM-formatted certificates.",138,N],[11,"clone","","",138,[[["self"]],["x509"]]],[11,"as_ref","","",139,[[["self"]],["x509ref"]]],[11,"as_ptr","","",140,N],[11,"from_ptr","","",141,N],[11,"as_ptr","","",141,N],[11,"drop","","",141,[[["self"]]]],[11,"deref","","",141,[[["self"]],["x509extensionref"]]],[11,"deref_mut","","",141,[[["self"]],["x509extensionref"]]],[11,"borrow","","",141,[[["self"]],["x509extensionref"]]],[11,"as_ref","","",141,[[["self"]],["x509extensionref"]]],[11,"new","","Constructs an X509 extension value. See `man x509v3_config` for information on supported names and their value formats.",141,[[["option",["confref"]],["option",["x509v3context"]],["str"],["str"]],["result",["x509extension","errorstack"]]]],[11,"new_nid","","Constructs an X509 extension value. See `man x509v3_config` for information on supported extensions and their value formats.",141,[[["option",["confref"]],["option",["x509v3context"]],["nid"],["str"]],["result",["x509extension","errorstack"]]]],[11,"new","","Creates a new builder.",142,[[],["result",["x509namebuilder","errorstack"]]]],[11,"append_entry_by_text","","Add a field entry by str.",142,[[["self"],["str"],["str"]],["result",["errorstack"]]]],[11,"append_entry_by_nid","","Add a field entry by NID.",142,[[["self"],["nid"],["str"]],["result",["errorstack"]]]],[11,"build","","Return an `X509Name`.",142,[[["self"]],["x509name"]]],[11,"from_ptr","","",143,N],[11,"as_ptr","","",143,N],[11,"drop","","",143,[[["self"]]]],[11,"deref","","",143,[[["self"]],["x509nameref"]]],[11,"deref_mut","","",143,[[["self"]],["x509nameref"]]],[11,"borrow","","",143,[[["self"]],["x509nameref"]]],[11,"as_ref","","",143,[[["self"]],["x509nameref"]]],[11,"builder","","Returns a new builder.",143,[[],["result",["x509namebuilder","errorstack"]]]],[11,"load_client_ca_file","","Loads subject names from a file containing PEM-formatted certificates.",143,[[["p"]],["result",["stack","errorstack"]]]],[11,"entries_by_nid","","Returns the name entries by the nid.",144,[[["self"],["nid"]],["x509nameentries"]]],[11,"entries","","Returns an iterator over all `X509NameEntry` values",144,[[["self"]],["x509nameentries"]]],[11,"next","","",145,[[["self"]],["option",["x509nameentryref"]]]],[11,"from_ptr","","",146,N],[11,"as_ptr","","",146,N],[11,"drop","","",146,[[["self"]]]],[11,"deref","","",146,[[["self"]],["x509nameentryref"]]],[11,"deref_mut","","",146,[[["self"]],["x509nameentryref"]]],[11,"borrow","","",146,[[["self"]],["x509nameentryref"]]],[11,"as_ref","","",146,[[["self"]],["x509nameentryref"]]],[11,"data","","Returns the field value of an `X509NameEntry`.",147,[[["self"]],["asn1stringref"]]],[11,"object","","Returns the `Asn1Object` value of an `X509NameEntry`. This is useful for finding out about the actual `Nid` when iterating over all `X509NameEntries`.",147,[[["self"]],["asn1objectref"]]],[11,"new","","Returns a builder for a certificate request.",148,[[],["result",["x509reqbuilder","errorstack"]]]],[11,"set_version","","Set the numerical value of the version field.",148,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"set_subject_name","","Set the issuer name.",148,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_pubkey","","Set the public key.",148,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"x509v3_context","","Return an `X509v3Context`. This context object can be used to construct certain `X509` extensions.",148,[[["self"],["option",["confref"]]],["x509v3context"]]],[11,"add_extensions","","Permits any number of extension fields to be added to the certificate.",148,[[["self"],["stackref"]],["result",["errorstack"]]]],[11,"sign","","Sign the request using a private key.",148,[[["self"],["pkeyref"],["messagedigest"]],["result",["errorstack"]]]],[11,"build","","Returns the `X509Req`.",148,[[["self"]],["x509req"]]],[11,"from_ptr","","",149,N],[11,"as_ptr","","",149,N],[11,"drop","","",149,[[["self"]]]],[11,"deref","","",149,[[["self"]],["x509reqref"]]],[11,"deref_mut","","",149,[[["self"]],["x509reqref"]]],[11,"borrow","","",149,[[["self"]],["x509reqref"]]],[11,"as_ref","","",149,[[["self"]],["x509reqref"]]],[11,"builder","","A builder for `X509Req`.",149,[[],["result",["x509reqbuilder","errorstack"]]]],[11,"from_pem","","Deserializes a PEM-encoded PKCS#10 certificate request structure.",149,N],[11,"from_der","","Deserializes a DER-encoded PKCS#10 certificate request structure.",149,N],[11,"to_pem","","Serializes the certificate request to a PEM-encoded PKCS#10 structure.",150,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes the certificate request to a DER-encoded PKCS#10 structure.",150,[[["self"]],["result",["vec","errorstack"]]]],[11,"version","","Returns the numerical value of the version field of the certificate request.",150,[[["self"]],["i32"]]],[11,"subject_name","","Returns the subject name of the certificate request.",150,[[["self"]],["x509nameref"]]],[11,"public_key","","Returns the public key of the certificate request.",150,[[["self"]],["result",["pkey","errorstack"]]]],[11,"extensions","","Returns the extensions of the certificate request.",150,[[["self"]],["result",["stack","errorstack"]]]],[11,"clone","","",151,[[["self"]],["x509verifyresult"]]],[11,"eq","","",151,[[["self"],["x509verifyresult"]],["bool"]]],[11,"ne","","",151,[[["self"],["x509verifyresult"]],["bool"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"description","","",151,[[["self"]],["str"]]],[11,"from_raw","","Creates an `X509VerifyResult` from a raw error number.",151,[[["c_int"]],["x509verifyresult"]]],[11,"as_raw","","Return the integer representation of an `X509VerifyResult`.",151,[[["self"]],["c_int"]]],[11,"error_string","","Return a human readable error string from the verification error.",151,[[["self"]],["str"]]],[18,"OK","","Successful peer certifiate verification.",151,N],[18,"APPLICATION_VERIFICATION","","Application verification failure.",151,N],[11,"from_ptr","","",152,N],[11,"as_ptr","","",152,N],[11,"drop","","",152,[[["self"]]]],[11,"deref","","",152,[[["self"]],["generalnameref"]]],[11,"deref_mut","","",152,[[["self"]],["generalnameref"]]],[11,"borrow","","",152,[[["self"]],["generalnameref"]]],[11,"as_ref","","",152,[[["self"]],["generalnameref"]]],[11,"email","","Returns the contents of this `GeneralName` if it is an `rfc822Name`.",153,[[["self"]],["option",["str"]]]],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",153,[[["self"]],["option",["str"]]]],[11,"uri","","Returns the contents of this `GeneralName` if it is an `uniformResourceIdentifier`.",153,[[["self"]],["option",["str"]]]],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",153,[[["self"]],["option"]]],[11,"from_ptr","","",154,N],[11,"as_ptr","","",154,N],[11,"drop","","",154,[[["self"]]]],[11,"deref","","",154,[[["self"]],["x509algorithmref"]]],[11,"deref_mut","","",154,[[["self"]],["x509algorithmref"]]],[11,"borrow","","",154,[[["self"]],["x509algorithmref"]]],[11,"as_ref","","",154,[[["self"]],["x509algorithmref"]]],[11,"object","","Returns the ASN.1 OID of this algorithm.",155,[[["self"]],["asn1objectref"]]]],"paths":[[3,"KeyError"],[3,"AesKey"],[3,"Asn1GeneralizedTime"],[3,"Asn1GeneralizedTimeRef"],[3,"Asn1Time"],[3,"Asn1TimeRef"],[3,"Asn1String"],[3,"Asn1StringRef"],[3,"Asn1Integer"],[3,"Asn1IntegerRef"],[3,"Asn1BitString"],[3,"Asn1BitStringRef"],[3,"Asn1Object"],[3,"Asn1ObjectRef"],[3,"MsbOption"],[3,"BigNumContext"],[3,"BigNum"],[3,"BigNumRef"],[3,"CMSOptions"],[3,"CmsContentInfo"],[3,"CmsContentInfoRef"],[3,"ConfMethod"],[3,"Conf"],[3,"Deriver"],[3,"Dh"],[3,"DhRef"],[3,"Dsa"],[3,"DsaRef"],[3,"PointConversionForm"],[3,"Asn1Flag"],[3,"EcGroup"],[3,"EcGroupRef"],[3,"EcPoint"],[3,"EcPointRef"],[3,"EcKey"],[3,"EcKeyRef"],[3,"EcdsaSig"],[3,"ErrorStack"],[3,"Error"],[3,"Index"],[3,"MessageDigest"],[3,"Hasher"],[3,"DigestBytes"],[3,"SignatureAlgorithms"],[3,"Nid"],[3,"OcspStatus"],[3,"OcspFlag"],[3,"OcspResponseStatus"],[3,"OcspCertStatus"],[3,"OcspRevokedStatus"],[3,"OcspBasicResponse"],[3,"OcspBasicResponseRef"],[3,"OcspCertId"],[3,"OcspResponse"],[3,"OcspResponseRef"],[3,"OcspRequest"],[3,"OcspRequestRef"],[3,"OcspOneReq"],[3,"ParsedPkcs12"],[3,"Pkcs12"],[3,"Pkcs12Ref"],[3,"Pkcs12Builder"],[3,"KeyIvPair"],[3,"Id"],[3,"PKey"],[3,"PKeyRef"],[3,"Padding"],[3,"Rsa"],[3,"RsaRef"],[3,"RsaPrivateKeyBuilder"],[3,"Sha1"],[3,"Sha224"],[3,"Sha256"],[3,"Sha384"],[3,"Sha512"],[3,"RsaPssSaltlen"],[3,"Signer"],[3,"Verifier"],[3,"SrtpProtectionProfile"],[3,"SrtpProtectionProfileRef"],[3,"SrtpProfileId"],[3,"CipherBits"],[4,"HandshakeError"],[4,"ShutdownResult"],[3,"SslConnector"],[3,"SslConnectorBuilder"],[3,"ConnectConfiguration"],[3,"SslAcceptor"],[3,"SslAcceptorBuilder"],[3,"ErrorCode"],[3,"Error"],[3,"SslOptions"],[3,"SslMode"],[3,"SslMethod"],[3,"SslVerifyMode"],[3,"SslSessionCacheMode"],[3,"SslFiletype"],[3,"StatusType"],[3,"NameType"],[3,"SniError"],[3,"SslAlert"],[3,"SslVersion"],[3,"SslContextBuilder"],[3,"SslContext"],[3,"SslContextRef"],[3,"SslCipher"],[3,"SslCipherRef"],[3,"SslSession"],[3,"SslSessionRef"],[3,"Ssl"],[3,"SslRef"],[3,"MidHandshakeSslStream"],[3,"SslStream"],[3,"SslStreamBuilder"],[3,"ShutdownState"],[8,"Stackable"],[3,"Stack"],[3,"IntoIter"],[3,"StackRef"],[3,"Iter"],[3,"IterMut"],[3,"OpensslString"],[3,"OpensslStringRef"],[4,"Mode"],[3,"Cipher"],[3,"Crypter"],[3,"BasicConstraints"],[3,"KeyUsage"],[3,"ExtendedKeyUsage"],[3,"SubjectKeyIdentifier"],[3,"AuthorityKeyIdentifier"],[3,"SubjectAlternativeName"],[3,"X509StoreBuilder"],[3,"X509StoreBuilderRef"],[3,"X509Store"],[3,"X509StoreContext"],[3,"X509StoreContextRef"],[3,"X509Builder"],[3,"X509"],[3,"X509Ref"],[3,"X509v3Context"],[3,"X509Extension"],[3,"X509NameBuilder"],[3,"X509Name"],[3,"X509NameRef"],[3,"X509NameEntries"],[3,"X509NameEntry"],[3,"X509NameEntryRef"],[3,"X509ReqBuilder"],[3,"X509Req"],[3,"X509ReqRef"],[3,"X509VerifyResult"],[3,"GeneralName"],[3,"GeneralNameRef"],[3,"X509Algorithm"],[3,"X509AlgorithmRef"]]};
searchIndex["openssl_probe"]={"doc":"","items":[[3,"ProbeResult","openssl_probe","",N,N],[12,"cert_file","","",0,N],[12,"cert_dir","","",0,N],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be found.",N,[[],["vec",["pathbuf"]]]],[5,"init_ssl_cert_env_vars","","",N,[[]]],[5,"probe","","",N,[[],["proberesult"]]]],"paths":[[3,"ProbeResult"]]};
searchIndex["openssl_sys"]={"doc":"","items":[[3,"AES_KEY","openssl_sys","",N,N],[3,"ASN1_ENCODING","","",N,N],[12,"enc","","",0,N],[12,"len","","",0,N],[12,"modified","","",0,N],[3,"stack_st_ASN1_OBJECT","","",N,N],[12,"stack","","",1,N],[3,"BIO_METHOD","","",N,N],[12,"type_","","",2,N],[12,"name","","",2,N],[12,"bwrite","","",2,N],[12,"bread","","",2,N],[12,"bputs","","",2,N],[12,"bgets","","",2,N],[12,"ctrl","","",2,N],[12,"create","","",2,N],[12,"destroy","","",2,N],[12,"callback_ctrl","","",2,N],[3,"stack_st_void","","",N,N],[12,"stack","","",3,N],[3,"ECDSA_SIG","","",N,N],[12,"r","","",4,N],[12,"s","","",4,N],[3,"ERR_STRING_DATA","","",N,N],[12,"error","","",5,N],[12,"string","","",5,N],[3,"BIO","","",N,N],[12,"method","","",6,N],[12,"callback","","",6,N],[12,"cb_arg","","",6,N],[12,"init","","",6,N],[12,"shutdown","","",6,N],[12,"flags","","",6,N],[12,"retry_reason","","",6,N],[12,"num","","",6,N],[12,"ptr","","",6,N],[12,"next_bio","","",6,N],[12,"prev_bio","","",6,N],[12,"references","","",6,N],[12,"num_read","","",6,N],[12,"num_write","","",6,N],[12,"ex_data","","",6,N],[3,"BIGNUM","","",N,N],[12,"d","","",7,N],[12,"top","","",7,N],[12,"dmax","","",7,N],[12,"neg","","",7,N],[12,"flags","","",7,N],[3,"EVP_CIPHER","","",N,N],[12,"nid","","",8,N],[12,"block_size","","",8,N],[12,"key_len","","",8,N],[12,"iv_len","","",8,N],[12,"flags","","",8,N],[12,"init","","",8,N],[12,"do_cipher","","",8,N],[12,"cleanup","","",8,N],[12,"ctx_size","","",8,N],[12,"set_asn1_parameters","","",8,N],[12,"get_asn1_parameters","","",8,N],[12,"ctrl","","",8,N],[12,"app_data","","",8,N],[3,"EVP_MD_CTX","","",N,N],[3,"EVP_PKEY","","",N,N],[12,"type_","","",9,N],[12,"save_type","","",9,N],[12,"references","","",9,N],[12,"ameth","","",9,N],[12,"engine","","",9,N],[12,"pkey","","",9,N],[12,"save_parameters","","",9,N],[12,"attributes","","",9,N],[3,"HMAC_CTX","","",N,N],[3,"DH","","",N,N],[12,"pad","","",10,N],[12,"version","","",10,N],[12,"p","","",10,N],[12,"g","","",10,N],[12,"length","","",10,N],[12,"pub_key","","",10,N],[12,"priv_key","","",10,N],[12,"flags","","",10,N],[12,"method_mont_p","","",10,N],[12,"q","","",10,N],[12,"j","","",10,N],[12,"seed","","",10,N],[12,"seedlen","","",10,N],[12,"counter","","",10,N],[12,"references","","",10,N],[12,"ex_data","","",10,N],[12,"meth","","",10,N],[12,"engine","","",10,N],[3,"DSA","","",N,N],[12,"pad","","",11,N],[12,"version","","",11,N],[12,"write_params","","",11,N],[12,"p","","",11,N],[12,"q","","",11,N],[12,"g","","",11,N],[12,"pub_key","","",11,N],[12,"priv_key","","",11,N],[12,"kinv","","",11,N],[12,"r","","",11,N],[12,"flags","","",11,N],[12,"method_mont_p","","",11,N],[12,"references","","",11,N],[12,"ex_data","","",11,N],[12,"meth","","",11,N],[12,"engine","","",11,N],[3,"RSA","","",N,N],[12,"pad","","",12,N],[12,"version","","",12,N],[12,"meth","","",12,N],[12,"engine","","",12,N],[12,"n","","",12,N],[12,"e","","",12,N],[12,"d","","",12,N],[12,"p","","",12,N],[12,"q","","",12,N],[12,"dmp1","","",12,N],[12,"dmq1","","",12,N],[12,"iqmp","","",12,N],[12,"ex_data","","",12,N],[12,"references","","",12,N],[12,"flags","","",12,N],[12,"_method_mod_n","","",12,N],[12,"_method_mod_p","","",12,N],[12,"_method_mod_q","","",12,N],[12,"bignum_data","","",12,N],[12,"blinding","","",12,N],[12,"mt_blinding","","",12,N],[3,"X509","","",N,N],[12,"cert_info","","",13,N],[12,"sig_alg","","",13,N],[12,"signature","","",13,N],[12,"valid","","",13,N],[12,"references","","",13,N],[12,"name","","",13,N],[12,"ex_data","","",13,N],[12,"ex_pathlen","","",13,N],[12,"ex_pcpathlen","","",13,N],[12,"ex_flags","","",13,N],[12,"ex_kusage","","",13,N],[12,"ex_xkusage","","",13,N],[12,"ex_nscert","","",13,N],[3,"X509_ALGOR","","",N,N],[12,"algorithm","","",14,N],[3,"X509V3_CTX","","",N,N],[3,"SSL","","",N,N],[12,"server","","",15,N],[3,"SSL_CTX","","",N,N],[12,"references","","",16,N],[3,"SRP_CTX","","",N,N],[3,"CRYPTO_EX_DATA","","",N,N],[12,"sk","","",17,N],[12,"dummy","","",17,N],[3,"stack_st_OPENSSL_STRING","","",N,N],[12,"stack","","",18,N],[3,"SHA_CTX","","",N,N],[12,"h0","","",19,N],[12,"h1","","",19,N],[12,"h2","","",19,N],[12,"h3","","",19,N],[12,"h4","","",19,N],[12,"Nl","","",19,N],[12,"Nh","","",19,N],[12,"data","","",19,N],[12,"num","","",19,N],[3,"SHA256_CTX","","",N,N],[12,"h","","",20,N],[12,"Nl","","",20,N],[12,"Nh","","",20,N],[12,"data","","",20,N],[12,"num","","",20,N],[12,"md_len","","",20,N],[3,"SHA512_CTX","","",N,N],[12,"h","","",21,N],[12,"Nl","","",21,N],[12,"Nh","","",21,N],[12,"num","","",21,N],[12,"md_len","","",21,N],[3,"SSL_SESSION","","",N,N],[12,"master_key_length","","",22,N],[12,"master_key","","",22,N],[12,"references","","",22,N],[3,"stack_st_SSL_CIPHER","","",N,N],[12,"stack","","",23,N],[3,"SRTP_PROTECTION_PROFILE","","",N,N],[12,"name","","",24,N],[12,"id","","",24,N],[3,"stack_st_SRTP_PROTECTION_PROFILE","","",N,N],[12,"stack","","",25,N],[3,"_STACK","","",N,N],[12,"num","","",26,N],[12,"data","","",26,N],[12,"sorted","","",26,N],[12,"num_alloc","","",26,N],[12,"comp","","",26,N],[3,"X509_VAL","","",N,N],[12,"notBefore","","",27,N],[12,"notAfter","","",27,N],[3,"stack_st_X509_NAME","","",N,N],[12,"stack","","",28,N],[3,"stack_st_X509_EXTENSION","","",N,N],[12,"stack","","",29,N],[3,"stack_st_X509_ATTRIBUTE","","",N,N],[12,"stack","","",30,N],[3,"X509_REQ_INFO","","",N,N],[12,"enc","","",31,N],[12,"version","","",31,N],[12,"subject","","",31,N],[12,"attributes","","",31,N],[3,"X509_REQ","","",N,N],[12,"req_info","","",32,N],[3,"X509_CINF","","",N,N],[12,"validity","","",33,N],[12,"extensions","","",33,N],[3,"stack_st_X509","","",N,N],[12,"stack","","",34,N],[3,"GENERAL_NAME","","",N,N],[12,"type_","","",35,N],[12,"d","","",35,N],[3,"stack_st_GENERAL_NAME","","",N,N],[12,"stack","","",36,N],[4,"CMS_ContentInfo","","",N,N],[4,"point_conversion_form_t","","",N,N],[13,"POINT_CONVERSION_COMPRESSED","","",37,N],[13,"POINT_CONVERSION_UNCOMPRESSED","","",37,N],[13,"POINT_CONVERSION_HYBRID","","",37,N],[4,"EC_METHOD","","",N,N],[4,"EC_GROUP","","",N,N],[4,"EC_POINT","","",N,N],[4,"OCSP_CERTID","","",N,N],[4,"OCSP_ONEREQ","","",N,N],[4,"OCSP_REQUEST","","",N,N],[4,"OCSP_BASICRESP","","",N,N],[4,"ASN1_INTEGER","","",N,N],[4,"ASN1_GENERALIZEDTIME","","",N,N],[4,"ASN1_STRING","","",N,N],[4,"ASN1_BIT_STRING","","",N,N],[4,"ASN1_TIME","","",N,N],[4,"ASN1_TYPE","","",N,N],[4,"ASN1_OBJECT","","",N,N],[4,"bio_st","","",N,N],[4,"BN_BLINDING","","",N,N],[4,"BN_MONT_CTX","","",N,N],[4,"BN_CTX","","",N,N],[4,"BN_GENCB","","",N,N],[4,"EVP_CIPHER_CTX","","",N,N],[4,"EVP_MD","","",N,N],[4,"EVP_PKEY_ASN1_METHOD","","",N,N],[4,"EVP_PKEY_CTX","","",N,N],[4,"DH_METHOD","","",N,N],[4,"DSA_METHOD","","",N,N],[4,"RSA_METHOD","","",N,N],[4,"EC_KEY","","",N,N],[4,"X509_CRL","","",N,N],[4,"X509_NAME","","",N,N],[4,"X509_STORE","","",N,N],[4,"X509_STORE_CTX","","",N,N],[4,"CONF","","",N,N],[4,"ENGINE","","",N,N],[4,"COMP_METHOD","","",N,N],[4,"OCSP_RESPONSE","","",N,N],[4,"PKCS12","","",N,N],[4,"SSL_METHOD","","",N,N],[4,"SSL_CIPHER","","",N,N],[4,"X509_NAME_ENTRY","","",N,N],[4,"X509_EXTENSION","","",N,N],[4,"CONF_METHOD","","",N,N],[5,"BIO_set_retry_read","","",N,N],[5,"BIO_set_retry_write","","",N,N],[5,"BIO_clear_retry_flags","","",N,N],[5,"BIO_get_mem_data","","",N,N],[5,"ERR_GET_LIB","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_FUNC","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_REASON","","",N,[[["c_ulong"]],["c_int"]]],[5,"EVP_get_digestbynid","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_get_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_pss_saltlen","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_mgf1_md","","",N,N],[5,"SSL_CTX_set_mode","","",N,N],[5,"SSL_CTX_get_options","","",N,N],[5,"SSL_CTX_set_options","","",N,N],[5,"SSL_CTX_clear_options","","",N,N],[5,"SSL_CTX_set_tmp_dh","","",N,N],[5,"SSL_CTX_set_tmp_ecdh","","",N,N],[5,"SSL_set_tmp_dh","","",N,N],[5,"SSL_set_tmp_ecdh","","",N,N],[5,"SSL_CTX_add_extra_chain_cert","","",N,N],[5,"SSL_CTX_get_extra_chain_certs","","",N,N],[5,"SSL_CTX_set_session_cache_mode","","",N,N],[5,"SSL_CTX_set_read_ahead","","",N,N],[5,"SSL_session_reused","","",N,N],[5,"SSL_set_tlsext_host_name","","",N,N],[5,"SSL_set_tlsext_status_type","","",N,N],[5,"SSL_get_tlsext_status_ocsp_resp","","",N,N],[5,"SSL_set_tlsext_status_ocsp_resp","","",N,N],[5,"SSL_CTX_set_tlsext_servername_callback","","",N,N],[5,"SSL_CTX_set_tlsext_servername_arg","","",N,N],[5,"SSL_CTX_set_tlsext_status_cb","","",N,N],[5,"SSL_CTX_set_tlsext_status_arg","","",N,N],[5,"init","","",N,[[]]],[5,"AES_set_encrypt_key","","",N,N],[5,"AES_set_decrypt_key","","",N,N],[5,"AES_ige_encrypt","","",N,N],[5,"ASN1_OBJECT_free","","",N,N],[5,"ASN1_STRING_type_new","","",N,N],[5,"ASN1_STRING_data","","",N,N],[5,"ASN1_BIT_STRING_free","","",N,N],[5,"ASN1_STRING_free","","",N,N],[5,"ASN1_STRING_length","","",N,N],[5,"ASN1_GENERALIZEDTIME_free","","",N,N],[5,"ASN1_GENERALIZEDTIME_print","","",N,N],[5,"ASN1_TIME_free","","",N,N],[5,"ASN1_TIME_print","","",N,N],[5,"ASN1_INTEGER_free","","",N,N],[5,"ASN1_INTEGER_get","","",N,N],[5,"ASN1_INTEGER_set","","",N,N],[5,"BN_to_ASN1_INTEGER","","",N,N],[5,"ASN1_INTEGER_to_BN","","",N,N],[5,"ASN1_STRING_to_UTF8","","",N,N],[5,"BIO_set_flags","","",N,N],[5,"BIO_clear_flags","","",N,N],[5,"BIO_s_file","","",N,N],[5,"BIO_new","","",N,N],[5,"BIO_new_fp","","",N,N],[5,"BIO_write","","",N,N],[5,"BIO_read","","",N,N],[5,"BIO_ctrl","","",N,N],[5,"BIO_free_all","","",N,N],[5,"BIO_s_mem","","",N,N],[5,"BIO_new_mem_buf","","",N,N],[5,"BIO_new_socket","","",N,N],[5,"BN_CTX_new","","",N,N],[5,"BN_CTX_free","","",N,N],[5,"BN_rand","","",N,N],[5,"BN_pseudo_rand","","",N,N],[5,"BN_rand_range","","",N,N],[5,"BN_pseudo_rand_range","","",N,N],[5,"BN_new","","",N,N],[5,"BN_num_bits","","",N,N],[5,"BN_clear_free","","",N,N],[5,"BN_bin2bn","","",N,N],[5,"BN_bn2bin","","",N,N],[5,"BN_sub","","",N,N],[5,"BN_add","","",N,N],[5,"BN_mul","","",N,N],[5,"BN_sqr","","",N,N],[5,"BN_set_negative","","",N,N],[5,"BN_div","","",N,N],[5,"BN_nnmod","","",N,N],[5,"BN_mod_add","","",N,N],[5,"BN_mod_sub","","",N,N],[5,"BN_mod_mul","","",N,N],[5,"BN_mod_sqr","","",N,N],[5,"BN_mod_word","","",N,N],[5,"BN_div_word","","",N,N],[5,"BN_mul_word","","",N,N],[5,"BN_add_word","","",N,N],[5,"BN_sub_word","","",N,N],[5,"BN_set_word","","",N,N],[5,"BN_cmp","","",N,N],[5,"BN_free","","",N,N],[5,"BN_is_bit_set","","",N,N],[5,"BN_lshift","","",N,N],[5,"BN_lshift1","","",N,N],[5,"BN_exp","","",N,N],[5,"BN_mod_exp","","",N,N],[5,"BN_mask_bits","","",N,N],[5,"BN_rshift","","",N,N],[5,"BN_rshift1","","",N,N],[5,"BN_bn2hex","","",N,N],[5,"BN_bn2dec","","",N,N],[5,"BN_hex2bn","","",N,N],[5,"BN_dec2bn","","",N,N],[5,"BN_gcd","","",N,N],[5,"BN_mod_inverse","","",N,N],[5,"BN_clear","","",N,N],[5,"BN_dup","","",N,N],[5,"BN_ucmp","","",N,N],[5,"BN_set_bit","","",N,N],[5,"BN_clear_bit","","",N,N],[5,"BN_generate_prime_ex","","",N,N],[5,"BN_is_prime_ex","","",N,N],[5,"BN_is_prime_fasttest_ex","","",N,N],[5,"get_rfc2409_prime_768","","",N,N],[5,"get_rfc2409_prime_1024","","",N,N],[5,"get_rfc3526_prime_1536","","",N,N],[5,"get_rfc3526_prime_2048","","",N,N],[5,"get_rfc3526_prime_3072","","",N,N],[5,"get_rfc3526_prime_4096","","",N,N],[5,"get_rfc3526_prime_6144","","",N,N],[5,"get_rfc3526_prime_8192","","",N,N],[5,"CMS_ContentInfo_free","","",N,N],[5,"i2d_CMS_ContentInfo","","",N,N],[5,"SMIME_read_CMS","","",N,N],[5,"CMS_sign","","",N,N],[5,"CMS_decrypt","","",N,N],[5,"NCONF_new","","",N,N],[5,"NCONF_default","","",N,N],[5,"NCONF_free","","",N,N],[5,"SSLeay","","",N,N],[5,"SSLeay_version","","",N,N],[5,"CRYPTO_num_locks","","",N,N],[5,"CRYPTO_set_locking_callback","","",N,N],[5,"CRYPTO_set_id_callback","","",N,N],[5,"CRYPTO_add_lock","","",N,N],[5,"CRYPTO_malloc","","",N,N],[5,"CRYPTO_free","","",N,N],[5,"FIPS_mode","","",N,N],[5,"FIPS_mode_set","","",N,N],[5,"CRYPTO_memcmp","","",N,N],[5,"DH_new","","",N,N],[5,"DH_free","","",N,N],[5,"d2i_DHparams","","",N,N],[5,"i2d_DHparams","","",N,N],[5,"DSA_new","","",N,N],[5,"DSA_free","","",N,N],[5,"DSA_size","","",N,N],[5,"DSA_sign","","",N,N],[5,"DSA_verify","","",N,N],[5,"d2i_DSAPublicKey","","",N,N],[5,"d2i_DSAPrivateKey","","",N,N],[5,"DSA_generate_parameters_ex","","",N,N],[5,"DSA_generate_key","","",N,N],[5,"i2d_DSAPublicKey","","",N,N],[5,"i2d_DSAPrivateKey","","",N,N],[5,"EC_GF2m_simple_method","","",N,N],[5,"EC_GROUP_new","","",N,N],[5,"EC_GROUP_free","","",N,N],[5,"EC_GROUP_get_order","","",N,N],[5,"EC_GROUP_set_asn1_flag","","",N,N],[5,"EC_GROUP_get_curve_GFp","","",N,N],[5,"EC_GROUP_get_curve_GF2m","","",N,N],[5,"EC_GROUP_get_degree","","",N,N],[5,"EC_GROUP_new_curve_GFp","","",N,N],[5,"EC_GROUP_new_curve_GF2m","","",N,N],[5,"EC_GROUP_new_by_curve_name","","",N,N],[5,"EC_POINT_new","","",N,N],[5,"EC_POINT_free","","",N,N],[5,"EC_POINT_get_affine_coordinates_GFp","","",N,N],[5,"EC_POINT_get_affine_coordinates_GF2m","","",N,N],[5,"EC_POINT_point2oct","","",N,N],[5,"EC_POINT_oct2point","","",N,N],[5,"EC_POINT_add","","",N,N],[5,"EC_POINT_invert","","",N,N],[5,"EC_POINT_cmp","","",N,N],[5,"EC_POINT_mul","","",N,N],[5,"EC_KEY_new","","",N,N],[5,"EC_KEY_new_by_curve_name","","",N,N],[5,"EC_KEY_free","","",N,N],[5,"EC_KEY_dup","","",N,N],[5,"EC_KEY_up_ref","","",N,N],[5,"EC_KEY_get0_group","","",N,N],[5,"EC_KEY_set_group","","",N,N],[5,"EC_KEY_get0_private_key","","",N,N],[5,"EC_KEY_set_private_key","","",N,N],[5,"EC_KEY_get0_public_key","","",N,N],[5,"EC_KEY_set_public_key","","",N,N],[5,"EC_KEY_generate_key","","",N,N],[5,"EC_KEY_check_key","","",N,N],[5,"EC_KEY_set_public_key_affine_coordinates","","",N,N],[5,"ECDSA_SIG_new","","",N,N],[5,"ECDSA_SIG_free","","",N,N],[5,"ECDSA_do_sign","","",N,N],[5,"ECDSA_do_verify","","",N,N],[5,"ERR_put_error","","",N,N],[5,"ERR_set_error_data","","",N,N],[5,"ERR_get_error","","",N,N],[5,"ERR_get_error_line_data","","",N,N],[5,"ERR_peek_last_error","","",N,N],[5,"ERR_clear_error","","",N,N],[5,"ERR_lib_error_string","","",N,N],[5,"ERR_func_error_string","","",N,N],[5,"ERR_reason_error_string","","",N,N],[5,"ERR_load_strings","","",N,N],[5,"ERR_load_crypto_strings","","",N,N],[5,"ERR_get_next_error_library","","",N,N],[5,"EVP_MD_size","","",N,N],[5,"EVP_MD_CTX_create","","",N,N],[5,"EVP_MD_CTX_destroy","","",N,N],[5,"EVP_DigestInit_ex","","",N,N],[5,"EVP_DigestUpdate","","",N,N],[5,"EVP_DigestFinal_ex","","",N,N],[5,"EVP_DigestInit","","",N,N],[5,"EVP_DigestFinal","","",N,N],[5,"EVP_BytesToKey","","",N,N],[5,"EVP_CipherInit","","",N,N],[5,"EVP_CipherInit_ex","","",N,N],[5,"EVP_CipherUpdate","","",N,N],[5,"EVP_CipherFinal","","",N,N],[5,"EVP_DigestSignInit","","",N,N],[5,"EVP_DigestSignFinal","","",N,N],[5,"EVP_DigestVerifyInit","","",N,N],[5,"EVP_DigestVerifyFinal","","",N,N],[5,"EVP_CIPHER_CTX_new","","",N,N],[5,"EVP_CIPHER_CTX_free","","",N,N],[5,"EVP_MD_CTX_copy_ex","","",N,N],[5,"EVP_CIPHER_CTX_set_key_length","","",N,N],[5,"EVP_CIPHER_CTX_set_padding","","",N,N],[5,"EVP_CIPHER_CTX_ctrl","","",N,N],[5,"EVP_md5","","",N,N],[5,"EVP_sha1","","",N,N],[5,"EVP_sha224","","",N,N],[5,"EVP_sha256","","",N,N],[5,"EVP_sha384","","",N,N],[5,"EVP_sha512","","",N,N],[5,"EVP_ripemd160","","",N,N],[5,"EVP_des_ecb","","",N,N],[5,"EVP_des_ede3","","",N,N],[5,"EVP_des_ede3_cbc","","",N,N],[5,"EVP_des_cbc","","",N,N],[5,"EVP_rc4","","",N,N],[5,"EVP_bf_ecb","","",N,N],[5,"EVP_bf_cbc","","",N,N],[5,"EVP_bf_cfb64","","",N,N],[5,"EVP_bf_ofb","","",N,N],[5,"EVP_aes_128_ecb","","",N,N],[5,"EVP_aes_128_cbc","","",N,N],[5,"EVP_aes_128_cfb1","","",N,N],[5,"EVP_aes_128_cfb8","","",N,N],[5,"EVP_aes_128_cfb128","","",N,N],[5,"EVP_aes_128_ctr","","",N,N],[5,"EVP_aes_128_ccm","","",N,N],[5,"EVP_aes_128_gcm","","",N,N],[5,"EVP_aes_128_xts","","",N,N],[5,"EVP_aes_256_ecb","","",N,N],[5,"EVP_aes_256_cbc","","",N,N],[5,"EVP_aes_256_cfb1","","",N,N],[5,"EVP_aes_256_cfb8","","",N,N],[5,"EVP_aes_256_cfb128","","",N,N],[5,"EVP_aes_256_ctr","","",N,N],[5,"EVP_aes_256_ccm","","",N,N],[5,"EVP_aes_256_gcm","","",N,N],[5,"EVP_aes_256_xts","","",N,N],[5,"OPENSSL_add_all_algorithms_noconf","","",N,N],[5,"EVP_get_digestbyname","","",N,N],[5,"EVP_get_cipherbyname","","",N,N],[5,"EVP_PKEY_id","","",N,N],[5,"EVP_PKEY_bits","","",N,N],[5,"EVP_PKEY_assign","","",N,N],[5,"EVP_PKEY_set1_RSA","","",N,N],[5,"EVP_PKEY_get1_RSA","","",N,N],[5,"EVP_PKEY_get1_DSA","","",N,N],[5,"EVP_PKEY_get1_DH","","",N,N],[5,"EVP_PKEY_get1_EC_KEY","","",N,N],[5,"EVP_PKEY_new","","",N,N],[5,"EVP_PKEY_free","","",N,N],[5,"d2i_AutoPrivateKey","","",N,N],[5,"EVP_PKEY_cmp","","",N,N],[5,"EVP_PKEY_copy_parameters","","",N,N],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",N,N],[5,"PKCS5_PBKDF2_HMAC","","",N,N],[5,"EVP_PKEY_CTX_new","","",N,N],[5,"EVP_PKEY_CTX_new_id","","",N,N],[5,"EVP_PKEY_CTX_free","","",N,N],[5,"EVP_PKEY_CTX_ctrl","","",N,N],[5,"EVP_PKEY_new_mac_key","","",N,N],[5,"EVP_PKEY_derive_init","","",N,N],[5,"EVP_PKEY_derive_set_peer","","",N,N],[5,"EVP_PKEY_derive","","",N,N],[5,"EVP_PKEY_keygen_init","","",N,N],[5,"EVP_PKEY_keygen","","",N,N],[5,"HMAC_CTX_init","","",N,N],[5,"HMAC_CTX_cleanup","","",N,N],[5,"HMAC_Init_ex","","",N,N],[5,"HMAC_Update","","",N,N],[5,"HMAC_Final","","",N,N],[5,"HMAC_CTX_copy","","",N,N],[5,"OBJ_nid2ln","","",N,N],[5,"OBJ_nid2sn","","",N,N],[5,"OBJ_obj2nid","","",N,N],[5,"OBJ_obj2txt","","",N,N],[5,"OBJ_find_sigid_algs","","",N,N],[5,"OCSP_cert_to_id","","",N,N],[5,"OCSP_request_add0_id","","",N,N],[5,"OCSP_resp_find_status","","",N,N],[5,"OCSP_check_validity","","",N,N],[5,"OCSP_response_status","","",N,N],[5,"OCSP_response_get1_basic","","",N,N],[5,"OCSP_response_create","","",N,N],[5,"OCSP_BASICRESP_new","","",N,N],[5,"OCSP_BASICRESP_free","","",N,N],[5,"OCSP_RESPONSE_new","","",N,N],[5,"OCSP_RESPONSE_free","","",N,N],[5,"i2d_OCSP_RESPONSE","","",N,N],[5,"d2i_OCSP_RESPONSE","","",N,N],[5,"OCSP_ONEREQ_free","","",N,N],[5,"OCSP_CERTID_free","","",N,N],[5,"OCSP_REQUEST_new","","",N,N],[5,"OCSP_REQUEST_free","","",N,N],[5,"i2d_OCSP_REQUEST","","",N,N],[5,"d2i_OCSP_REQUEST","","",N,N],[5,"OCSP_basic_verify","","",N,N],[5,"PEM_read_bio_X509","","",N,N],[5,"PEM_write_bio_X509","","",N,N],[5,"PEM_read_bio_X509_REQ","","",N,N],[5,"PEM_write_bio_X509_REQ","","",N,N],[5,"PEM_read_bio_RSAPrivateKey","","",N,N],[5,"PEM_write_bio_RSAPrivateKey","","",N,N],[5,"PEM_read_bio_RSAPublicKey","","",N,N],[5,"PEM_write_bio_RSAPublicKey","","",N,N],[5,"PEM_read_bio_RSA_PUBKEY","","",N,N],[5,"PEM_write_bio_RSA_PUBKEY","","",N,N],[5,"PEM_read_bio_DSAPrivateKey","","",N,N],[5,"PEM_write_bio_DSAPrivateKey","","",N,N],[5,"PEM_read_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_DSA_PUBKEY","","",N,N],[5,"PEM_read_bio_ECPrivateKey","","",N,N],[5,"PEM_write_bio_ECPrivateKey","","",N,N],[5,"PEM_read_bio_DHparams","","",N,N],[5,"PEM_write_bio_DHparams","","",N,N],[5,"PEM_read_bio_PrivateKey","","",N,N],[5,"PEM_write_bio_PrivateKey","","",N,N],[5,"PEM_read_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_PKCS8PrivateKey","","",N,N],[5,"d2i_PKCS8PrivateKey_bio","","",N,N],[5,"PKCS12_free","","",N,N],[5,"i2d_PKCS12","","",N,N],[5,"d2i_PKCS12","","",N,N],[5,"PKCS12_parse","","",N,N],[5,"PKCS12_create","","",N,N],[5,"i2d_PKCS12_bio","","",N,N],[5,"RAND_bytes","","",N,N],[5,"RAND_status","","",N,N],[5,"RSA_new","","",N,N],[5,"RSA_size","","",N,N],[5,"RSA_generate_key","","",N,N],[5,"RSA_generate_key_ex","","",N,N],[5,"RSA_public_encrypt","","",N,N],[5,"RSA_private_encrypt","","",N,N],[5,"RSA_public_decrypt","","",N,N],[5,"RSA_private_decrypt","","",N,N],[5,"RSA_free","","",N,N],[5,"RSA_up_ref","","",N,N],[5,"i2d_RSAPublicKey","","",N,N],[5,"d2i_RSAPublicKey","","",N,N],[5,"i2d_RSAPrivateKey","","",N,N],[5,"d2i_RSAPrivateKey","","",N,N],[5,"RSA_sign","","",N,N],[5,"RSA_verify","","",N,N],[5,"RSA_padding_check_PKCS1_type_2","","",N,N],[5,"SHA1_Init","","",N,N],[5,"SHA1_Update","","",N,N],[5,"SHA1_Final","","",N,N],[5,"SHA1","","",N,N],[5,"SHA224_Init","","",N,N],[5,"SHA224_Update","","",N,N],[5,"SHA224_Final","","",N,N],[5,"SHA224","","",N,N],[5,"SHA256_Init","","",N,N],[5,"SHA256_Update","","",N,N],[5,"SHA256_Final","","",N,N],[5,"SHA256","","",N,N],[5,"SHA384_Init","","",N,N],[5,"SHA384_Update","","",N,N],[5,"SHA384_Final","","",N,N],[5,"SHA384","","",N,N],[5,"SHA512_Init","","",N,N],[5,"SHA512_Update","","",N,N],[5,"SHA512_Final","","",N,N],[5,"SHA512","","",N,N],[5,"SSL_CTX_set_tlsext_use_srtp","","",N,N],[5,"SSL_set_tlsext_use_srtp","","",N,N],[5,"SSL_get_srtp_profiles","","",N,N],[5,"SSL_get_selected_srtp_profile","","",N,N],[5,"SSL_CTX_sess_set_new_cb","","",N,N],[5,"SSL_CTX_sess_set_remove_cb","","",N,N],[5,"SSL_CTX_sess_set_get_cb","","",N,N],[5,"SSL_CTX_set_cookie_generate_cb","","",N,N],[5,"SSL_CTX_set_cookie_verify_cb","","",N,N],[5,"SSL_CTX_set_next_protos_advertised_cb","","",N,N],[5,"SSL_CTX_set_next_proto_select_cb","","",N,N],[5,"SSL_get0_next_proto_negotiated","","",N,N],[5,"SSL_select_next_proto","","",N,N],[5,"SSL_CTX_set_psk_client_callback","","",N,N],[5,"SSL_CTX_set_psk_server_callback","","",N,N],[5,"SSL_get_finished","","",N,N],[5,"SSL_get_peer_finished","","",N,N],[5,"SSL_CTX_set_cipher_list","","",N,N],[5,"SSL_CTX_new","","",N,N],[5,"SSL_CTX_free","","",N,N],[5,"SSL_CTX_get_cert_store","","",N,N],[5,"SSL_get_current_cipher","","",N,N],[5,"SSL_CIPHER_get_bits","","",N,N],[5,"SSL_CIPHER_get_version","","",N,N],[5,"SSL_CIPHER_get_name","","",N,N],[5,"SSL_pending","","",N,N],[5,"SSL_set_bio","","",N,N],[5,"SSL_get_rbio","","",N,N],[5,"SSL_get_wbio","","",N,N],[5,"SSL_set_verify","","",N,N],[5,"SSL_CTX_use_PrivateKey","","",N,N],[5,"SSL_CTX_use_certificate","","",N,N],[5,"SSL_CTX_use_PrivateKey_file","","",N,N],[5,"SSL_CTX_use_certificate_file","","",N,N],[5,"SSL_CTX_use_certificate_chain_file","","",N,N],[5,"SSL_load_client_CA_file","","",N,N],[5,"SSL_load_error_strings","","",N,N],[5,"SSL_state_string","","",N,N],[5,"SSL_state_string_long","","",N,N],[5,"SSL_SESSION_get_id","","",N,N],[5,"SSL_SESSION_free","","",N,N],[5,"i2d_SSL_SESSION","","",N,N],[5,"SSL_set_session","","",N,N],[5,"d2i_SSL_SESSION","","",N,N],[5,"SSL_get_peer_certificate","","",N,N],[5,"SSL_get_peer_cert_chain","","",N,N],[5,"SSL_CTX_set_verify","","",N,N],[5,"SSL_CTX_set_verify_depth","","",N,N],[5,"SSL_CTX_check_private_key","","",N,N],[5,"SSL_CTX_set_session_id_context","","",N,N],[5,"SSL_new","","",N,N],[5,"SSL_free","","",N,N],[5,"SSL_accept","","",N,N],[5,"SSL_connect","","",N,N],[5,"SSL_read","","",N,N],[5,"SSL_write","","",N,N],[5,"SSL_ctrl","","",N,N],[5,"SSL_CTX_ctrl","","",N,N],[5,"SSL_CTX_callback_ctrl","","",N,N],[5,"SSLv3_method","","",N,N],[5,"SSLv23_method","","",N,N],[5,"TLSv1_method","","",N,N],[5,"TLSv1_1_method","","",N,N],[5,"TLSv1_2_method","","",N,N],[5,"DTLSv1_method","","",N,N],[5,"SSL_get_error","","",N,N],[5,"SSL_get_version","","",N,N],[5,"SSL_do_handshake","","",N,N],[5,"SSL_shutdown","","",N,N],[5,"SSL_CTX_set_client_CA_list","","",N,N],[5,"SSL_CTX_set_default_verify_paths","","",N,N],[5,"SSL_CTX_load_verify_locations","","",N,N],[5,"SSL_get_ssl_method","","",N,N],[5,"SSL_set_connect_state","","",N,N],[5,"SSL_set_accept_state","","",N,N],[5,"SSL_library_init","","",N,N],[5,"SSL_CIPHER_description","","",N,N],[5,"SSL_get_certificate","","",N,N],[5,"SSL_get_privatekey","","",N,N],[5,"SSL_set_shutdown","","",N,N],[5,"SSL_get_shutdown","","",N,N],[5,"SSL_version","","",N,N],[5,"SSL_get_session","","",N,N],[5,"SSL_get_SSL_CTX","","",N,N],[5,"SSL_set_SSL_CTX","","",N,N],[5,"SSL_get_verify_result","","",N,N],[5,"SSL_get_ex_new_index","","",N,N],[5,"SSL_set_ex_data","","",N,N],[5,"SSL_get_ex_data","","",N,N],[5,"SSL_CTX_get_ex_new_index","","",N,N],[5,"SSL_CTX_set_ex_data","","",N,N],[5,"SSL_CTX_get_ex_data","","",N,N],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",N,N],[5,"SSL_CTX_set_tmp_dh_callback","","",N,N],[5,"SSL_set_tmp_dh_callback","","",N,N],[5,"SSL_CTX_set_tmp_ecdh_callback","","",N,N],[5,"SSL_set_tmp_ecdh_callback","","",N,N],[5,"SSL_get_current_compression","","",N,N],[5,"SSL_COMP_get_name","","",N,N],[5,"sk_num","","",N,N],[5,"sk_value","","",N,N],[5,"sk_new_null","","",N,N],[5,"sk_free","","",N,N],[5,"sk_pop_free","","",N,N],[5,"sk_push","","",N,N],[5,"sk_pop","","",N,N],[5,"SSL_get_servername","","",N,N],[5,"SSL_export_keying_material","","",N,N],[5,"X509_verify_cert_error_string","","",N,N],[5,"X509_sign","","",N,N],[5,"X509_digest","","",N,N],[5,"X509_REQ_sign","","",N,N],[5,"i2d_X509_bio","","",N,N],[5,"i2d_X509_REQ_bio","","",N,N],[5,"i2d_PrivateKey_bio","","",N,N],[5,"i2d_PUBKEY_bio","","",N,N],[5,"i2d_PUBKEY","","",N,N],[5,"d2i_PUBKEY","","",N,N],[5,"d2i_RSA_PUBKEY","","",N,N],[5,"i2d_RSA_PUBKEY","","",N,N],[5,"d2i_DSA_PUBKEY","","",N,N],[5,"i2d_DSA_PUBKEY","","",N,N],[5,"i2d_PrivateKey","","",N,N],[5,"d2i_ECPrivateKey","","",N,N],[5,"i2d_ECPrivateKey","","",N,N],[5,"X509_gmtime_adj","","",N,N],[5,"X509_to_X509_REQ","","",N,N],[5,"X509_ALGOR_free","","",N,N],[5,"X509_REQ_new","","",N,N],[5,"X509_REQ_free","","",N,N],[5,"d2i_X509_REQ","","",N,N],[5,"i2d_X509_REQ","","",N,N],[5,"X509_EXTENSION_free","","",N,N],[5,"X509_NAME_ENTRY_free","","",N,N],[5,"X509_NAME_new","","",N,N],[5,"X509_NAME_free","","",N,N],[5,"X509_new","","",N,N],[5,"X509_free","","",N,N],[5,"i2d_X509","","",N,N],[5,"d2i_X509","","",N,N],[5,"X509_get_pubkey","","",N,N],[5,"X509_set_version","","",N,N],[5,"X509_set_serialNumber","","",N,N],[5,"X509_get_serialNumber","","",N,N],[5,"X509_set_issuer_name","","",N,N],[5,"X509_get_issuer_name","","",N,N],[5,"X509_set_subject_name","","",N,N],[5,"X509_get_subject_name","","",N,N],[5,"X509_set_notBefore","","",N,N],[5,"X509_set_notAfter","","",N,N],[5,"X509_REQ_set_version","","",N,N],[5,"X509_REQ_set_subject_name","","",N,N],[5,"X509_REQ_set_pubkey","","",N,N],[5,"X509_REQ_get_pubkey","","",N,N],[5,"X509_REQ_get_extensions","","",N,N],[5,"X509_REQ_add_extensions","","",N,N],[5,"X509_set_pubkey","","",N,N],[5,"X509_NAME_entry_count","","",N,N],[5,"X509_NAME_get_index_by_NID","","",N,N],[5,"X509_NAME_get_entry","","",N,N],[5,"X509_NAME_add_entry_by_NID","","",N,N],[5,"X509_NAME_ENTRY_get_object","","",N,N],[5,"X509_NAME_ENTRY_get_data","","",N,N],[5,"X509_NAME_add_entry_by_txt","","",N,N],[5,"X509_add_ext","","",N,N],[5,"X509_get_ext_d2i","","",N,N],[5,"X509_verify_cert","","",N,N],[5,"X509_STORE_new","","",N,N],[5,"X509_STORE_free","","",N,N],[5,"X509_STORE_CTX_new","","",N,N],[5,"X509_STORE_CTX_free","","",N,N],[5,"X509_STORE_CTX_init","","",N,N],[5,"X509_STORE_CTX_cleanup","","",N,N],[5,"X509_STORE_add_cert","","",N,N],[5,"X509_STORE_set_default_paths","","",N,N],[5,"X509_STORE_CTX_get_ex_data","","",N,N],[5,"X509_STORE_CTX_get_error","","",N,N],[5,"X509_STORE_CTX_set_error","","",N,N],[5,"X509_STORE_CTX_get_error_depth","","",N,N],[5,"X509_STORE_CTX_get_current_cert","","",N,N],[5,"X509_STORE_CTX_get_chain","","",N,N],[5,"GENERAL_NAME_free","","",N,N],[5,"X509V3_EXT_nconf_nid","","",N,N],[5,"X509V3_EXT_nconf","","",N,N],[5,"X509_check_issued","","",N,N],[5,"X509V3_set_nconf","","",N,N],[5,"X509V3_set_ctx","","",N,N],[5,"X509_get1_ocsp","","",N,N],[11,"clone","","",37,[[["self"]],["point_conversion_form_t"]]],[6,"bio_info_cb","","",N,N],[6,"BN_ULONG","","",N,N],[6,"CRYPTO_EX_new","","",N,N],[6,"CRYPTO_EX_dup","","",N,N],[6,"CRYPTO_EX_free","","",N,N],[6,"pem_password_cb","","",N,N],[6,"SHA_LONG","","",N,N],[6,"SHA_LONG64","","",N,N],[6,"tls_session_ticket_ext_cb_fn","","",N,N],[6,"tls_session_secret_cb_fn","","",N,N],[6,"GEN_SESSION_CB","","",N,N],[6,"PasswordCallback","","",N,N],[17,"AES_ENCRYPT","","",N,N],[17,"AES_DECRYPT","","",N,N],[17,"AES_MAXNR","","",N,N],[17,"AES_BLOCK_SIZE","","",N,N],[17,"V_ASN1_UTCTIME","","",N,N],[17,"V_ASN1_GENERALIZEDTIME","","",N,N],[17,"MBSTRING_FLAG","","",N,N],[17,"MBSTRING_UTF8","","",N,N],[17,"MBSTRING_ASC","","",N,N],[17,"MBSTRING_BMP","","",N,N],[17,"MBSTRING_UNIV","","",N,N],[17,"BIO_TYPE_NONE","","",N,N],[17,"BIO_CTRL_EOF","","",N,N],[17,"BIO_CTRL_INFO","","",N,N],[17,"BIO_CTRL_FLUSH","","",N,N],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",N,N],[17,"BIO_FLAGS_READ","","",N,N],[17,"BIO_FLAGS_WRITE","","",N,N],[17,"BIO_FLAGS_IO_SPECIAL","","",N,N],[17,"BIO_FLAGS_RWS","","",N,N],[17,"BIO_FLAGS_SHOULD_RETRY","","",N,N],[17,"CMS_TEXT","","",N,N],[17,"CMS_NOCERTS","","",N,N],[17,"CMS_NO_CONTENT_VERIFY","","",N,N],[17,"CMS_NO_ATTR_VERIFY","","",N,N],[17,"CMS_NOSIGS","","",N,N],[17,"CMS_NOINTERN","","",N,N],[17,"CMS_NO_SIGNER_CERT_VERIFY","","",N,N],[17,"CMS_NOVERIFY","","",N,N],[17,"CMS_DETACHED","","",N,N],[17,"CMS_BINARY","","",N,N],[17,"CMS_NOATTR","","",N,N],[17,"CMS_NOSMIMECAP","","",N,N],[17,"CMS_NOOLDMIMETYPE","","",N,N],[17,"CMS_CRLFEOL","","",N,N],[17,"CMS_STREAM","","",N,N],[17,"CMS_NOCRL","","",N,N],[17,"CMS_PARTIAL","","",N,N],[17,"CMS_REUSE_DIGEST","","",N,N],[17,"CMS_USE_KEYID","","",N,N],[17,"CMS_DEBUG_DECRYPT","","",N,N],[17,"CRYPTO_LOCK_X509","","",N,N],[17,"CRYPTO_LOCK_SSL_CTX","","",N,N],[17,"CRYPTO_LOCK_SSL_SESSION","","",N,N],[17,"SSLEAY_VERSION","","",N,N],[17,"SSLEAY_CFLAGS","","",N,N],[17,"SSLEAY_BUILT_ON","","",N,N],[17,"SSLEAY_PLATFORM","","",N,N],[17,"SSLEAY_DIR","","",N,N],[17,"CRYPTO_LOCK","","",N,N],[17,"DTLS1_COOKIE_LENGTH","","",N,N],[17,"OPENSSL_EC_NAMED_CURVE","","",N,N],[17,"ERR_TXT_MALLOCED","","",N,N],[17,"ERR_TXT_STRING","","",N,N],[17,"ERR_LIB_PEM","","",N,N],[17,"EVP_MAX_MD_SIZE","","",N,N],[17,"PKCS5_SALT_LEN","","",N,N],[17,"PKCS12_DEFAULT_ITER","","",N,N],[17,"EVP_PKEY_RSA","","",N,N],[17,"EVP_PKEY_DSA","","",N,N],[17,"EVP_PKEY_DH","","",N,N],[17,"EVP_PKEY_EC","","",N,N],[17,"EVP_PKEY_HMAC","","",N,N],[17,"EVP_PKEY_CMAC","","",N,N],[17,"EVP_CTRL_GCM_SET_IVLEN","","",N,N],[17,"EVP_CTRL_GCM_GET_TAG","","",N,N],[17,"EVP_CTRL_GCM_SET_TAG","","",N,N],[17,"EVP_PKEY_OP_KEYGEN","","",N,N],[17,"EVP_PKEY_OP_SIGN","","",N,N],[17,"EVP_PKEY_OP_VERIFY","","",N,N],[17,"EVP_PKEY_OP_VERIFYRECOVER","","",N,N],[17,"EVP_PKEY_OP_SIGNCTX","","",N,N],[17,"EVP_PKEY_OP_VERIFYCTX","","",N,N],[17,"EVP_PKEY_OP_ENCRYPT","","",N,N],[17,"EVP_PKEY_OP_DECRYPT","","",N,N],[17,"EVP_PKEY_OP_TYPE_SIG","","",N,N],[17,"EVP_PKEY_OP_TYPE_CRYPT","","",N,N],[17,"EVP_PKEY_CTRL_SET_MAC_KEY","","",N,N],[17,"EVP_PKEY_CTRL_CIPHER","","",N,N],[17,"EVP_PKEY_ALG_CTRL","","",N,N],[17,"NID_undef","","",N,N],[17,"NID_itu_t","","",N,N],[17,"NID_ccitt","","",N,N],[17,"NID_iso","","",N,N],[17,"NID_joint_iso_itu_t","","",N,N],[17,"NID_joint_iso_ccitt","","",N,N],[17,"NID_member_body","","",N,N],[17,"NID_identified_organization","","",N,N],[17,"NID_hmac_md5","","",N,N],[17,"NID_hmac_sha1","","",N,N],[17,"NID_certicom_arc","","",N,N],[17,"NID_international_organizations","","",N,N],[17,"NID_wap","","",N,N],[17,"NID_wap_wsg","","",N,N],[17,"NID_selected_attribute_types","","",N,N],[17,"NID_clearance","","",N,N],[17,"NID_ISO_US","","",N,N],[17,"NID_X9_57","","",N,N],[17,"NID_X9cm","","",N,N],[17,"NID_dsa","","",N,N],[17,"NID_dsaWithSHA1","","",N,N],[17,"NID_ansi_X9_62","","",N,N],[17,"NID_X9_62_prime_field","","",N,N],[17,"NID_X9_62_characteristic_two_field","","",N,N],[17,"NID_X9_62_id_characteristic_two_basis","","",N,N],[17,"NID_X9_62_onBasis","","",N,N],[17,"NID_X9_62_tpBasis","","",N,N],[17,"NID_X9_62_ppBasis","","",N,N],[17,"NID_X9_62_id_ecPublicKey","","",N,N],[17,"NID_X9_62_c2pnb163v1","","",N,N],[17,"NID_X9_62_c2pnb163v2","","",N,N],[17,"NID_X9_62_c2pnb163v3","","",N,N],[17,"NID_X9_62_c2pnb176v1","","",N,N],[17,"NID_X9_62_c2tnb191v1","","",N,N],[17,"NID_X9_62_c2tnb191v2","","",N,N],[17,"NID_X9_62_c2tnb191v3","","",N,N],[17,"NID_X9_62_c2onb191v4","","",N,N],[17,"NID_X9_62_c2onb191v5","","",N,N],[17,"NID_X9_62_c2pnb208w1","","",N,N],[17,"NID_X9_62_c2tnb239v1","","",N,N],[17,"NID_X9_62_c2tnb239v2","","",N,N],[17,"NID_X9_62_c2tnb239v3","","",N,N],[17,"NID_X9_62_c2onb239v4","","",N,N],[17,"NID_X9_62_c2onb239v5","","",N,N],[17,"NID_X9_62_c2pnb272w1","","",N,N],[17,"NID_X9_62_c2pnb304w1","","",N,N],[17,"NID_X9_62_c2tnb359v1","","",N,N],[17,"NID_X9_62_c2pnb368w1","","",N,N],[17,"NID_X9_62_c2tnb431r1","","",N,N],[17,"NID_X9_62_prime192v1","","",N,N],[17,"NID_X9_62_prime192v2","","",N,N],[17,"NID_X9_62_prime192v3","","",N,N],[17,"NID_X9_62_prime239v1","","",N,N],[17,"NID_X9_62_prime239v2","","",N,N],[17,"NID_X9_62_prime239v3","","",N,N],[17,"NID_X9_62_prime256v1","","",N,N],[17,"NID_ecdsa_with_SHA1","","",N,N],[17,"NID_ecdsa_with_Recommended","","",N,N],[17,"NID_ecdsa_with_Specified","","",N,N],[17,"NID_ecdsa_with_SHA224","","",N,N],[17,"NID_ecdsa_with_SHA256","","",N,N],[17,"NID_ecdsa_with_SHA384","","",N,N],[17,"NID_ecdsa_with_SHA512","","",N,N],[17,"NID_secp112r1","","",N,N],[17,"NID_secp112r2","","",N,N],[17,"NID_secp128r1","","",N,N],[17,"NID_secp128r2","","",N,N],[17,"NID_secp160k1","","",N,N],[17,"NID_secp160r1","","",N,N],[17,"NID_secp160r2","","",N,N],[17,"NID_secp192k1","","",N,N],[17,"NID_secp224k1","","",N,N],[17,"NID_secp224r1","","",N,N],[17,"NID_secp256k1","","",N,N],[17,"NID_secp384r1","","",N,N],[17,"NID_secp521r1","","",N,N],[17,"NID_sect113r1","","",N,N],[17,"NID_sect113r2","","",N,N],[17,"NID_sect131r1","","",N,N],[17,"NID_sect131r2","","",N,N],[17,"NID_sect163k1","","",N,N],[17,"NID_sect163r1","","",N,N],[17,"NID_sect163r2","","",N,N],[17,"NID_sect193r1","","",N,N],[17,"NID_sect193r2","","",N,N],[17,"NID_sect233k1","","",N,N],[17,"NID_sect233r1","","",N,N],[17,"NID_sect239k1","","",N,N],[17,"NID_sect283k1","","",N,N],[17,"NID_sect283r1","","",N,N],[17,"NID_sect409k1","","",N,N],[17,"NID_sect409r1","","",N,N],[17,"NID_sect571k1","","",N,N],[17,"NID_sect571r1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls3","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls4","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls5","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls6","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls7","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls8","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls9","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls10","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls11","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls12","","",N,N],[17,"NID_cast5_cbc","","",N,N],[17,"NID_cast5_ecb","","",N,N],[17,"NID_cast5_cfb64","","",N,N],[17,"NID_cast5_ofb64","","",N,N],[17,"NID_pbeWithMD5AndCast5_CBC","","",N,N],[17,"NID_id_PasswordBasedMAC","","",N,N],[17,"NID_id_DHBasedMac","","",N,N],[17,"NID_rsadsi","","",N,N],[17,"NID_pkcs","","",N,N],[17,"NID_pkcs1","","",N,N],[17,"NID_rsaEncryption","","",N,N],[17,"NID_md2WithRSAEncryption","","",N,N],[17,"NID_md4WithRSAEncryption","","",N,N],[17,"NID_md5WithRSAEncryption","","",N,N],[17,"NID_sha1WithRSAEncryption","","",N,N],[17,"NID_rsaesOaep","","",N,N],[17,"NID_mgf1","","",N,N],[17,"NID_rsassaPss","","",N,N],[17,"NID_sha256WithRSAEncryption","","",N,N],[17,"NID_sha384WithRSAEncryption","","",N,N],[17,"NID_sha512WithRSAEncryption","","",N,N],[17,"NID_sha224WithRSAEncryption","","",N,N],[17,"NID_pkcs3","","",N,N],[17,"NID_dhKeyAgreement","","",N,N],[17,"NID_pkcs5","","",N,N],[17,"NID_pbeWithMD2AndDES_CBC","","",N,N],[17,"NID_pbeWithMD5AndDES_CBC","","",N,N],[17,"NID_pbeWithMD2AndRC2_CBC","","",N,N],[17,"NID_pbeWithMD5AndRC2_CBC","","",N,N],[17,"NID_pbeWithSHA1AndDES_CBC","","",N,N],[17,"NID_pbeWithSHA1AndRC2_CBC","","",N,N],[17,"NID_id_pbkdf2","","",N,N],[17,"NID_pbes2","","",N,N],[17,"NID_pbmac1","","",N,N],[17,"NID_pkcs7","","",N,N],[17,"NID_pkcs7_data","","",N,N],[17,"NID_pkcs7_signed","","",N,N],[17,"NID_pkcs7_enveloped","","",N,N],[17,"NID_pkcs7_signedAndEnveloped","","",N,N],[17,"NID_pkcs7_digest","","",N,N],[17,"NID_pkcs7_encrypted","","",N,N],[17,"NID_pkcs9","","",N,N],[17,"NID_pkcs9_emailAddress","","",N,N],[17,"NID_pkcs9_unstructuredName","","",N,N],[17,"NID_pkcs9_contentType","","",N,N],[17,"NID_pkcs9_messageDigest","","",N,N],[17,"NID_pkcs9_signingTime","","",N,N],[17,"NID_pkcs9_countersignature","","",N,N],[17,"NID_pkcs9_challengePassword","","",N,N],[17,"NID_pkcs9_unstructuredAddress","","",N,N],[17,"NID_pkcs9_extCertAttributes","","",N,N],[17,"NID_ext_req","","",N,N],[17,"NID_SMIMECapabilities","","",N,N],[17,"NID_SMIME","","",N,N],[17,"NID_id_smime_mod","","",N,N],[17,"NID_id_smime_ct","","",N,N],[17,"NID_id_smime_aa","","",N,N],[17,"NID_id_smime_alg","","",N,N],[17,"NID_id_smime_cd","","",N,N],[17,"NID_id_smime_spq","","",N,N],[17,"NID_id_smime_cti","","",N,N],[17,"NID_id_smime_mod_cms","","",N,N],[17,"NID_id_smime_mod_ess","","",N,N],[17,"NID_id_smime_mod_oid","","",N,N],[17,"NID_id_smime_mod_msg_v3","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_88","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_97","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",N,N],[17,"NID_id_smime_ct_receipt","","",N,N],[17,"NID_id_smime_ct_authData","","",N,N],[17,"NID_id_smime_ct_publishCert","","",N,N],[17,"NID_id_smime_ct_TSTInfo","","",N,N],[17,"NID_id_smime_ct_TDTInfo","","",N,N],[17,"NID_id_smime_ct_contentInfo","","",N,N],[17,"NID_id_smime_ct_DVCSRequestData","","",N,N],[17,"NID_id_smime_ct_DVCSResponseData","","",N,N],[17,"NID_id_smime_ct_compressedData","","",N,N],[17,"NID_id_ct_asciiTextWithCRLF","","",N,N],[17,"NID_id_smime_aa_receiptRequest","","",N,N],[17,"NID_id_smime_aa_securityLabel","","",N,N],[17,"NID_id_smime_aa_mlExpandHistory","","",N,N],[17,"NID_id_smime_aa_contentHint","","",N,N],[17,"NID_id_smime_aa_msgSigDigest","","",N,N],[17,"NID_id_smime_aa_encapContentType","","",N,N],[17,"NID_id_smime_aa_contentIdentifier","","",N,N],[17,"NID_id_smime_aa_macValue","","",N,N],[17,"NID_id_smime_aa_equivalentLabels","","",N,N],[17,"NID_id_smime_aa_contentReference","","",N,N],[17,"NID_id_smime_aa_encrypKeyPref","","",N,N],[17,"NID_id_smime_aa_signingCertificate","","",N,N],[17,"NID_id_smime_aa_smimeEncryptCerts","","",N,N],[17,"NID_id_smime_aa_timeStampToken","","",N,N],[17,"NID_id_smime_aa_ets_sigPolicyId","","",N,N],[17,"NID_id_smime_aa_ets_commitmentType","","",N,N],[17,"NID_id_smime_aa_ets_signerLocation","","",N,N],[17,"NID_id_smime_aa_ets_signerAttr","","",N,N],[17,"NID_id_smime_aa_ets_otherSigCert","","",N,N],[17,"NID_id_smime_aa_ets_contentTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_CertificateRefs","","",N,N],[17,"NID_id_smime_aa_ets_RevocationRefs","","",N,N],[17,"NID_id_smime_aa_ets_certValues","","",N,N],[17,"NID_id_smime_aa_ets_revocationValues","","",N,N],[17,"NID_id_smime_aa_ets_escTimeStamp","","",N,N],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",N,N],[17,"NID_id_smime_aa_signatureType","","",N,N],[17,"NID_id_smime_aa_dvcs_dvc","","",N,N],[17,"NID_id_smime_alg_ESDHwith3DES","","",N,N],[17,"NID_id_smime_alg_ESDHwithRC2","","",N,N],[17,"NID_id_smime_alg_3DESwrap","","",N,N],[17,"NID_id_smime_alg_RC2wrap","","",N,N],[17,"NID_id_smime_alg_ESDH","","",N,N],[17,"NID_id_smime_alg_CMS3DESwrap","","",N,N],[17,"NID_id_smime_alg_CMSRC2wrap","","",N,N],[17,"NID_id_alg_PWRI_KEK","","",N,N],[17,"NID_id_smime_cd_ldap","","",N,N],[17,"NID_id_smime_spq_ets_sqt_uri","","",N,N],[17,"NID_id_smime_spq_ets_sqt_unotice","","",N,N],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",N,N],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",N,N],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",N,N],[17,"NID_id_smime_cti_ets_proofOfSender","","",N,N],[17,"NID_id_smime_cti_ets_proofOfApproval","","",N,N],[17,"NID_id_smime_cti_ets_proofOfCreation","","",N,N],[17,"NID_friendlyName","","",N,N],[17,"NID_localKeyID","","",N,N],[17,"NID_ms_csp_name","","",N,N],[17,"NID_LocalKeySet","","",N,N],[17,"NID_x509Certificate","","",N,N],[17,"NID_sdsiCertificate","","",N,N],[17,"NID_x509Crl","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",N,N],[17,"NID_keyBag","","",N,N],[17,"NID_pkcs8ShroudedKeyBag","","",N,N],[17,"NID_certBag","","",N,N],[17,"NID_crlBag","","",N,N],[17,"NID_secretBag","","",N,N],[17,"NID_safeContentsBag","","",N,N],[17,"NID_md2","","",N,N],[17,"NID_md4","","",N,N],[17,"NID_md5","","",N,N],[17,"NID_md5_sha1","","",N,N],[17,"NID_hmacWithMD5","","",N,N],[17,"NID_hmacWithSHA1","","",N,N],[17,"NID_hmacWithSHA224","","",N,N],[17,"NID_hmacWithSHA256","","",N,N],[17,"NID_hmacWithSHA384","","",N,N],[17,"NID_hmacWithSHA512","","",N,N],[17,"NID_rc2_cbc","","",N,N],[17,"NID_rc2_ecb","","",N,N],[17,"NID_rc2_cfb64","","",N,N],[17,"NID_rc2_ofb64","","",N,N],[17,"NID_rc2_40_cbc","","",N,N],[17,"NID_rc2_64_cbc","","",N,N],[17,"NID_rc4","","",N,N],[17,"NID_rc4_40","","",N,N],[17,"NID_des_ede3_cbc","","",N,N],[17,"NID_rc5_cbc","","",N,N],[17,"NID_rc5_ecb","","",N,N],[17,"NID_rc5_cfb64","","",N,N],[17,"NID_rc5_ofb64","","",N,N],[17,"NID_ms_ext_req","","",N,N],[17,"NID_ms_code_ind","","",N,N],[17,"NID_ms_code_com","","",N,N],[17,"NID_ms_ctl_sign","","",N,N],[17,"NID_ms_sgc","","",N,N],[17,"NID_ms_efs","","",N,N],[17,"NID_ms_smartcard_login","","",N,N],[17,"NID_ms_upn","","",N,N],[17,"NID_idea_cbc","","",N,N],[17,"NID_idea_ecb","","",N,N],[17,"NID_idea_cfb64","","",N,N],[17,"NID_idea_ofb64","","",N,N],[17,"NID_bf_cbc","","",N,N],[17,"NID_bf_ecb","","",N,N],[17,"NID_bf_cfb64","","",N,N],[17,"NID_bf_ofb64","","",N,N],[17,"NID_id_pkix","","",N,N],[17,"NID_id_pkix_mod","","",N,N],[17,"NID_id_pe","","",N,N],[17,"NID_id_qt","","",N,N],[17,"NID_id_kp","","",N,N],[17,"NID_id_it","","",N,N],[17,"NID_id_pkip","","",N,N],[17,"NID_id_alg","","",N,N],[17,"NID_id_cmc","","",N,N],[17,"NID_id_on","","",N,N],[17,"NID_id_pda","","",N,N],[17,"NID_id_aca","","",N,N],[17,"NID_id_qcs","","",N,N],[17,"NID_id_cct","","",N,N],[17,"NID_id_ppl","","",N,N],[17,"NID_id_ad","","",N,N],[17,"NID_id_pkix1_explicit_88","","",N,N],[17,"NID_id_pkix1_implicit_88","","",N,N],[17,"NID_id_pkix1_explicit_93","","",N,N],[17,"NID_id_pkix1_implicit_93","","",N,N],[17,"NID_id_mod_crmf","","",N,N],[17,"NID_id_mod_cmc","","",N,N],[17,"NID_id_mod_kea_profile_88","","",N,N],[17,"NID_id_mod_kea_profile_93","","",N,N],[17,"NID_id_mod_cmp","","",N,N],[17,"NID_id_mod_qualified_cert_88","","",N,N],[17,"NID_id_mod_qualified_cert_93","","",N,N],[17,"NID_id_mod_attribute_cert","","",N,N],[17,"NID_id_mod_timestamp_protocol","","",N,N],[17,"NID_id_mod_ocsp","","",N,N],[17,"NID_id_mod_dvcs","","",N,N],[17,"NID_id_mod_cmp2000","","",N,N],[17,"NID_info_access","","",N,N],[17,"NID_biometricInfo","","",N,N],[17,"NID_qcStatements","","",N,N],[17,"NID_ac_auditEntity","","",N,N],[17,"NID_ac_targeting","","",N,N],[17,"NID_aaControls","","",N,N],[17,"NID_sbgp_ipAddrBlock","","",N,N],[17,"NID_sbgp_autonomousSysNum","","",N,N],[17,"NID_sbgp_routerIdentifier","","",N,N],[17,"NID_ac_proxying","","",N,N],[17,"NID_sinfo_access","","",N,N],[17,"NID_proxyCertInfo","","",N,N],[17,"NID_id_qt_cps","","",N,N],[17,"NID_id_qt_unotice","","",N,N],[17,"NID_textNotice","","",N,N],[17,"NID_server_auth","","",N,N],[17,"NID_client_auth","","",N,N],[17,"NID_code_sign","","",N,N],[17,"NID_email_protect","","",N,N],[17,"NID_ipsecEndSystem","","",N,N],[17,"NID_ipsecTunnel","","",N,N],[17,"NID_ipsecUser","","",N,N],[17,"NID_time_stamp","","",N,N],[17,"NID_OCSP_sign","","",N,N],[17,"NID_dvcs","","",N,N],[17,"NID_id_it_caProtEncCert","","",N,N],[17,"NID_id_it_signKeyPairTypes","","",N,N],[17,"NID_id_it_encKeyPairTypes","","",N,N],[17,"NID_id_it_preferredSymmAlg","","",N,N],[17,"NID_id_it_caKeyUpdateInfo","","",N,N],[17,"NID_id_it_currentCRL","","",N,N],[17,"NID_id_it_unsupportedOIDs","","",N,N],[17,"NID_id_it_subscriptionRequest","","",N,N],[17,"NID_id_it_subscriptionResponse","","",N,N],[17,"NID_id_it_keyPairParamReq","","",N,N],[17,"NID_id_it_keyPairParamRep","","",N,N],[17,"NID_id_it_revPassphrase","","",N,N],[17,"NID_id_it_implicitConfirm","","",N,N],[17,"NID_id_it_confirmWaitTime","","",N,N],[17,"NID_id_it_origPKIMessage","","",N,N],[17,"NID_id_it_suppLangTags","","",N,N],[17,"NID_id_regCtrl","","",N,N],[17,"NID_id_regInfo","","",N,N],[17,"NID_id_regCtrl_regToken","","",N,N],[17,"NID_id_regCtrl_authenticator","","",N,N],[17,"NID_id_regCtrl_pkiPublicationInfo","","",N,N],[17,"NID_id_regCtrl_pkiArchiveOptions","","",N,N],[17,"NID_id_regCtrl_oldCertID","","",N,N],[17,"NID_id_regCtrl_protocolEncrKey","","",N,N],[17,"NID_id_regInfo_utf8Pairs","","",N,N],[17,"NID_id_regInfo_certReq","","",N,N],[17,"NID_id_alg_des40","","",N,N],[17,"NID_id_alg_noSignature","","",N,N],[17,"NID_id_alg_dh_sig_hmac_sha1","","",N,N],[17,"NID_id_alg_dh_pop","","",N,N],[17,"NID_id_cmc_statusInfo","","",N,N],[17,"NID_id_cmc_identification","","",N,N],[17,"NID_id_cmc_identityProof","","",N,N],[17,"NID_id_cmc_dataReturn","","",N,N],[17,"NID_id_cmc_transactionId","","",N,N],[17,"NID_id_cmc_senderNonce","","",N,N],[17,"NID_id_cmc_recipientNonce","","",N,N],[17,"NID_id_cmc_addExtensions","","",N,N],[17,"NID_id_cmc_encryptedPOP","","",N,N],[17,"NID_id_cmc_decryptedPOP","","",N,N],[17,"NID_id_cmc_lraPOPWitness","","",N,N],[17,"NID_id_cmc_getCert","","",N,N],[17,"NID_id_cmc_getCRL","","",N,N],[17,"NID_id_cmc_revokeRequest","","",N,N],[17,"NID_id_cmc_regInfo","","",N,N],[17,"NID_id_cmc_responseInfo","","",N,N],[17,"NID_id_cmc_queryPending","","",N,N],[17,"NID_id_cmc_popLinkRandom","","",N,N],[17,"NID_id_cmc_popLinkWitness","","",N,N],[17,"NID_id_cmc_confirmCertAcceptance","","",N,N],[17,"NID_id_on_personalData","","",N,N],[17,"NID_id_on_permanentIdentifier","","",N,N],[17,"NID_id_pda_dateOfBirth","","",N,N],[17,"NID_id_pda_placeOfBirth","","",N,N],[17,"NID_id_pda_gender","","",N,N],[17,"NID_id_pda_countryOfCitizenship","","",N,N],[17,"NID_id_pda_countryOfResidence","","",N,N],[17,"NID_id_aca_authenticationInfo","","",N,N],[17,"NID_id_aca_accessIdentity","","",N,N],[17,"NID_id_aca_chargingIdentity","","",N,N],[17,"NID_id_aca_group","","",N,N],[17,"NID_id_aca_role","","",N,N],[17,"NID_id_aca_encAttrs","","",N,N],[17,"NID_id_qcs_pkixQCSyntax_v1","","",N,N],[17,"NID_id_cct_crs","","",N,N],[17,"NID_id_cct_PKIData","","",N,N],[17,"NID_id_cct_PKIResponse","","",N,N],[17,"NID_id_ppl_anyLanguage","","",N,N],[17,"NID_id_ppl_inheritAll","","",N,N],[17,"NID_Independent","","",N,N],[17,"NID_ad_OCSP","","",N,N],[17,"NID_ad_ca_issuers","","",N,N],[17,"NID_ad_timeStamping","","",N,N],[17,"NID_ad_dvcs","","",N,N],[17,"NID_caRepository","","",N,N],[17,"NID_id_pkix_OCSP_basic","","",N,N],[17,"NID_id_pkix_OCSP_Nonce","","",N,N],[17,"NID_id_pkix_OCSP_CrlID","","",N,N],[17,"NID_id_pkix_OCSP_acceptableResponses","","",N,N],[17,"NID_id_pkix_OCSP_noCheck","","",N,N],[17,"NID_id_pkix_OCSP_archiveCutoff","","",N,N],[17,"NID_id_pkix_OCSP_serviceLocator","","",N,N],[17,"NID_id_pkix_OCSP_extendedStatus","","",N,N],[17,"NID_id_pkix_OCSP_valid","","",N,N],[17,"NID_id_pkix_OCSP_path","","",N,N],[17,"NID_id_pkix_OCSP_trustRoot","","",N,N],[17,"NID_algorithm","","",N,N],[17,"NID_md5WithRSA","","",N,N],[17,"NID_des_ecb","","",N,N],[17,"NID_des_cbc","","",N,N],[17,"NID_des_ofb64","","",N,N],[17,"NID_des_cfb64","","",N,N],[17,"NID_rsaSignature","","",N,N],[17,"NID_dsa_2","","",N,N],[17,"NID_dsaWithSHA","","",N,N],[17,"NID_shaWithRSAEncryption","","",N,N],[17,"NID_des_ede_ecb","","",N,N],[17,"NID_des_ede3_ecb","","",N,N],[17,"NID_des_ede_cbc","","",N,N],[17,"NID_des_ede_cfb64","","",N,N],[17,"NID_des_ede3_cfb64","","",N,N],[17,"NID_des_ede_ofb64","","",N,N],[17,"NID_des_ede3_ofb64","","",N,N],[17,"NID_desx_cbc","","",N,N],[17,"NID_sha","","",N,N],[17,"NID_sha1","","",N,N],[17,"NID_dsaWithSHA1_2","","",N,N],[17,"NID_sha1WithRSA","","",N,N],[17,"NID_ripemd160","","",N,N],[17,"NID_ripemd160WithRSA","","",N,N],[17,"NID_sxnet","","",N,N],[17,"NID_X500","","",N,N],[17,"NID_X509","","",N,N],[17,"NID_commonName","","",N,N],[17,"NID_surname","","",N,N],[17,"NID_serialNumber","","",N,N],[17,"NID_countryName","","",N,N],[17,"NID_localityName","","",N,N],[17,"NID_stateOrProvinceName","","",N,N],[17,"NID_streetAddress","","",N,N],[17,"NID_organizationName","","",N,N],[17,"NID_organizationalUnitName","","",N,N],[17,"NID_title","","",N,N],[17,"NID_description","","",N,N],[17,"NID_searchGuide","","",N,N],[17,"NID_businessCategory","","",N,N],[17,"NID_postalAddress","","",N,N],[17,"NID_postalCode","","",N,N],[17,"NID_postOfficeBox","","",N,N],[17,"NID_physicalDeliveryOfficeName","","",N,N],[17,"NID_telephoneNumber","","",N,N],[17,"NID_telexNumber","","",N,N],[17,"NID_teletexTerminalIdentifier","","",N,N],[17,"NID_facsimileTelephoneNumber","","",N,N],[17,"NID_x121Address","","",N,N],[17,"NID_internationaliSDNNumber","","",N,N],[17,"NID_registeredAddress","","",N,N],[17,"NID_destinationIndicator","","",N,N],[17,"NID_preferredDeliveryMethod","","",N,N],[17,"NID_presentationAddress","","",N,N],[17,"NID_supportedApplicationContext","","",N,N],[17,"NID_member","","",N,N],[17,"NID_owner","","",N,N],[17,"NID_roleOccupant","","",N,N],[17,"NID_seeAlso","","",N,N],[17,"NID_userPassword","","",N,N],[17,"NID_userCertificate","","",N,N],[17,"NID_cACertificate","","",N,N],[17,"NID_authorityRevocationList","","",N,N],[17,"NID_certificateRevocationList","","",N,N],[17,"NID_crossCertificatePair","","",N,N],[17,"NID_name","","",N,N],[17,"NID_givenName","","",N,N],[17,"NID_initials","","",N,N],[17,"NID_generationQualifier","","",N,N],[17,"NID_x500UniqueIdentifier","","",N,N],[17,"NID_dnQualifier","","",N,N],[17,"NID_enhancedSearchGuide","","",N,N],[17,"NID_protocolInformation","","",N,N],[17,"NID_distinguishedName","","",N,N],[17,"NID_uniqueMember","","",N,N],[17,"NID_houseIdentifier","","",N,N],[17,"NID_supportedAlgorithms","","",N,N],[17,"NID_deltaRevocationList","","",N,N],[17,"NID_dmdName","","",N,N],[17,"NID_pseudonym","","",N,N],[17,"NID_role","","",N,N],[17,"NID_X500algorithms","","",N,N],[17,"NID_rsa","","",N,N],[17,"NID_mdc2WithRSA","","",N,N],[17,"NID_mdc2","","",N,N],[17,"NID_id_ce","","",N,N],[17,"NID_subject_directory_attributes","","",N,N],[17,"NID_subject_key_identifier","","",N,N],[17,"NID_key_usage","","",N,N],[17,"NID_private_key_usage_period","","",N,N],[17,"NID_subject_alt_name","","",N,N],[17,"NID_issuer_alt_name","","",N,N],[17,"NID_basic_constraints","","",N,N],[17,"NID_crl_number","","",N,N],[17,"NID_crl_reason","","",N,N],[17,"NID_invalidity_date","","",N,N],[17,"NID_delta_crl","","",N,N],[17,"NID_issuing_distribution_point","","",N,N],[17,"NID_certificate_issuer","","",N,N],[17,"NID_name_constraints","","",N,N],[17,"NID_crl_distribution_points","","",N,N],[17,"NID_certificate_policies","","",N,N],[17,"NID_any_policy","","",N,N],[17,"NID_policy_mappings","","",N,N],[17,"NID_authority_key_identifier","","",N,N],[17,"NID_policy_constraints","","",N,N],[17,"NID_ext_key_usage","","",N,N],[17,"NID_freshest_crl","","",N,N],[17,"NID_inhibit_any_policy","","",N,N],[17,"NID_target_information","","",N,N],[17,"NID_no_rev_avail","","",N,N],[17,"NID_anyExtendedKeyUsage","","",N,N],[17,"NID_netscape","","",N,N],[17,"NID_netscape_cert_extension","","",N,N],[17,"NID_netscape_data_type","","",N,N],[17,"NID_netscape_cert_type","","",N,N],[17,"NID_netscape_base_url","","",N,N],[17,"NID_netscape_revocation_url","","",N,N],[17,"NID_netscape_ca_revocation_url","","",N,N],[17,"NID_netscape_renewal_url","","",N,N],[17,"NID_netscape_ca_policy_url","","",N,N],[17,"NID_netscape_ssl_server_name","","",N,N],[17,"NID_netscape_comment","","",N,N],[17,"NID_netscape_cert_sequence","","",N,N],[17,"NID_ns_sgc","","",N,N],[17,"NID_org","","",N,N],[17,"NID_dod","","",N,N],[17,"NID_iana","","",N,N],[17,"NID_Directory","","",N,N],[17,"NID_Management","","",N,N],[17,"NID_Experimental","","",N,N],[17,"NID_Private","","",N,N],[17,"NID_Security","","",N,N],[17,"NID_SNMPv2","","",N,N],[17,"NID_Mail","","",N,N],[17,"NID_Enterprises","","",N,N],[17,"NID_dcObject","","",N,N],[17,"NID_mime_mhs","","",N,N],[17,"NID_mime_mhs_headings","","",N,N],[17,"NID_mime_mhs_bodies","","",N,N],[17,"NID_id_hex_partial_message","","",N,N],[17,"NID_id_hex_multipart_message","","",N,N],[17,"NID_zlib_compression","","",N,N],[17,"NID_aes_128_ecb","","",N,N],[17,"NID_aes_128_cbc","","",N,N],[17,"NID_aes_128_ofb128","","",N,N],[17,"NID_aes_128_cfb128","","",N,N],[17,"NID_id_aes128_wrap","","",N,N],[17,"NID_aes_128_gcm","","",N,N],[17,"NID_aes_128_ccm","","",N,N],[17,"NID_id_aes128_wrap_pad","","",N,N],[17,"NID_aes_192_ecb","","",N,N],[17,"NID_aes_192_cbc","","",N,N],[17,"NID_aes_192_ofb128","","",N,N],[17,"NID_aes_192_cfb128","","",N,N],[17,"NID_id_aes192_wrap","","",N,N],[17,"NID_aes_192_gcm","","",N,N],[17,"NID_aes_192_ccm","","",N,N],[17,"NID_id_aes192_wrap_pad","","",N,N],[17,"NID_aes_256_ecb","","",N,N],[17,"NID_aes_256_cbc","","",N,N],[17,"NID_aes_256_ofb128","","",N,N],[17,"NID_aes_256_cfb128","","",N,N],[17,"NID_id_aes256_wrap","","",N,N],[17,"NID_aes_256_gcm","","",N,N],[17,"NID_aes_256_ccm","","",N,N],[17,"NID_id_aes256_wrap_pad","","",N,N],[17,"NID_aes_128_cfb1","","",N,N],[17,"NID_aes_192_cfb1","","",N,N],[17,"NID_aes_256_cfb1","","",N,N],[17,"NID_aes_128_cfb8","","",N,N],[17,"NID_aes_192_cfb8","","",N,N],[17,"NID_aes_256_cfb8","","",N,N],[17,"NID_aes_128_ctr","","",N,N],[17,"NID_aes_192_ctr","","",N,N],[17,"NID_aes_256_ctr","","",N,N],[17,"NID_aes_128_xts","","",N,N],[17,"NID_aes_256_xts","","",N,N],[17,"NID_des_cfb1","","",N,N],[17,"NID_des_cfb8","","",N,N],[17,"NID_des_ede3_cfb1","","",N,N],[17,"NID_des_ede3_cfb8","","",N,N],[17,"NID_sha256","","",N,N],[17,"NID_sha384","","",N,N],[17,"NID_sha512","","",N,N],[17,"NID_sha224","","",N,N],[17,"NID_dsa_with_SHA224","","",N,N],[17,"NID_dsa_with_SHA256","","",N,N],[17,"NID_hold_instruction_code","","",N,N],[17,"NID_hold_instruction_none","","",N,N],[17,"NID_hold_instruction_call_issuer","","",N,N],[17,"NID_hold_instruction_reject","","",N,N],[17,"NID_data","","",N,N],[17,"NID_pss","","",N,N],[17,"NID_ucl","","",N,N],[17,"NID_pilot","","",N,N],[17,"NID_pilotAttributeType","","",N,N],[17,"NID_pilotAttributeSyntax","","",N,N],[17,"NID_pilotObjectClass","","",N,N],[17,"NID_pilotGroups","","",N,N],[17,"NID_iA5StringSyntax","","",N,N],[17,"NID_caseIgnoreIA5StringSyntax","","",N,N],[17,"NID_pilotObject","","",N,N],[17,"NID_pilotPerson","","",N,N],[17,"NID_account","","",N,N],[17,"NID_document","","",N,N],[17,"NID_room","","",N,N],[17,"NID_documentSeries","","",N,N],[17,"NID_Domain","","",N,N],[17,"NID_rFC822localPart","","",N,N],[17,"NID_dNSDomain","","",N,N],[17,"NID_domainRelatedObject","","",N,N],[17,"NID_friendlyCountry","","",N,N],[17,"NID_simpleSecurityObject","","",N,N],[17,"NID_pilotOrganization","","",N,N],[17,"NID_pilotDSA","","",N,N],[17,"NID_qualityLabelledData","","",N,N],[17,"NID_userId","","",N,N],[17,"NID_textEncodedORAddress","","",N,N],[17,"NID_rfc822Mailbox","","",N,N],[17,"NID_info","","",N,N],[17,"NID_favouriteDrink","","",N,N],[17,"NID_roomNumber","","",N,N],[17,"NID_photo","","",N,N],[17,"NID_userClass","","",N,N],[17,"NID_host","","",N,N],[17,"NID_manager","","",N,N],[17,"NID_documentIdentifier","","",N,N],[17,"NID_documentTitle","","",N,N],[17,"NID_documentVersion","","",N,N],[17,"NID_documentAuthor","","",N,N],[17,"NID_documentLocation","","",N,N],[17,"NID_homeTelephoneNumber","","",N,N],[17,"NID_secretary","","",N,N],[17,"NID_otherMailbox","","",N,N],[17,"NID_lastModifiedTime","","",N,N],[17,"NID_lastModifiedBy","","",N,N],[17,"NID_domainComponent","","",N,N],[17,"NID_aRecord","","",N,N],[17,"NID_pilotAttributeType27","","",N,N],[17,"NID_mXRecord","","",N,N],[17,"NID_nSRecord","","",N,N],[17,"NID_sOARecord","","",N,N],[17,"NID_cNAMERecord","","",N,N],[17,"NID_associatedDomain","","",N,N],[17,"NID_associatedName","","",N,N],[17,"NID_homePostalAddress","","",N,N],[17,"NID_personalTitle","","",N,N],[17,"NID_mobileTelephoneNumber","","",N,N],[17,"NID_pagerTelephoneNumber","","",N,N],[17,"NID_friendlyCountryName","","",N,N],[17,"NID_organizationalStatus","","",N,N],[17,"NID_janetMailbox","","",N,N],[17,"NID_mailPreferenceOption","","",N,N],[17,"NID_buildingName","","",N,N],[17,"NID_dSAQuality","","",N,N],[17,"NID_singleLevelQuality","","",N,N],[17,"NID_subtreeMinimumQuality","","",N,N],[17,"NID_subtreeMaximumQuality","","",N,N],[17,"NID_personalSignature","","",N,N],[17,"NID_dITRedirect","","",N,N],[17,"NID_audio","","",N,N],[17,"NID_documentPublisher","","",N,N],[17,"NID_id_set","","",N,N],[17,"NID_set_ctype","","",N,N],[17,"NID_set_msgExt","","",N,N],[17,"NID_set_attr","","",N,N],[17,"NID_set_policy","","",N,N],[17,"NID_set_certExt","","",N,N],[17,"NID_set_brand","","",N,N],[17,"NID_setct_PANData","","",N,N],[17,"NID_setct_PANToken","","",N,N],[17,"NID_setct_PANOnly","","",N,N],[17,"NID_setct_OIData","","",N,N],[17,"NID_setct_PI","","",N,N],[17,"NID_setct_PIData","","",N,N],[17,"NID_setct_PIDataUnsigned","","",N,N],[17,"NID_setct_HODInput","","",N,N],[17,"NID_setct_AuthResBaggage","","",N,N],[17,"NID_setct_AuthRevReqBaggage","","",N,N],[17,"NID_setct_AuthRevResBaggage","","",N,N],[17,"NID_setct_CapTokenSeq","","",N,N],[17,"NID_setct_PInitResData","","",N,N],[17,"NID_setct_PI_TBS","","",N,N],[17,"NID_setct_PResData","","",N,N],[17,"NID_setct_AuthReqTBS","","",N,N],[17,"NID_setct_AuthResTBS","","",N,N],[17,"NID_setct_AuthResTBSX","","",N,N],[17,"NID_setct_AuthTokenTBS","","",N,N],[17,"NID_setct_CapTokenData","","",N,N],[17,"NID_setct_CapTokenTBS","","",N,N],[17,"NID_setct_AcqCardCodeMsg","","",N,N],[17,"NID_setct_AuthRevReqTBS","","",N,N],[17,"NID_setct_AuthRevResData","","",N,N],[17,"NID_setct_AuthRevResTBS","","",N,N],[17,"NID_setct_CapReqTBS","","",N,N],[17,"NID_setct_CapReqTBSX","","",N,N],[17,"NID_setct_CapResData","","",N,N],[17,"NID_setct_CapRevReqTBS","","",N,N],[17,"NID_setct_CapRevReqTBSX","","",N,N],[17,"NID_setct_CapRevResData","","",N,N],[17,"NID_setct_CredReqTBS","","",N,N],[17,"NID_setct_CredReqTBSX","","",N,N],[17,"NID_setct_CredResData","","",N,N],[17,"NID_setct_CredRevReqTBS","","",N,N],[17,"NID_setct_CredRevReqTBSX","","",N,N],[17,"NID_setct_CredRevResData","","",N,N],[17,"NID_setct_PCertReqData","","",N,N],[17,"NID_setct_PCertResTBS","","",N,N],[17,"NID_setct_BatchAdminReqData","","",N,N],[17,"NID_setct_BatchAdminResData","","",N,N],[17,"NID_setct_CardCInitResTBS","","",N,N],[17,"NID_setct_MeAqCInitResTBS","","",N,N],[17,"NID_setct_RegFormResTBS","","",N,N],[17,"NID_setct_CertReqData","","",N,N],[17,"NID_setct_CertReqTBS","","",N,N],[17,"NID_setct_CertResData","","",N,N],[17,"NID_setct_CertInqReqTBS","","",N,N],[17,"NID_setct_ErrorTBS","","",N,N],[17,"NID_setct_PIDualSignedTBE","","",N,N],[17,"NID_setct_PIUnsignedTBE","","",N,N],[17,"NID_setct_AuthReqTBE","","",N,N],[17,"NID_setct_AuthResTBE","","",N,N],[17,"NID_setct_AuthResTBEX","","",N,N],[17,"NID_setct_AuthTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBEX","","",N,N],[17,"NID_setct_AcqCardCodeMsgTBE","","",N,N],[17,"NID_setct_AuthRevReqTBE","","",N,N],[17,"NID_setct_AuthRevResTBE","","",N,N],[17,"NID_setct_AuthRevResTBEB","","",N,N],[17,"NID_setct_CapReqTBE","","",N,N],[17,"NID_setct_CapReqTBEX","","",N,N],[17,"NID_setct_CapResTBE","","",N,N],[17,"NID_setct_CapRevReqTBE","","",N,N],[17,"NID_setct_CapRevReqTBEX","","",N,N],[17,"NID_setct_CapRevResTBE","","",N,N],[17,"NID_setct_CredReqTBE","","",N,N],[17,"NID_setct_CredReqTBEX","","",N,N],[17,"NID_setct_CredResTBE","","",N,N],[17,"NID_setct_CredRevReqTBE","","",N,N],[17,"NID_setct_CredRevReqTBEX","","",N,N],[17,"NID_setct_CredRevResTBE","","",N,N],[17,"NID_setct_BatchAdminReqTBE","","",N,N],[17,"NID_setct_BatchAdminResTBE","","",N,N],[17,"NID_setct_RegFormReqTBE","","",N,N],[17,"NID_setct_CertReqTBE","","",N,N],[17,"NID_setct_CertReqTBEX","","",N,N],[17,"NID_setct_CertResTBE","","",N,N],[17,"NID_setct_CRLNotificationTBS","","",N,N],[17,"NID_setct_CRLNotificationResTBS","","",N,N],[17,"NID_setct_BCIDistributionTBS","","",N,N],[17,"NID_setext_genCrypt","","",N,N],[17,"NID_setext_miAuth","","",N,N],[17,"NID_setext_pinSecure","","",N,N],[17,"NID_setext_pinAny","","",N,N],[17,"NID_setext_track2","","",N,N],[17,"NID_setext_cv","","",N,N],[17,"NID_set_policy_root","","",N,N],[17,"NID_setCext_hashedRoot","","",N,N],[17,"NID_setCext_certType","","",N,N],[17,"NID_setCext_merchData","","",N,N],[17,"NID_setCext_cCertRequired","","",N,N],[17,"NID_setCext_tunneling","","",N,N],[17,"NID_setCext_setExt","","",N,N],[17,"NID_setCext_setQualf","","",N,N],[17,"NID_setCext_PGWYcapabilities","","",N,N],[17,"NID_setCext_TokenIdentifier","","",N,N],[17,"NID_setCext_Track2Data","","",N,N],[17,"NID_setCext_TokenType","","",N,N],[17,"NID_setCext_IssuerCapabilities","","",N,N],[17,"NID_setAttr_Cert","","",N,N],[17,"NID_setAttr_PGWYcap","","",N,N],[17,"NID_setAttr_TokenType","","",N,N],[17,"NID_setAttr_IssCap","","",N,N],[17,"NID_set_rootKeyThumb","","",N,N],[17,"NID_set_addPolicy","","",N,N],[17,"NID_setAttr_Token_EMV","","",N,N],[17,"NID_setAttr_Token_B0Prime","","",N,N],[17,"NID_setAttr_IssCap_CVM","","",N,N],[17,"NID_setAttr_IssCap_T2","","",N,N],[17,"NID_setAttr_IssCap_Sig","","",N,N],[17,"NID_setAttr_GenCryptgrm","","",N,N],[17,"NID_setAttr_T2Enc","","",N,N],[17,"NID_setAttr_T2cleartxt","","",N,N],[17,"NID_setAttr_TokICCsig","","",N,N],[17,"NID_setAttr_SecDevSig","","",N,N],[17,"NID_set_brand_IATA_ATA","","",N,N],[17,"NID_set_brand_Diners","","",N,N],[17,"NID_set_brand_AmericanExpress","","",N,N],[17,"NID_set_brand_JCB","","",N,N],[17,"NID_set_brand_Visa","","",N,N],[17,"NID_set_brand_MasterCard","","",N,N],[17,"NID_set_brand_Novus","","",N,N],[17,"NID_des_cdmf","","",N,N],[17,"NID_rsaOAEPEncryptionSET","","",N,N],[17,"NID_ipsec3","","",N,N],[17,"NID_ipsec4","","",N,N],[17,"NID_whirlpool","","",N,N],[17,"NID_cryptopro","","",N,N],[17,"NID_cryptocom","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",N,N],[17,"NID_id_GostR3411_94","","",N,N],[17,"NID_id_HMACGostR3411_94","","",N,N],[17,"NID_id_GostR3410_2001","","",N,N],[17,"NID_id_GostR3410_94","","",N,N],[17,"NID_id_Gost28147_89","","",N,N],[17,"NID_gost89_cnt","","",N,N],[17,"NID_id_Gost28147_89_MAC","","",N,N],[17,"NID_id_GostR3411_94_prf","","",N,N],[17,"NID_id_GostR3410_2001DH","","",N,N],[17,"NID_id_GostR3410_94DH","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",N,N],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",N,N],[17,"NID_id_GostR3411_94_TestParamSet","","",N,N],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",N,N],[17,"NID_id_Gost28147_89_TestParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_TestParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_TestParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_a","","",N,N],[17,"NID_id_GostR3410_94_aBis","","",N,N],[17,"NID_id_GostR3410_94_b","","",N,N],[17,"NID_id_GostR3410_94_bBis","","",N,N],[17,"NID_id_Gost28147_89_cc","","",N,N],[17,"NID_id_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",N,N],[17,"NID_camellia_128_cbc","","",N,N],[17,"NID_camellia_192_cbc","","",N,N],[17,"NID_camellia_256_cbc","","",N,N],[17,"NID_id_camellia128_wrap","","",N,N],[17,"NID_id_camellia192_wrap","","",N,N],[17,"NID_id_camellia256_wrap","","",N,N],[17,"NID_camellia_128_ecb","","",N,N],[17,"NID_camellia_128_ofb128","","",N,N],[17,"NID_camellia_128_cfb128","","",N,N],[17,"NID_camellia_192_ecb","","",N,N],[17,"NID_camellia_192_ofb128","","",N,N],[17,"NID_camellia_192_cfb128","","",N,N],[17,"NID_camellia_256_ecb","","",N,N],[17,"NID_camellia_256_ofb128","","",N,N],[17,"NID_camellia_256_cfb128","","",N,N],[17,"NID_camellia_128_cfb1","","",N,N],[17,"NID_camellia_192_cfb1","","",N,N],[17,"NID_camellia_256_cfb1","","",N,N],[17,"NID_camellia_128_cfb8","","",N,N],[17,"NID_camellia_192_cfb8","","",N,N],[17,"NID_camellia_256_cfb8","","",N,N],[17,"NID_kisa","","",N,N],[17,"NID_seed_ecb","","",N,N],[17,"NID_seed_cbc","","",N,N],[17,"NID_seed_cfb128","","",N,N],[17,"NID_seed_ofb128","","",N,N],[17,"NID_hmac","","",N,N],[17,"NID_cmac","","",N,N],[17,"NID_rc4_hmac_md5","","",N,N],[17,"NID_aes_128_cbc_hmac_sha1","","",N,N],[17,"NID_aes_192_cbc_hmac_sha1","","",N,N],[17,"NID_aes_256_cbc_hmac_sha1","","",N,N],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",N,N],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",N,N],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",N,N],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",N,N],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",N,N],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",N,N],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",N,N],[17,"OCSP_NOCERTS","","",N,N],[17,"OCSP_NOINTERN","","",N,N],[17,"OCSP_NOSIGS","","",N,N],[17,"OCSP_NOCHAIN","","",N,N],[17,"OCSP_NOVERIFY","","",N,N],[17,"OCSP_NOEXPLICIT","","",N,N],[17,"OCSP_NOCASIGN","","",N,N],[17,"OCSP_NODELEGATED","","",N,N],[17,"OCSP_NOCHECKS","","",N,N],[17,"OCSP_TRUSTOTHER","","",N,N],[17,"OCSP_RESPID_KEY","","",N,N],[17,"OCSP_NOTIME","","",N,N],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",N,N],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",N,N],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",N,N],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",N,N],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",N,N],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",N,N],[17,"V_OCSP_CERTSTATUS_GOOD","","",N,N],[17,"V_OCSP_CERTSTATUS_REVOKED","","",N,N],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",N,N],[17,"PEM_R_NO_START_LINE","","",N,N],[17,"RSA_F4","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PSS_SALTLEN","","",N,N],[17,"EVP_PKEY_CTRL_RSA_MGF1_MD","","",N,N],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",N,N],[17,"RSA_PKCS1_PADDING","","",N,N],[17,"RSA_SSLV23_PADDING","","",N,N],[17,"RSA_NO_PADDING","","",N,N],[17,"RSA_PKCS1_OAEP_PADDING","","",N,N],[17,"RSA_X931_PADDING","","",N,N],[17,"RSA_PKCS1_PSS_PADDING","","",N,N],[17,"SHA_LBLOCK","","",N,N],[17,"SRTP_AES128_CM_SHA1_80","","",N,N],[17,"SRTP_AES128_CM_SHA1_32","","",N,N],[17,"SRTP_AES128_F8_SHA1_80","","",N,N],[17,"SRTP_AES128_F8_SHA1_32","","",N,N],[17,"SRTP_NULL_SHA1_80","","",N,N],[17,"SRTP_NULL_SHA1_32","","",N,N],[17,"SSL_MAX_KRB5_PRINCIPAL_LENGTH","","",N,N],[17,"SSL_MAX_SSL_SESSION_ID_LENGTH","","",N,N],[17,"SSL_MAX_SID_CTX_LENGTH","","",N,N],[17,"SSL_MAX_KEY_ARG_LENGTH","","",N,N],[17,"SSL_MAX_MASTER_KEY_LENGTH","","",N,N],[17,"SSL_SENT_SHUTDOWN","","",N,N],[17,"SSL_RECEIVED_SHUTDOWN","","",N,N],[17,"SSL_FILETYPE_PEM","","",N,N],[17,"SSL_FILETYPE_ASN1","","",N,N],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",N,N],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_SSLv3","","",N,N],[17,"SSL_OP_NO_TLSv1_1","","",N,N],[17,"SSL_OP_NO_TLSv1_2","","",N,N],[17,"SSL_OP_NO_TLSv1","","",N,N],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",N,N],[17,"SSL_OP_ALL","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_NO_SSLv2","","",N,N],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",N,N],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",N,N],[17,"SSL_MODE_AUTO_RETRY","","",N,N],[17,"SSL_MODE_NO_AUTO_CHAIN","","",N,N],[17,"SSL_MODE_RELEASE_BUFFERS","","",N,N],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",N,N],[17,"SSL_SESS_CACHE_OFF","","",N,N],[17,"SSL_SESS_CACHE_CLIENT","","",N,N],[17,"SSL_SESS_CACHE_SERVER","","",N,N],[17,"SSL_SESS_CACHE_BOTH","","",N,N],[17,"SSL_SESS_CACHE_NO_AUTO_CLEAR","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_LOOKUP","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_STORE","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL","","",N,N],[17,"OPENSSL_NPN_UNSUPPORTED","","",N,N],[17,"OPENSSL_NPN_NEGOTIATED","","",N,N],[17,"OPENSSL_NPN_NO_OVERLAP","","",N,N],[17,"SSL_AD_ILLEGAL_PARAMETER","","",N,N],[17,"SSL_AD_DECODE_ERROR","","",N,N],[17,"SSL_AD_UNRECOGNIZED_NAME","","",N,N],[17,"SSL_ERROR_NONE","","",N,N],[17,"SSL_ERROR_SSL","","",N,N],[17,"SSL_ERROR_SYSCALL","","",N,N],[17,"SSL_ERROR_WANT_ACCEPT","","",N,N],[17,"SSL_ERROR_WANT_CONNECT","","",N,N],[17,"SSL_ERROR_WANT_READ","","",N,N],[17,"SSL_ERROR_WANT_WRITE","","",N,N],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",N,N],[17,"SSL_ERROR_ZERO_RETURN","","",N,N],[17,"SSL_VERIFY_NONE","","",N,N],[17,"SSL_VERIFY_PEER","","",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",N,N],[17,"SSL_CTRL_SET_TMP_DH","","",N,N],[17,"SSL_CTRL_SET_TMP_ECDH","","",N,N],[17,"SSL_CTRL_GET_SESSION_REUSED","","",N,N],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",N,N],[17,"SSL_CTRL_OPTIONS","","",N,N],[17,"SSL_CTRL_MODE","","",N,N],[17,"SSL_CTRL_SET_READ_AHEAD","","",N,N],[17,"SSL_CTRL_SET_SESS_CACHE_MODE","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",N,N],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_CLEAR_OPTIONS","","",N,N],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",N,N],[17,"SSL3_VERSION","","",N,N],[17,"SSL3_AD_ILLEGAL_PARAMETER","","",N,N],[17,"TLS1_VERSION","","",N,N],[17,"TLS1_1_VERSION","","",N,N],[17,"TLS1_2_VERSION","","",N,N],[17,"TLS1_AD_DECODE_ERROR","","",N,N],[17,"TLS1_AD_UNRECOGNIZED_NAME","","",N,N],[17,"TLSEXT_NAMETYPE_host_name","","",N,N],[17,"TLSEXT_STATUSTYPE_ocsp","","",N,N],[17,"SSL_TLSEXT_ERR_OK","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",N,N],[17,"SSL_TLSEXT_ERR_NOACK","","",N,N],[17,"X509_FILETYPE_PEM","","",N,N],[17,"X509_FILETYPE_ASN1","","",N,N],[17,"X509_FILETYPE_DEFAULT","","",N,N],[17,"X509_V_OK","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",N,N],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_OUT_OF_MEM","","",N,N],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",N,N],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",N,N],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",N,N],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",N,N],[17,"X509_V_ERR_CERT_REVOKED","","",N,N],[17,"X509_V_ERR_INVALID_CA","","",N,N],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_INVALID_PURPOSE","","",N,N],[17,"X509_V_ERR_CERT_UNTRUSTED","","",N,N],[17,"X509_V_ERR_CERT_REJECTED","","",N,N],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_NON_CA","","",N,N],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",N,N],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",N,N],[17,"X509_V_ERR_INVALID_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",N,N],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",N,N],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",N,N],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",N,N],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",N,N],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",N,N],[17,"X509_V_ERR_SUBTREE_MINMAX","","",N,N],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",N,N],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",N,N],[17,"GEN_OTHERNAME","","",N,N],[17,"GEN_EMAIL","","",N,N],[17,"GEN_DNS","","",N,N],[17,"GEN_X400","","",N,N],[17,"GEN_DIRNAME","","",N,N],[17,"GEN_EDIPARTY","","",N,N],[17,"GEN_URI","","",N,N],[17,"GEN_IPADD","","",N,N],[17,"GEN_RID","","",N,N]],"paths":[[3,"ASN1_ENCODING"],[3,"stack_st_ASN1_OBJECT"],[3,"BIO_METHOD"],[3,"stack_st_void"],[3,"ECDSA_SIG"],[3,"ERR_STRING_DATA"],[3,"BIO"],[3,"BIGNUM"],[3,"EVP_CIPHER"],[3,"EVP_PKEY"],[3,"DH"],[3,"DSA"],[3,"RSA"],[3,"X509"],[3,"X509_ALGOR"],[3,"SSL"],[3,"SSL_CTX"],[3,"CRYPTO_EX_DATA"],[3,"stack_st_OPENSSL_STRING"],[3,"SHA_CTX"],[3,"SHA256_CTX"],[3,"SHA512_CTX"],[3,"SSL_SESSION"],[3,"stack_st_SSL_CIPHER"],[3,"SRTP_PROTECTION_PROFILE"],[3,"stack_st_SRTP_PROTECTION_PROFILE"],[3,"_STACK"],[3,"X509_VAL"],[3,"stack_st_X509_NAME"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_X509_ATTRIBUTE"],[3,"X509_REQ_INFO"],[3,"X509_REQ"],[3,"X509_CINF"],[3,"stack_st_X509"],[3,"GENERAL_NAME"],[3,"stack_st_GENERAL_NAME"],[4,"point_conversion_form_t"]]};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,N],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,[[["self"]],["owningref"]]],[11,"owner","","A getter for the underlying owner.",3,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,[[["self"]],["owningrefmut"]]],[11,"owner","","A getter for the underlying owner.",4,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["result"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"]={"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",N,N],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",N,N],[3,"RawMutex","","Raw mutex type backed by the parking lot.",N,N],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",N,N],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",N,N],[4,"OnceState","","Current state of a `Once`.",N,N],[13,"New","","A closure has not been executed yet",0,N],[13,"Poisoned","","A closure was executed but panicked.",0,N],[13,"InProgress","","A thread is currently executing a closure.",0,N],[13,"Done","","A closure has completed sucessfully.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]]]],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,[[["self"],["mutexguard"]]]],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,[[["self"],["mutexguard"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,[[["self"],["mutexguard"],["duration"]],["waittimeoutresult"]]],[11,"default","","",2,[[],["condvar"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,[[["self"],["f"]]]],[11,"default","","",3,[[],["once"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["self"],["duration"]],["bool"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,N],[11,"try_lock_shared_until","","",5,N],[11,"try_lock_exclusive_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,N],[11,"try_lock_shared_recursive_until","","",5,N],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"RwLock","","A reader-writer lock",N,N],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[17,"ONCE_INIT","","Initialization value for static `Once` values.",N,N]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"]={"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",N,N],[12,"0","","",0,N],[3,"UnparkResult","","Result of an unpark operation.",N,N],[12,"unparked_threads","","The number of threads that were unparked.",1,N],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,N],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,N],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",N,N],[12,"0","","",2,N],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",N,N],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",N,N],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,N],[4,"ParkResult","","Result of a park operation.",N,N],[13,"Unparked","","We were unparked by another thread with the given token.",4,N],[13,"Invalid","","The validation callback returned false.",4,N],[13,"TimedOut","","The timeout expired.",4,N],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",N,N],[13,"Abort","","Abort the operation without doing anything.",5,N],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,N],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,N],[5,"park","","Parks the current thread in the queue associated with the given key.",N,[[["usize"],["v"],["b"],["t"],["parktoken"],["option",["instant"]]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",N,[[["usize"],["unparktoken"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",N,[[["usize"],["f"],["c"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",N,[[["usize"],["c"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",N,[[["usize"],["usize"],["v"],["c"]],["unparkresult"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[["self"]],["bool"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"eq","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"eq","","",5,[[["self"],["requeueop"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"eq","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"ne","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[11,"default","","",6,[[],["spinwait"]]],[0,"deadlock","","[Experimental] Deadlock detection",N,N],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",N,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",N,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",N,N],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",N,N]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"clone","","",1,[[["self"]],["simple_encode_set"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"contains","","",1,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["query_encode_set"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"clone","","",3,[[["self"]],["default_encode_set"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"clone","","",4,[[["self"]],["path_segment_encode_set"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["userinfo_encode_set"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"clone","","",6,[[["self"]],["percentencode"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["str"]]]],[11,"size_hint","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["percentdecode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",7,N],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["pest"]={"doc":"pest. The Elegant Parser","items":[[3,"ParserState","pest","The complete state of a [`Parser`].",N,N],[3,"Position","","A cursor position in a `&str` which provides useful methods to manually parse that string.",N,N],[3,"Span","","A span over a `&str`. It is created from either [two `Position`s] or from a [`Pair`].",N,N],[4,"Atomicity","","The current atomicity of a [`ParserState`].",N,N],[13,"Atomic","","",0,N],[13,"CompoundAtomic","","",0,N],[13,"NonAtomic","","",0,N],[4,"Lookahead","","The current lookahead status of a [`ParserState`].",N,N],[13,"Positive","","",1,N],[13,"Negative","","",1,N],[13,"None","","",1,N],[4,"Token","","A token generated by a `Parser`.",N,N],[13,"Start","","The starting `Position` of a matched `Rule`",2,N],[12,"rule","pest::Token","",2,N],[12,"pos","","",2,N],[13,"End","pest","The ending `Position` of a matched `Rule`",2,N],[12,"rule","pest::Token","",2,N],[12,"pos","","",2,N],[5,"state","pest","Creates a `ParserState` from a `&str`, supplying it to a closure `f`.",N,[[["str"],["f"]],["result",["pairs","error"]]]],[0,"error","","Types for different kinds of parsing failures.",N,N],[3,"Error","pest::error","Parse-related error type.",N,N],[12,"variant","","Variant of the error",3,N],[12,"location","","Location within the input string",3,N],[4,"ErrorVariant","","Different kinds of parsing errors.",N,N],[13,"ParsingError","","Generated parsing error with expected and unexpected `Rule`s",4,N],[12,"positives","pest::error::ErrorVariant","Positive attempts",4,N],[12,"negatives","","Negative attempts",4,N],[13,"CustomError","pest::error","Custom error with a message",4,N],[12,"message","pest::error::ErrorVariant","Short explanation",4,N],[4,"InputLocation","pest::error","Where an `Error` has occurred.",N,N],[13,"Pos","","`Error` was created by `Error::new_from_pos`",5,N],[13,"Span","","`Error` was created by `Error::new_from_span`",5,N],[11,"clone","","",3,[[["self"]],["error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"clone","","",4,[[["self"]],["errorvariant"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["errorvariant"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorvariant"]],["bool"]]],[11,"clone","","",5,[[["self"]],["inputlocation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["inputlocation"]],["bool"]]],[11,"ne","","",5,[[["self"],["inputlocation"]],["bool"]]],[11,"new_from_pos","","Creates `Error` from `ErrorVariant` and `Position`.",3,[[["errorvariant"],["position"]],["error"]]],[11,"new_from_span","","Creates `Error` from `ErrorVariant` and `Span`.",3,[[["errorvariant"],["span"]],["error"]]],[11,"with_path","","Returns `Error` variant with `path` which is shown when formatted with `Display`.",3,[[["self"],["str"]],["error"]]],[11,"renamed_rules","","Renames all `Rule`s if this is a [`ParsingError`]. It does nothing when called on a [`CustomError`].",3,[[["self"],["f"]],["error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[0,"iterators","pest","Types and iterators for parser output.",N,N],[3,"FlatPairs","pest::iterators","An iterator over [`Pair`]s. It is created by [`Pairs::flatten`].",N,N],[3,"Pair","","A matching pair of [`Token`]s and everything between them.",N,N],[3,"Pairs","","An iterator over [`Pair`]s. It is created by [`pest::state`] and [`Pair::into_inner`].",N,N],[3,"Tokens","","An iterator over [`Token`]s. It is created by [`Pair::tokens`] and [`Pairs::tokens`].",N,N],[11,"tokens","","Returns the `Tokens` for these pairs.",6,[[["self"]],["tokens"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["flatpairs"]]],[11,"clone","","",7,[[["self"]],["pair"]]],[11,"as_rule","","Returns the `Rule` of the `Pair`.",7,[[["self"]],["r"]]],[11,"as_str","","Captures a slice from the `&str` defined by the token `Pair`.",7,[[["self"]],["str"]]],[11,"into_span","","Returns the `Span` defined by the `Pair`, consuming it.",7,[[["self"]],["span"]]],[11,"as_span","","Returns the `Span` defined by the `Pair`, without consuming it.",7,[[["self"]],["span"]]],[11,"into_inner","","Returns the inner `Pairs` between the `Pair`, consuming it.",7,[[["self"]],["pairs"]]],[11,"tokens","","Returns the `Tokens` for the `Pair`.",7,[[["self"]],["tokens"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["pair"]],["bool"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"clone","","",8,[[["self"]],["pairs"]]],[11,"as_str","","Captures a slice from the `&str` defined by the starting position of the first token `Pair` and the ending position of the last token `Pair` of the `Pairs`. This also captures the input between those two token `Pair`s.",8,[[["self"]],["str"]]],[11,"concat","","Captures inner token `Pair`s and concatenates resulting `&str`s. This does not capture the input between token `Pair`s.",8,[[["self"]],["string"]]],[11,"flatten","","Flattens the `Pairs`.",8,[[["self"]],["flatpairs"]]],[11,"tokens","","Returns the `Tokens` for the `Pairs`.",8,[[["self"]],["tokens"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["pairs"]],["bool"]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"clone","","",9,[[["self"]],["tokens"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","pest","",1,[[["self"]],["lookahead"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["lookahead"]],["bool"]]],[11,"clone","","",0,[[["self"]],["atomicity"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["atomicity"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Allocates a fresh `ParserState` object to the heap and returns the owned `Box`. This `Box` will be passed from closure to closure based on the needs of the specified `Parser`.",10,[[["str"]],["box"]]],[11,"position","","Returns a reference to the current `Position` of the `ParserState`.",10,[[["self"]],["position"]]],[11,"atomicity","","Returns the current atomicity of the `ParserState`.",10,[[["self"]],["atomicity"]]],[11,"rule","","Wrapper needed to generate tokens. This will associate the `R` type rule to the closure meant to match the rule.",10,[[["box"],["r"],["f"]],["parseresult",["box"]]]],[11,"sequence","","Starts a sequence of transformations provided by `f` from the `Box<ParserState>`. Returns the same `Result` returned by `f` in the case of an `Ok`, or `Err` with the current `Box<ParserState>` otherwise.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"repeat","","Repeatedly applies the transformation provided by `f` from the `Box<ParserState>`. Returns `Ok` with the updated `Box<ParserState>` returned by `f` wrapped up in an `Err`.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"optional","","Optionally applies the transformation provided by `f` from the `Box<ParserState>`. Returns `Ok` with the updated `Box<ParserState>` returned by `f` regardless of the `Result`.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"match_char_by","","Attempts to match a single character based on a filter function. Returns `Ok` with the updated `Box<ParserState>` if successful, or `Err` with the updated `Box<ParserState>` otherwise.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"match_string","","Attempts to match the given string. Returns `Ok` with the updated `Box<ParserState>` if successful, or `Err` with the updated `Box<ParserState>` otherwise.",10,[[["box"],["str"]],["parseresult",["box"]]]],[11,"match_insensitive","","Attempts to case-insensitively match the given string. Returns `Ok` with the updated `Box<ParserState>` if successful, or `Err` with the updated `Box<ParserState>` otherwise.",10,[[["box"],["str"]],["parseresult",["box"]]]],[11,"match_range","","Attempts to match a single character from the given range. Returns `Ok` with the updated `Box<ParserState>` if successful, or `Err` with the updated `Box<ParserState>` otherwise.",10,[[["box"],["range",["char"]]],["parseresult",["box"]]]],[11,"skip","","Attempts to skip `n` characters forward. Returns `Ok` with the updated `Box<ParserState>` if successful, or `Err` with the updated `Box<ParserState>` otherwise.",10,[[["box"],["usize"]],["parseresult",["box"]]]],[11,"skip_until","","Attempts to skip forward until one of the given strings is found. Returns `Ok` with the updated `Box<ParserState>` whether or not one of the strings is found.",10,N],[11,"start_of_input","","Attempts to match the start of the input. Returns `Ok` with the current `Box<ParserState>` if the parser has not yet advanced, or `Err` with the current `Box<ParserState>` otherwise.",10,[[["box"]],["parseresult",["box"]]]],[11,"end_of_input","","Attempts to match the end of the input. Returns `Ok` with the current `Box<ParserState>` if there is no input remaining, or `Err` with the current `Box<ParserState>` otherwise.",10,[[["box"]],["parseresult",["box"]]]],[11,"lookahead","","Starts a lookahead transformation provided by `f` from the `Box<ParserState>`. It returns `Ok` with the current `Box<ParserState>` if `f` also returns an `Ok`, or `Err` with the current `Box<ParserState>` otherwise. If `is_positive` is `false`, it swaps the `Ok` and `Err` together, negating the `Result`.",10,[[["box"],["bool"],["f"]],["parseresult",["box"]]]],[11,"atomic","","Transformation which stops `Token`s from being generated according to `is_atomic`.",10,[[["box"],["atomicity"],["f"]],["parseresult",["box"]]]],[11,"stack_push","","Evaluates the result of closure `f` and pushes the span of the input consumed from before `f` is called to after `f` is called to the stack. Returns `Ok(Box<ParserState>)` if `f` is called successfully, or `Err(Box<ParserState>)` otherwise.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"stack_peek","","Peeks the top of the stack and attempts to match the string. Returns `Ok(Box<ParserState>)` if the string is matched successfully, or `Err(Box<ParserState>)` otherwise.",10,[[["box"]],["parseresult",["box"]]]],[11,"stack_pop","","Pops the top of the stack and attempts to match the string. Returns `Ok(Box<ParserState>)` if the string is matched successfully, or `Err(Box<ParserState>)` otherwise.",10,[[["box"]],["parseresult",["box"]]]],[11,"stack_match_peek","","Matches the full state of the stack.",10,[[["box"]],["parseresult",["box"]]]],[11,"stack_match_pop","","Matches the full state of the stack. This method will clear the stack as it evaluates.",10,[[["box"]],["parseresult",["box"]]]],[11,"stack_drop","","Drops the top of the stack. Returns `Ok(Box<ParserState>)` if there was a value to drop, or `Err(Box<ParserState>)` otherwise.",10,[[["box"]],["parseresult",["box"]]]],[11,"restore_on_err","","Restores the original state of the `ParserState` when `f` returns an `Err`. Currently, this method only restores the stack.",10,[[["box"],["f"]],["parseresult",["box"]]]],[11,"from_start","","Creates a `Position` at the start of a `&str`.",11,[[["str"]],["position"]]],[11,"pos","","Returns the byte position of this `Position` as a `usize`.",11,[[["self"]],["usize"]]],[11,"span","","Creates a `Span` from two `Position`s.",11,[[["self"],["position"]],["span"]]],[11,"line_col","","Returns the line and column number of this `Position`.",11,N],[11,"line_of","","Returns the entire line of the input that contains this `Position`.",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["position"]]],[11,"eq","","",11,[[["self"],["position"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["position"]],["option",["ordering"]]]],[11,"cmp","","",11,[[["self"],["position"]],["ordering"]]],[11,"hash","","",11,[[["self"],["h"]]]],[0,"prec_climber","","Constructs useful in infix operator parsing with the precedence climbing method.",N,N],[3,"Operator","pest::prec_climber","Infix operator used in [`PrecClimber`].",N,N],[3,"PrecClimber","","List of operators and precedences, which can perform [precedence climbing][1] on infix expressions contained in a [`Pairs`]. The token pairs contained in the `Pairs` should start with a primary pair and then alternate between an operator and a primary.",N,N],[4,"Assoc","","Associativity of an [`Operator`].",N,N],[13,"Left","","Left `Operator` associativity",12,N],[13,"Right","","Right `Operator` associativity",12,N],[11,"clone","","",12,[[["self"]],["assoc"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["assoc"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Operator` from a `Rule` and `Assoc`.",13,[[["r"],["assoc"]],["operator"]]],[11,"bitor","","",13,[[["self"],["self"]],["self"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `PrecClimber` from the `Operator`s contained in `ops`. Every entry in the `Vec` has precedence index + 1. In order to have operators with same precedence, they need to be chained with `|` between them.",14,[[["vec",["operator"]]],["precclimber"]]],[11,"climb","","Performs the precedence climbing algorithm on the `pairs` in a similar manner to map-reduce. Primary pairs are mapped with `primary` and then reduced to one single result with `infix`.",14,[[["self"],["p"],["f"],["g"]],["t"]]],[11,"start","pest","Returns the `Span`'s start byte position as a `usize`.",15,[[["self"]],["usize"]]],[11,"end","","Returns the `Span`'s end byte position as a `usize`.",15,[[["self"]],["usize"]]],[11,"start_pos","","Returns the `Span`'s start `Position`.",15,[[["self"]],["position"]]],[11,"end_pos","","Returns the `Span`'s end `Position`.",15,[[["self"]],["position"]]],[11,"split","","Splits the `Span` into a pair of `Position`s.",15,N],[11,"as_str","","Captures a slice from the `&str` defined by the `Span`.",15,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["span"]]],[11,"eq","","",15,[[["self"],["span"]],["bool"]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"clone","","",2,[[["self"]],["token"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["token"]],["bool"]]],[11,"ne","","",2,[[["self"],["token"]],["bool"]]],[6,"ParseResult","","Type alias to simplify specifying the return value of chained closures.",N,N],[8,"Parser","","A trait with a single method that parses strings.",N,N],[10,"parse","","Parses a `&str` starting from `rule`.",16,[[["r"],["str"]],["result",["pairs","error"]]]],[8,"RuleType","","A trait which parser rules must implement.",N,N],[14,"parses_to","","Testing tool that compares produced tokens.",N,N],[14,"fails_with","","Testing tool that compares produced errors.",N,N]],"paths":[[4,"Atomicity"],[4,"Lookahead"],[4,"Token"],[3,"Error"],[4,"ErrorVariant"],[4,"InputLocation"],[3,"FlatPairs"],[3,"Pair"],[3,"Pairs"],[3,"Tokens"],[3,"ParserState"],[3,"Position"],[4,"Assoc"],[3,"Operator"],[3,"PrecClimber"],[3,"Span"],[8,"Parser"]]};
searchIndex["pest_derive"]={"doc":"pest. The Elegant Parser","items":[[5,"derive_parser","pest_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["pest_generator"]={"doc":"","items":[[5,"derive_parser","pest_generator","",N,[[["tokenstream"],["bool"]],["tokenstream"]]]],"paths":[]};
searchIndex["pest_meta"]={"doc":"","items":[[5,"unwrap_or_report","pest_meta","",N,[[["result"]],["t"]]],[0,"parser","","",N,N],[3,"PestParser","pest_meta::parser","",N,N],[3,"ParserRule","","",N,N],[12,"name","","",0,N],[12,"span","","",0,N],[12,"ty","","",0,N],[12,"node","","",0,N],[3,"ParserNode","","",N,N],[12,"expr","","",1,N],[12,"span","","",1,N],[4,"Rule","","",N,N],[13,"EOI","","",2,N],[13,"grammar_rules","","",2,N],[13,"grammar_rule","","",2,N],[13,"assignment_operator","","",2,N],[13,"opening_brace","","",2,N],[13,"closing_brace","","",2,N],[13,"opening_paren","","",2,N],[13,"closing_paren","","",2,N],[13,"modifier","","",2,N],[13,"silent_modifier","","",2,N],[13,"atomic_modifier","","",2,N],[13,"compound_atomic_modifier","","",2,N],[13,"non_atomic_modifier","","",2,N],[13,"expression","","",2,N],[13,"term","","",2,N],[13,"node","","",2,N],[13,"terminal","","",2,N],[13,"prefix_operator","","",2,N],[13,"infix_operator","","",2,N],[13,"postfix_operator","","",2,N],[13,"positive_predicate_operator","","",2,N],[13,"negative_predicate_operator","","",2,N],[13,"sequence_operator","","",2,N],[13,"choice_operator","","",2,N],[13,"optional_operator","","",2,N],[13,"repeat_operator","","",2,N],[13,"repeat_once_operator","","",2,N],[13,"repeat_exact","","",2,N],[13,"repeat_min","","",2,N],[13,"repeat_max","","",2,N],[13,"repeat_min_max","","",2,N],[13,"number","","",2,N],[13,"comma","","",2,N],[13,"_push","","",2,N],[13,"identifier","","",2,N],[13,"alpha","","",2,N],[13,"alpha_num","","",2,N],[13,"string","","",2,N],[13,"insensitive_string","","",2,N],[13,"range","","",2,N],[13,"character","","",2,N],[13,"inner_str","","",2,N],[13,"inner_chr","","",2,N],[13,"escape","","",2,N],[13,"code","","",2,N],[13,"unicode","","",2,N],[13,"hex_digit","","",2,N],[13,"quote","","",2,N],[13,"single_quote","","",2,N],[13,"range_operator","","",2,N],[13,"newline","","",2,N],[13,"WHITESPACE","","",2,N],[13,"COMMENT","","",2,N],[4,"ParserExpr","","",N,N],[13,"Str","","",3,N],[13,"Insens","","",3,N],[13,"Range","","",3,N],[13,"Ident","","",3,N],[13,"PosPred","","",3,N],[13,"NegPred","","",3,N],[13,"Seq","","",3,N],[13,"Choice","","",3,N],[13,"Opt","","",3,N],[13,"Rep","","",3,N],[13,"RepOnce","","",3,N],[13,"RepExact","","",3,N],[13,"RepMin","","",3,N],[13,"RepMax","","",3,N],[13,"RepMinMax","","",3,N],[13,"Push","","",3,N],[5,"parse","","",N,[[["rule"],["str"]],["result",["pairs","error"]]]],[5,"consume_rules","","",N,[[["pairs",["rule"]]],["result",["vec","vec"]]]],[11,"clone","","",2,[[["self"]],["rule"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"cmp","","",2,[[["self"],["rule"]],["ordering"]]],[11,"eq","","",2,[[["self"],["rule"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["rule"]],["option",["ordering"]]]],[11,"parse","","",4,[[["rule"],["str"]],["result",["pairs","error"]]]],[11,"clone","","",0,[[["self"]],["parserrule"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["parserrule"]],["bool"]]],[11,"ne","","",0,[[["self"],["parserrule"]],["bool"]]],[11,"clone","","",1,[[["self"]],["parsernode"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parsernode"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsernode"]],["bool"]]],[11,"filter_map_top_down","","",1,[[["self"],["f"]],["vec"]]],[11,"clone","","",3,[[["self"]],["parserexpr"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["parserexpr"]],["bool"]]],[11,"ne","","",3,[[["self"],["parserexpr"]],["bool"]]],[0,"ast","pest_meta","",N,N],[3,"Rule","pest_meta::ast","",N,N],[12,"name","","",5,N],[12,"ty","","",5,N],[12,"expr","","",5,N],[3,"ExprTopDownIterator","","",N,N],[4,"RuleType","","",N,N],[13,"Normal","","",6,N],[13,"Silent","","",6,N],[13,"Atomic","","",6,N],[13,"CompoundAtomic","","",6,N],[13,"NonAtomic","","",6,N],[4,"Expr","","",N,N],[13,"Str","","Matches an exact string, e.g. `\"a\"`",7,N],[13,"Insens","","Matches an exact string, case insensitively (ASCII only), e.g. `^\"a\"`",7,N],[13,"Range","","Matches one character in the range, e.g. `'a'..'z'`",7,N],[13,"Ident","","Matches the rule with the given name, e.g. `a`",7,N],[13,"PosPred","","Positive lookahead; matches expression without making progress, e.g. `&e`",7,N],[13,"NegPred","","Negative lookahead; matches if expression doesn't match, without making progress, e.g. `!e`",7,N],[13,"Seq","","Matches a sequence of two expressions, e.g. `e1 ~ e2`",7,N],[13,"Choice","","Matches either of two expressions, e.g. `e1 | e2`",7,N],[13,"Opt","","Optionally matches an expression, e.g. `e?`",7,N],[13,"Rep","","Matches an expression zero or more times, e.g. `e*`",7,N],[13,"RepOnce","","Matches an expression one or more times, e.g. `e+`",7,N],[13,"RepExact","","Matches an expression an exact number of times, e.g. `e{n}`",7,N],[13,"RepMin","","Matches an expression at least a number of times, e.g. `e{n,}`",7,N],[13,"RepMax","","Matches an expression at most a number of times, e.g. `e{,n}`",7,N],[13,"RepMinMax","","Matches an expression a number of times within a range, e.g. `e{m, n}`",7,N],[13,"Skip","","Continues to match expressions until one of the strings in the `Vec` is found",7,N],[13,"Push","","Matches an expression and pushes it to the stack, e.g. `push(e)`",7,N],[11,"clone","","",5,[[["self"]],["rule"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["rule"]],["bool"]]],[11,"ne","","",5,[[["self"],["rule"]],["bool"]]],[11,"clone","","",6,[[["self"]],["ruletype"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["ruletype"]],["bool"]]],[11,"clone","","",7,[[["self"]],["expr"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["expr"]],["bool"]]],[11,"ne","","",7,[[["self"],["expr"]],["bool"]]],[11,"iter_top_down","","",7,[[["self"]],["exprtopdowniterator"]]],[11,"map_top_down","","",7,[[["self"],["f"]],["expr"]]],[11,"map_bottom_up","","",7,[[["self"],["f"]],["expr"]]],[11,"new","","",8,[[["expr"]],["self"]]],[11,"next","","",8,[[["self"]],["option"]]],[0,"optimizer","pest_meta","",N,N],[3,"OptimizedRule","pest_meta::optimizer","",N,N],[12,"name","","",9,N],[12,"ty","","",9,N],[12,"expr","","",9,N],[3,"OptimizedExprTopDownIterator","","",N,N],[4,"OptimizedExpr","","",N,N],[13,"Str","","",10,N],[13,"Insens","","",10,N],[13,"Range","","",10,N],[13,"Ident","","",10,N],[13,"PosPred","","",10,N],[13,"NegPred","","",10,N],[13,"Seq","","",10,N],[13,"Choice","","",10,N],[13,"Opt","","",10,N],[13,"Rep","","",10,N],[13,"Skip","","",10,N],[13,"Push","","",10,N],[13,"RestoreOnErr","","",10,N],[5,"optimize","","",N,[[["vec",["rule"]]],["vec",["optimizedrule"]]]],[11,"clone","","",9,[[["self"]],["optimizedrule"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["optimizedrule"]],["bool"]]],[11,"ne","","",9,[[["self"],["optimizedrule"]],["bool"]]],[11,"clone","","",10,[[["self"]],["optimizedexpr"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["optimizedexpr"]],["bool"]]],[11,"ne","","",10,[[["self"],["optimizedexpr"]],["bool"]]],[11,"iter_top_down","","",10,[[["self"]],["optimizedexprtopdowniterator"]]],[11,"map_top_down","","",10,[[["self"],["f"]],["optimizedexpr"]]],[11,"map_bottom_up","","",10,[[["self"],["f"]],["optimizedexpr"]]],[11,"new","","",11,[[["optimizedexpr"]],["self"]]],[11,"next","","",11,[[["self"]],["option"]]],[0,"validator","pest_meta","",N,N],[5,"validate_pairs","pest_meta::validator","",N,[[["pairs",["rule"]]],["result",["vec","vec"]]]],[5,"validate_rust_keywords","","",N,[[["vec"],["hashset"]],["vec",["error"]]]],[5,"validate_pest_keywords","","",N,[[["vec"],["hashset"]],["vec",["error"]]]],[5,"validate_already_defined","","",N,[[["vec"]],["vec",["error"]]]],[5,"validate_undefined","","",N,[[["vec"],["vec"],["hashset"]],["vec",["error"]]]],[5,"validate_ast","","",N,[[["vec"]],["vec",["error"]]]]],"paths":[[3,"ParserRule"],[3,"ParserNode"],[4,"Rule"],[4,"ParserExpr"],[3,"PestParser"],[3,"Rule"],[4,"RuleType"],[4,"Expr"],[3,"ExprTopDownIterator"],[3,"OptimizedRule"],[4,"OptimizedExpr"],[3,"OptimizedExprTopDownIterator"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"clone","","",7,[[["self"]],["uniform"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"sample","","",7,[[["self"],["r"]],["x"]]],[11,"from","","",7,[[["range"]],["uniform"]]],[11,"clone","","",8,[[["self"]],["uniformint"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"clone","","",9,[[["self"]],["uniformfloat"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"clone","","",10,[[["self"]],["uniformduration"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",10,[[["self"],["r"]],["duration"]]],[11,"clone","rand::distributions","",11,[[["self"]],["gamma"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,[[["f64"],["f64"]],["gamma"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"clone","","",12,[[["self"]],["chisquared"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,[[["f64"]],["chisquared"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"clone","","",13,[[["self"]],["fisherf"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,[[["f64"],["f64"]],["fisherf"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"clone","","",14,[[["self"]],["studentt"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,[[["f64"]],["studentt"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"clone","","",15,[[["self"]],["standardnormal"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"clone","","",16,[[["self"]],["normal"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,[[["f64"],["f64"]],["normal"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"clone","","",17,[[["self"]],["lognormal"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,[[["f64"],["f64"]],["lognormal"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"clone","","",18,[[["self"]],["exp1"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"sample","","",18,[[["self"],["r"]],["f64"]]],[11,"clone","","",19,[[["self"]],["exp"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,[[["f64"]],["exp"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"clone","","",20,[[["self"]],["pareto"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",20,[[["f64"],["f64"]],["pareto"]]],[11,"sample","","",20,[[["self"],["r"]],["f64"]]],[11,"clone","","",21,[[["self"]],["poisson"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",21,[[["f64"]],["poisson"]]],[11,"sample","","",21,[[["self"],["r"]],["u64"]]],[11,"clone","","",22,[[["self"]],["binomial"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",22,[[["u64"],["f64"]],["binomial"]]],[11,"sample","","",22,[[["self"],["r"]],["u64"]]],[11,"clone","","",23,[[["self"]],["bernoulli"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",23,[[["f64"]],["bernoulli"]]],[11,"sample","","",23,[[["self"],["r"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cauchy"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",24,[[["f64"],["f64"]],["cauchy"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"clone","","",25,[[["self"]],["openclosed01"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["open01"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["f32"]]],[11,"sample","","",25,[[["self"],["r"]],["f32"]]],[11,"sample","","",26,[[["self"],["r"]],["f32"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["u8"]]],[11,"sample","","",27,[[["self"],["r"]],["u16"]]],[11,"sample","","",27,[[["self"],["r"]],["u32"]]],[11,"sample","","",27,[[["self"],["r"]],["u64"]]],[11,"sample","","",27,[[["self"],["r"]],["u128"]]],[11,"sample","","",27,[[["self"],["r"]],["usize"]]],[11,"sample","","",27,[[["self"],["r"]],["i8"]]],[11,"sample","","",27,[[["self"],["r"]],["i16"]]],[11,"sample","","",27,[[["self"],["r"]],["i32"]]],[11,"sample","","",27,[[["self"],["r"]],["i64"]]],[11,"sample","","",27,[[["self"],["r"]],["i128"]]],[11,"sample","","",27,[[["self"],["r"]],["isize"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["char"]]],[11,"sample","","",28,[[["self"],["r"]],["char"]]],[11,"sample","","",27,[[["self"],["r"]],["bool"]]],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,[[["self"],["r"]],["option"]]],[11,"sample","","",27,[[["self"],["r"]],["wrapping"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",29,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",19,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",16,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["f64"]]],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",30,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",31,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["distiter"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"clone","","",27,[[["self"]],["standard"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `WeightedChoice`.",29,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"clone","","",34,[[["self"]],["chacharng"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"from_seed","","",34,N],[11,"from_rng","","",34,[[["r"]],["result",["error"]]]],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",34,[[],["chacharng"]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit words.",34,[[["self"]],["u128"]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit words.",34,[[["self"],["u128"]]]],[11,"set_stream","","Set the stream number.",34,[[["self"],["u64"]]]],[11,"clone","","",35,[[["self"]],["chachacore"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"generate","","",35,N],[11,"from_seed","","",35,N],[11,"from","","",34,[[["chachacore"]],["self"]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[11,"clone","","",36,[[["self"]],["hc128rng"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",36,[[["self"]],["u32"]]],[11,"next_u64","","",36,[[["self"]],["u64"]]],[11,"fill_bytes","","",36,N],[11,"try_fill_bytes","","",36,N],[11,"from_seed","","",36,N],[11,"from_rng","","",36,[[["r"]],["result",["error"]]]],[11,"clone","","",37,[[["self"]],["hc128core"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"generate","","",37,N],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",37,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"clone","","",38,[[["self"]],["isaacrng"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",38,[[["self"]],["u32"]]],[11,"next_u64","","",38,[[["self"]],["u64"]]],[11,"fill_bytes","","",38,N],[11,"try_fill_bytes","","",38,N],[11,"from_seed","","",38,N],[11,"from_rng","","",38,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",38,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",38,[[["u64"]],["self"]]],[11,"clone","","",39,[[["self"]],["isaaccore"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",39,[[["self"],["isaacarray"]]]],[11,"from_seed","","",39,N],[11,"from_rng","","",39,[[["r"]],["result",["error"]]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"clone","","",40,[[["self"]],["isaac64rng"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",40,[[["self"]],["u32"]]],[11,"next_u64","","",40,[[["self"]],["u64"]]],[11,"fill_bytes","","",40,N],[11,"try_fill_bytes","","",40,N],[11,"from_seed","","",40,N],[11,"from_rng","","",40,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",40,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",40,[[["u64"]],["self"]]],[11,"clone","","",41,[[["self"]],["isaac64core"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",41,[[["self"],["isaacarray"]]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",41,[[["u64"]],["self"]]],[11,"from_seed","","",41,N],[11,"from_rng","","",41,[[["r"]],["result",["error"]]]],[11,"clone","rand::prng","",42,[[["self"]],["xorshiftrng"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",42,[[],["xorshiftrng"]]],[11,"next_u32","","",42,[[["self"]],["u32"]]],[11,"next_u64","","",42,[[["self"]],["u64"]]],[11,"fill_bytes","","",42,N],[11,"try_fill_bytes","","",42,N],[11,"from_seed","","",42,N],[11,"from_rng","","",42,[[["r"]],["result",["error"]]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",43,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",43,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",43,N],[13,"TinyVariantions","","Variations of deltas of time too small.",43,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",43,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReadRng` from a `Read`.",44,[[["r"]],["readrng"]]],[11,"next_u32","","",44,[[["self"]],["u32"]]],[11,"next_u64","","",44,[[["self"]],["u64"]]],[11,"fill_bytes","","",44,N],[11,"try_fill_bytes","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",45,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",45,[[["self"]],["result",["error"]]]],[11,"next_u32","","",45,[[["self"]],["u32"]]],[11,"next_u64","","",45,[[["self"]],["u64"]]],[11,"fill_bytes","","",45,N],[11,"try_fill_bytes","","",45,N],[11,"clone","","",45,[[["self"]],["reseedingrng"]]],[11,"fmt","rand::rngs","",46,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `EntropyRng`.",46,[[],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"next_u32","","",46,[[["self"]],["u32"]]],[11,"next_u64","","",46,[[["self"]],["u64"]]],[11,"fill_bytes","","",46,N],[11,"try_fill_bytes","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["jitterrng"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["timererror"]]],[11,"eq","","",43,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",47,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",47,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",47,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",47,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",47,[[["self"],["bool"]],["i64"]]],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"next_u64","","",47,[[["self"]],["u64"]]],[11,"fill_bytes","","",47,N],[11,"try_fill_bytes","","",47,N],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["steprng"]]],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",48,[[["u64"],["u64"]],["self"]]],[11,"next_u32","","",48,[[["self"]],["u32"]]],[11,"next_u64","","",48,[[["self"]],["u64"]]],[11,"fill_bytes","","",48,N],[11,"try_fill_bytes","","",48,N],[11,"clone","rand::rngs","",49,[[["self"]],["smallrng"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",49,[[["self"]],["u32"]]],[11,"next_u64","","",49,[[["self"]],["u64"]]],[11,"fill_bytes","","",49,N],[11,"try_fill_bytes","","",49,N],[11,"from_seed","","",49,N],[11,"from_rng","","",49,[[["r"]],["result",["error"]]]],[11,"clone","","",50,[[["self"]],["stdrng"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",50,[[["self"]],["u32"]]],[11,"next_u64","","",50,[[["self"]],["u64"]]],[11,"fill_bytes","","",50,N],[11,"try_fill_bytes","","",50,N],[11,"from_seed","","",50,N],[11,"from_rng","","",50,[[["r"]],["result",["error"]]]],[11,"clone","","",51,[[["self"]],["threadrng"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",51,[[["self"]],["u32"]]],[11,"next_u64","","",51,[[["self"]],["u64"]]],[11,"fill_bytes","","",51,N],[11,"try_fill_bytes","","",51,N],[11,"clone","","",52,[[["self"]],["osrng"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `OsRng`.",52,[[],["result",["osrng","error"]]]],[11,"next_u32","","",52,[[["self"]],["u32"]]],[11,"next_u64","","",52,[[["self"]],["u64"]]],[11,"fill_bytes","","",52,N],[11,"try_fill_bytes","","",52,N],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",53,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",54,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",54,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",54,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",54,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",54,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",54,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",54,N],[11,"shuffle","","Shuffle a mutable slice in place.",54,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",54,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",54,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",54,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",55,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",55,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",56,[[],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"next","","",57,[[["self"]],["option"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"next","","",58,[[["self"]],["option",["char"]]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"read","","",0,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[4,"ErrorKind","rand_core","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",0,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",0,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",0,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",0,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",1,N],[12,"msg","","The error message",1,N],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",2,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",2,N],[10,"generate","","Generate a new block of results.",2,N],[3,"BlockRng","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",4,N],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",6,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",0,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",0,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",0,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"clone","rand_core::block","",3,[[["self"]],["blockrng"]]],[11,"clone","","",4,[[["self"]],["blockrng64"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_seed","","",3,N],[11,"seed_from_u64","","",3,[[["u64"]],["blockrng"]]],[11,"from_rng","","",3,[[["s"]],["result",["blockrng","error"]]]],[11,"from_seed","","",4,N],[11,"seed_from_u64","","",4,[[["u64"]],["blockrng64"]]],[11,"from_rng","","",4,[[["s"]],["result",["blockrng64","error"]]]],[11,"description","rand_core","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"next_u32","rand_core::block","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"next_u32","","",4,[[["self"]],["u32"]]],[11,"next_u64","","",4,[[["self"]],["u64"]]],[11,"fill_bytes","","",4,N],[11,"try_fill_bytes","","",4,N],[11,"read","rand_core","",5,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"new","","Create a new instance, with specified kind and a message.",1,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",1,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",1,[[["self"]],["option",["box"]]]],[11,"new","rand_core::block","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,N],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",4,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",4,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",4,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",4,N]],"paths":[[4,"ErrorKind"],[3,"Error"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[11,"default","","",0,[[],["self"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N]],"paths":[[3,"Buffer"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"decode_hex_escape","","",21,[[["self"]],["result",["u16"]]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"decode_hex_escape","","",22,[[["self"]],["result",["u16"]]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[11,"decode_hex_escape","","",23,[[["self"]],["result",["u16"]]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_urlencoded"]={"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",N,N],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",N,N],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",N,N],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",N,[[["r"]],["result",["error"]]]],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",N,[[["str"]],["result",["error"]]]],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",N,[[["t"]],["result",["string","error"]]]],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",N,N],[3,"Error","serde_urlencoded::de","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",N,N],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",N,N],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",N,[[["str"]],["result",["error"]]]],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",N,[[["r"]],["result",["error"]]]],[11,"new","","Returns a new `Deserializer`.",0,[[["urlencodedparse"]],["self"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",N,N],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",N,N],[3,"SeqSerializer","","Sequence serializer.",N,N],[3,"TupleSerializer","","Tuple serializer.",N,N],[3,"TupleStructSerializer","","Tuple struct serializer.",N,N],[3,"TupleVariantSerializer","","Tuple variant serializer.",N,N],[3,"MapSerializer","","Map serializer.",N,N],[3,"StructSerializer","","Struct serializer.",N,N],[3,"StructVariantSerializer","","Struct variant serializer.",N,N],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",N,N],[13,"Custom","","",1,N],[13,"Utf8","","",1,N],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",N,[[["t"]],["result",["string","error"]]]],[11,"new","","Returns a new `Serializer`.",2,[[["urlencodedserializer"]],["self"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,[[["self"]],["option",["error"]]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"serialize_bool","","Returns an error.",2,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_i8","","Returns an error.",2,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","Returns an error.",2,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","Returns an error.",2,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","Returns an error.",2,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_u8","","Returns an error.",2,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","Returns an error.",2,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","Returns an error.",2,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","Returns an error.",2,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","Returns an error.",2,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","Returns an error.",2,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","Returns an error.",2,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","Returns an error.",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_bytes","","Returns an error.",2,N],[11,"serialize_unit","","Returns an error.",2,[[["self"]],["result",["error"]]]],[11,"serialize_unit_struct","","Returns an error.",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"]],["result",["error"]]]],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_newtype_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["t"]],["result",["error"]]]],[11,"serialize_none","","Returns `Ok`.",2,[[["self"]],["result",["error"]]]],[11,"serialize_some","","Serializes the given value.",2,[[["self"],["t"]],["result",["error"]]]],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_tuple","","Returns an error.",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_struct","","Returns an error.",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_map","","Serializes a map, given length is ignored.",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_element","","",3,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",3,[[["self"]],["result",["error"]]]],[11,"serialize_element","","",4,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",4,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",5,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",5,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",6,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",6,[[["self"]],["result",["error"]]]],[11,"serialize_entry","","",7,[[["self"],["k"],["v"]],["result",["error"]]]],[11,"serialize_key","","",7,[[["self"],["t"]],["result",["error"]]]],[11,"serialize_value","","",7,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",7,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",8,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"end","","",8,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",9,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"end","","",9,[[["self"]],["result",["error"]]]],[11,"clone","serde_urlencoded::de","",10,[[["self"]],["error"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"custom","","",10,[[["t"]],["error"]]],[11,"custom","","",10,[[["t"]],["error"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",10,[[["self"],["error"]],["bool"]]],[11,"ne","","",10,[[["self"],["error"]],["bool"]]]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["sha1"]={"doc":"An implementation of the SHA-1 cryptographic hash algorithm. To use this module, first create a `Sha1` object using the `Sha1` constructor, then feed it an input message using the `input` or `input_str` methods, which may be called any number of times; they will buffer the input until there is enough to call the block algorithm.","items":[[8,"Digest","sha1","The `Digest` trait specifies an interface common for digest functions.",N,N],[11,"new","","Create new hasher instance",0,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",0,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",0,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",0,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",0,[[["str"]],["genericarray",["u8"]]]],[3,"Sha1","","Structure representing the state of a SHA-1 computation",N,N],[11,"clone","","",1,[[["self"]],["sha1"]]],[11,"default","","",1,[[],["self"]]],[11,"process","","",1,N],[11,"fixed_result","","",1,[[["self"]],["genericarray",["u8"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Digest"],[3,"Sha1"]]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to a vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"default","","",0,[[],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Return the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values.",0,[[["self"]]]],[11,"len","","Return the number of stored values.",0,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there are no values stored in the slab.",0,[[["self"]],["bool"]]],[11,"iter","","Return an iterator over the slab.",0,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Return a reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Return a mutable reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Return a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Return a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value.",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Return a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Remove and return the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Return `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["slug"]={"doc":"","items":[[5,"slugify","slug","Convert any unicode string to an ascii \"slug\" (useful for file names/url components)",N,[[["s"]],["string"]]]],"paths":[]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",4,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N]],"paths":[]};
searchIndex["string"]={"doc":"A UTF-8 encoded string with configurable byte storage.","items":[[3,"String","string","A UTF-8 encoded string with configurable byte storage.",N,N],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",0,N],[10,"try_from","","Performs the conversion.",0,[[["t"]],["result"]]],[11,"clone","","",1,[[["self"]],["string"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"ne","","",1,[[["self"],["string"]],["bool"]]],[11,"cmp","","",1,[[["self"],["string"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["string"]],["bool"]]],[11,"le","","",1,[[["self"],["string"]],["bool"]]],[11,"gt","","",1,[[["self"],["string"]],["bool"]]],[11,"ge","","",1,[[["self"],["string"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["string"]]],[11,"get_ref","","Get a reference to the underlying byte storage.",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the underlying byte storage.",1,[[["self"]],["t"]]],[11,"into_inner","","Unwraps this `String`, returning the underlying byte storage.",1,[[["self"]],["t"]]],[11,"new","","Creates a new empty `String`.",1,[[],["string"]]],[11,"from_utf8_unchecked","","Converts the provided value to a `String` without checking that the given value is valid UTF-8.",1,[[["t"]],["string"]]],[11,"deref","","",1,[[["self"]],["str"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"try_from","","",1,[[["t"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[8,"TryFrom"],[3,"String"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",42,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",56,N],[12,"lt_token","","",56,N],[12,"args","","",56,N],[12,"gt_token","","",56,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",57,N],[12,"eq_token","","",57,N],[12,"ty","","",57,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",58,N],[12,"colon_token","","",58,N],[12,"bounds","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Async","","An async block: `async { ... }`.",68,N],[13,"TryBlock","","A try block: `try { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"spans","","",87,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",88,N],[3,"As","","`as`",N,N],[12,"span","","",89,N],[3,"Async","","`async`",N,N],[12,"span","","",90,N],[3,"Auto","","`auto`",N,N],[12,"span","","",91,N],[3,"Become","","`become`",N,N],[12,"span","","",92,N],[3,"Box","","`box`",N,N],[12,"span","","",93,N],[3,"Break","","`break`",N,N],[12,"span","","",94,N],[3,"CapSelf","","`Self`",N,N],[12,"span","","",95,N],[3,"Const","","`const`",N,N],[12,"span","","",96,N],[3,"Continue","","`continue`",N,N],[12,"span","","",97,N],[3,"Crate","","`crate`",N,N],[12,"span","","",98,N],[3,"Default","","`default`",N,N],[12,"span","","",99,N],[3,"Do","","`do`",N,N],[12,"span","","",100,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",101,N],[3,"Else","","`else`",N,N],[12,"span","","",102,N],[3,"Enum","","`enum`",N,N],[12,"span","","",103,N],[3,"Existential","","`existential`",N,N],[12,"span","","",104,N],[3,"Extern","","`extern`",N,N],[12,"span","","",105,N],[3,"Final","","`final`",N,N],[12,"span","","",106,N],[3,"Fn","","`fn`",N,N],[12,"span","","",107,N],[3,"For","","`for`",N,N],[12,"span","","",108,N],[3,"If","","`if`",N,N],[12,"span","","",109,N],[3,"Impl","","`impl`",N,N],[12,"span","","",110,N],[3,"In","","`in`",N,N],[12,"span","","",111,N],[3,"Let","","`let`",N,N],[12,"span","","",112,N],[3,"Loop","","`loop`",N,N],[12,"span","","",113,N],[3,"Macro","","`macro`",N,N],[12,"span","","",114,N],[3,"Match","","`match`",N,N],[12,"span","","",115,N],[3,"Mod","","`mod`",N,N],[12,"span","","",116,N],[3,"Move","","`move`",N,N],[12,"span","","",117,N],[3,"Mut","","`mut`",N,N],[12,"span","","",118,N],[3,"Override","","`override`",N,N],[12,"span","","",119,N],[3,"Priv","","`priv`",N,N],[12,"span","","",120,N],[3,"Pub","","`pub`",N,N],[12,"span","","",121,N],[3,"Ref","","`ref`",N,N],[12,"span","","",122,N],[3,"Return","","`return`",N,N],[12,"span","","",123,N],[3,"Self_","","`self`",N,N],[12,"span","","",124,N],[3,"Static","","`static`",N,N],[12,"span","","",125,N],[3,"Struct","","`struct`",N,N],[12,"span","","",126,N],[3,"Super","","`super`",N,N],[12,"span","","",127,N],[3,"Trait","","`trait`",N,N],[12,"span","","",128,N],[3,"Try","","`try`",N,N],[12,"span","","",129,N],[3,"Type","","`type`",N,N],[12,"span","","",130,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",131,N],[3,"Union","","`union`",N,N],[12,"span","","",132,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",133,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",134,N],[3,"Use","","`use`",N,N],[12,"span","","",135,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",136,N],[3,"Where","","`where`",N,N],[12,"span","","",137,N],[3,"While","","`while`",N,N],[12,"span","","",138,N],[3,"Yield","","`yield`",N,N],[12,"span","","",139,N],[3,"Add","","`+`",N,N],[12,"spans","","",140,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",141,N],[3,"And","","`&`",N,N],[12,"spans","","",142,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",143,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",144,N],[3,"At","","`@`",N,N],[12,"spans","","",145,N],[3,"Bang","","`!`",N,N],[12,"spans","","",146,N],[3,"Caret","","`^`",N,N],[12,"spans","","",147,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",148,N],[3,"Colon","","`:`",N,N],[12,"spans","","",149,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",150,N],[3,"Comma","","`,`",N,N],[12,"spans","","",151,N],[3,"Div","","`/`",N,N],[12,"spans","","",152,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",153,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",154,N],[3,"Dot","","`.`",N,N],[12,"spans","","",155,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",156,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",157,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",158,N],[3,"Eq","","`=`",N,N],[12,"spans","","",159,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",160,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",161,N],[3,"Gt","","`>`",N,N],[12,"spans","","",162,N],[3,"Le","","`<=`",N,N],[12,"spans","","",163,N],[3,"Lt","","`<`",N,N],[12,"spans","","",164,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",165,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",166,N],[3,"Or","","`|`",N,N],[12,"spans","","",167,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",168,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",169,N],[3,"Pound","","`#`",N,N],[12,"spans","","",170,N],[3,"Question","","`?`",N,N],[12,"spans","","",171,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",172,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",173,N],[3,"Rem","","`%`",N,N],[12,"spans","","",174,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",175,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",176,N],[3,"Semi","","`;`",N,N],[12,"spans","","",177,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",178,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",179,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",180,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",181,N],[3,"Star","","`*`",N,N],[12,"spans","","",182,N],[3,"Sub","","`-`",N,N],[12,"spans","","",183,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",184,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",185,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",186,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",187,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",188,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",189,N],[8,"Token","","Marker trait for types that represent single tokens.",N,N],[11,"peek","syn","",31,[[["cursor"]],["bool"]]],[11,"display","","",31,[[],["str"]]],[11,"peek","","",76,[[["cursor"]],["bool"]]],[11,"display","","",76,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",32,[[["cursor"]],["bool"]]],[11,"display","","",32,[[],["str"]]],[11,"clone","syn::token","",87,[[["self"]],["underscore"]]],[11,"default","","",87,[[],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"peek","","",87,[[["cursor"]],["bool"]]],[11,"display","","",87,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"clone","","",88,[[["self"]],["abstract"]]],[11,"default","","",88,[[],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"peek","","",88,[[["cursor"]],["bool"]]],[11,"display","","",88,[[],["str"]]],[11,"clone","","",89,[[["self"]],["as"]]],[11,"default","","",89,[[],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["parsestream"]],["result"]]],[11,"peek","","",89,[[["cursor"]],["bool"]]],[11,"display","","",89,[[],["str"]]],[11,"clone","","",90,[[["self"]],["async"]]],[11,"default","","",90,[[],["self"]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"peek","","",90,[[["cursor"]],["bool"]]],[11,"display","","",90,[[],["str"]]],[11,"clone","","",91,[[["self"]],["auto"]]],[11,"default","","",91,[[],["self"]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"peek","","",91,[[["cursor"]],["bool"]]],[11,"display","","",91,[[],["str"]]],[11,"clone","","",92,[[["self"]],["become"]]],[11,"default","","",92,[[],["self"]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"peek","","",92,[[["cursor"]],["bool"]]],[11,"display","","",92,[[],["str"]]],[11,"clone","","",93,[[["self"]],["box"]]],[11,"default","","",93,[[],["self"]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"peek","","",93,[[["cursor"]],["bool"]]],[11,"display","","",93,[[],["str"]]],[11,"clone","","",94,[[["self"]],["break"]]],[11,"default","","",94,[[],["self"]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["parsestream"]],["result"]]],[11,"peek","","",94,[[["cursor"]],["bool"]]],[11,"display","","",94,[[],["str"]]],[11,"clone","","",95,[[["self"]],["capself"]]],[11,"default","","",95,[[],["self"]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["parsestream"]],["result"]]],[11,"peek","","",95,[[["cursor"]],["bool"]]],[11,"display","","",95,[[],["str"]]],[11,"clone","","",96,[[["self"]],["const"]]],[11,"default","","",96,[[],["self"]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["parsestream"]],["result"]]],[11,"peek","","",96,[[["cursor"]],["bool"]]],[11,"display","","",96,[[],["str"]]],[11,"clone","","",97,[[["self"]],["continue"]]],[11,"default","","",97,[[],["self"]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["parsestream"]],["result"]]],[11,"peek","","",97,[[["cursor"]],["bool"]]],[11,"display","","",97,[[],["str"]]],[11,"clone","","",98,[[["self"]],["crate"]]],[11,"default","","",98,[[],["self"]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["parsestream"]],["result"]]],[11,"peek","","",98,[[["cursor"]],["bool"]]],[11,"display","","",98,[[],["str"]]],[11,"clone","","",99,[[["self"]],["default"]]],[11,"default","","",99,[[],["self"]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"peek","","",99,[[["cursor"]],["bool"]]],[11,"display","","",99,[[],["str"]]],[11,"clone","","",100,[[["self"]],["do"]]],[11,"default","","",100,[[],["self"]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"clone","","",101,[[["self"]],["dyn"]]],[11,"default","","",101,[[],["self"]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"clone","","",102,[[["self"]],["else"]]],[11,"default","","",102,[[],["self"]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"peek","","",102,[[["cursor"]],["bool"]]],[11,"display","","",102,[[],["str"]]],[11,"clone","","",103,[[["self"]],["enum"]]],[11,"default","","",103,[[],["self"]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["parsestream"]],["result"]]],[11,"peek","","",103,[[["cursor"]],["bool"]]],[11,"display","","",103,[[],["str"]]],[11,"clone","","",104,[[["self"]],["existential"]]],[11,"default","","",104,[[],["self"]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["parsestream"]],["result"]]],[11,"peek","","",104,[[["cursor"]],["bool"]]],[11,"display","","",104,[[],["str"]]],[11,"clone","","",105,[[["self"]],["extern"]]],[11,"default","","",105,[[],["self"]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["parsestream"]],["result"]]],[11,"peek","","",105,[[["cursor"]],["bool"]]],[11,"display","","",105,[[],["str"]]],[11,"clone","","",106,[[["self"]],["final"]]],[11,"default","","",106,[[],["self"]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"peek","","",106,[[["cursor"]],["bool"]]],[11,"display","","",106,[[],["str"]]],[11,"clone","","",107,[[["self"]],["fn"]]],[11,"default","","",107,[[],["self"]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"peek","","",107,[[["cursor"]],["bool"]]],[11,"display","","",107,[[],["str"]]],[11,"clone","","",108,[[["self"]],["for"]]],[11,"default","","",108,[[],["self"]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["parsestream"]],["result"]]],[11,"peek","","",108,[[["cursor"]],["bool"]]],[11,"display","","",108,[[],["str"]]],[11,"clone","","",109,[[["self"]],["if"]]],[11,"default","","",109,[[],["self"]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"peek","","",109,[[["cursor"]],["bool"]]],[11,"display","","",109,[[],["str"]]],[11,"clone","","",110,[[["self"]],["impl"]]],[11,"default","","",110,[[],["self"]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"peek","","",110,[[["cursor"]],["bool"]]],[11,"display","","",110,[[],["str"]]],[11,"clone","","",111,[[["self"]],["in"]]],[11,"default","","",111,[[],["self"]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"peek","","",111,[[["cursor"]],["bool"]]],[11,"display","","",111,[[],["str"]]],[11,"clone","","",112,[[["self"]],["let"]]],[11,"default","","",112,[[],["self"]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"peek","","",112,[[["cursor"]],["bool"]]],[11,"display","","",112,[[],["str"]]],[11,"clone","","",113,[[["self"]],["loop"]]],[11,"default","","",113,[[],["self"]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"peek","","",113,[[["cursor"]],["bool"]]],[11,"display","","",113,[[],["str"]]],[11,"clone","","",114,[[["self"]],["macro"]]],[11,"default","","",114,[[],["self"]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"peek","","",114,[[["cursor"]],["bool"]]],[11,"display","","",114,[[],["str"]]],[11,"clone","","",115,[[["self"]],["match"]]],[11,"default","","",115,[[],["self"]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"peek","","",115,[[["cursor"]],["bool"]]],[11,"display","","",115,[[],["str"]]],[11,"clone","","",116,[[["self"]],["mod"]]],[11,"default","","",116,[[],["self"]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"peek","","",116,[[["cursor"]],["bool"]]],[11,"display","","",116,[[],["str"]]],[11,"clone","","",117,[[["self"]],["move"]]],[11,"default","","",117,[[],["self"]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"peek","","",117,[[["cursor"]],["bool"]]],[11,"display","","",117,[[],["str"]]],[11,"clone","","",118,[[["self"]],["mut"]]],[11,"default","","",118,[[],["self"]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"peek","","",118,[[["cursor"]],["bool"]]],[11,"display","","",118,[[],["str"]]],[11,"clone","","",119,[[["self"]],["override"]]],[11,"default","","",119,[[],["self"]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"peek","","",119,[[["cursor"]],["bool"]]],[11,"display","","",119,[[],["str"]]],[11,"clone","","",120,[[["self"]],["priv"]]],[11,"default","","",120,[[],["self"]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"peek","","",120,[[["cursor"]],["bool"]]],[11,"display","","",120,[[],["str"]]],[11,"clone","","",121,[[["self"]],["pub"]]],[11,"default","","",121,[[],["self"]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"peek","","",121,[[["cursor"]],["bool"]]],[11,"display","","",121,[[],["str"]]],[11,"clone","","",122,[[["self"]],["ref"]]],[11,"default","","",122,[[],["self"]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"peek","","",122,[[["cursor"]],["bool"]]],[11,"display","","",122,[[],["str"]]],[11,"clone","","",123,[[["self"]],["return"]]],[11,"default","","",123,[[],["self"]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"peek","","",123,[[["cursor"]],["bool"]]],[11,"display","","",123,[[],["str"]]],[11,"clone","","",124,[[["self"]],["self_"]]],[11,"default","","",124,[[],["self"]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"peek","","",124,[[["cursor"]],["bool"]]],[11,"display","","",124,[[],["str"]]],[11,"clone","","",125,[[["self"]],["static"]]],[11,"default","","",125,[[],["self"]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["parsestream"]],["result"]]],[11,"peek","","",125,[[["cursor"]],["bool"]]],[11,"display","","",125,[[],["str"]]],[11,"clone","","",126,[[["self"]],["struct"]]],[11,"default","","",126,[[],["self"]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["parsestream"]],["result"]]],[11,"peek","","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"clone","","",127,[[["self"]],["super"]]],[11,"default","","",127,[[],["self"]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["parsestream"]],["result"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"clone","","",128,[[["self"]],["trait"]]],[11,"default","","",128,[[],["self"]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["parsestream"]],["result"]]],[11,"peek","","",128,[[["cursor"]],["bool"]]],[11,"display","","",128,[[],["str"]]],[11,"clone","","",129,[[["self"]],["try"]]],[11,"default","","",129,[[],["self"]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["parsestream"]],["result"]]],[11,"peek","","",129,[[["cursor"]],["bool"]]],[11,"display","","",129,[[],["str"]]],[11,"clone","","",130,[[["self"]],["type"]]],[11,"default","","",130,[[],["self"]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["parsestream"]],["result"]]],[11,"peek","","",130,[[["cursor"]],["bool"]]],[11,"display","","",130,[[],["str"]]],[11,"clone","","",131,[[["self"]],["typeof"]]],[11,"default","","",131,[[],["self"]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["parsestream"]],["result"]]],[11,"peek","","",131,[[["cursor"]],["bool"]]],[11,"display","","",131,[[],["str"]]],[11,"clone","","",132,[[["self"]],["union"]]],[11,"default","","",132,[[],["self"]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["parsestream"]],["result"]]],[11,"peek","","",132,[[["cursor"]],["bool"]]],[11,"display","","",132,[[],["str"]]],[11,"clone","","",133,[[["self"]],["unsafe"]]],[11,"default","","",133,[[],["self"]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["parsestream"]],["result"]]],[11,"peek","","",133,[[["cursor"]],["bool"]]],[11,"display","","",133,[[],["str"]]],[11,"clone","","",134,[[["self"]],["unsized"]]],[11,"default","","",134,[[],["self"]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"parse","","",134,[[["parsestream"]],["result"]]],[11,"peek","","",134,[[["cursor"]],["bool"]]],[11,"display","","",134,[[],["str"]]],[11,"clone","","",135,[[["self"]],["use"]]],[11,"default","","",135,[[],["self"]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"parse","","",135,[[["parsestream"]],["result"]]],[11,"peek","","",135,[[["cursor"]],["bool"]]],[11,"display","","",135,[[],["str"]]],[11,"clone","","",136,[[["self"]],["virtual"]]],[11,"default","","",136,[[],["self"]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"parse","","",136,[[["parsestream"]],["result"]]],[11,"peek","","",136,[[["cursor"]],["bool"]]],[11,"display","","",136,[[],["str"]]],[11,"clone","","",137,[[["self"]],["where"]]],[11,"default","","",137,[[],["self"]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"parse","","",137,[[["parsestream"]],["result"]]],[11,"peek","","",137,[[["cursor"]],["bool"]]],[11,"display","","",137,[[],["str"]]],[11,"clone","","",138,[[["self"]],["while"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["parsestream"]],["result"]]],[11,"peek","","",138,[[["cursor"]],["bool"]]],[11,"display","","",138,[[],["str"]]],[11,"clone","","",139,[[["self"]],["yield"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["parsestream"]],["result"]]],[11,"peek","","",139,[[["cursor"]],["bool"]]],[11,"display","","",139,[[],["str"]]],[11,"clone","","",140,[[["self"]],["add"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["parsestream"]],["result"]]],[11,"peek","","",140,[[["cursor"]],["bool"]]],[11,"display","","",140,[[],["str"]]],[11,"clone","","",141,[[["self"]],["addeq"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["parsestream"]],["result"]]],[11,"peek","","",141,[[["cursor"]],["bool"]]],[11,"display","","",141,[[],["str"]]],[11,"clone","","",142,[[["self"]],["and"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"peek","","",142,[[["cursor"]],["bool"]]],[11,"display","","",142,[[],["str"]]],[11,"clone","","",143,[[["self"]],["andand"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"peek","","",143,[[["cursor"]],["bool"]]],[11,"display","","",143,[[],["str"]]],[11,"clone","","",144,[[["self"]],["andeq"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"peek","","",144,[[["cursor"]],["bool"]]],[11,"display","","",144,[[],["str"]]],[11,"clone","","",145,[[["self"]],["at"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"peek","","",145,[[["cursor"]],["bool"]]],[11,"display","","",145,[[],["str"]]],[11,"clone","","",146,[[["self"]],["bang"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"peek","","",146,[[["cursor"]],["bool"]]],[11,"display","","",146,[[],["str"]]],[11,"clone","","",147,[[["self"]],["caret"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"peek","","",147,[[["cursor"]],["bool"]]],[11,"display","","",147,[[],["str"]]],[11,"clone","","",148,[[["self"]],["careteq"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["parsestream"]],["result"]]],[11,"peek","","",148,[[["cursor"]],["bool"]]],[11,"display","","",148,[[],["str"]]],[11,"clone","","",149,[[["self"]],["colon"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["parsestream"]],["result"]]],[11,"peek","","",149,[[["cursor"]],["bool"]]],[11,"display","","",149,[[],["str"]]],[11,"clone","","",150,[[["self"]],["colon2"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"peek","","",150,[[["cursor"]],["bool"]]],[11,"display","","",150,[[],["str"]]],[11,"clone","","",151,[[["self"]],["comma"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"peek","","",151,[[["cursor"]],["bool"]]],[11,"display","","",151,[[],["str"]]],[11,"clone","","",152,[[["self"]],["div"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["parsestream"]],["result"]]],[11,"peek","","",152,[[["cursor"]],["bool"]]],[11,"display","","",152,[[],["str"]]],[11,"clone","","",153,[[["self"]],["diveq"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"peek","","",153,[[["cursor"]],["bool"]]],[11,"display","","",153,[[],["str"]]],[11,"clone","","",154,[[["self"]],["dollar"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["parsestream"]],["result"]]],[11,"peek","","",154,[[["cursor"]],["bool"]]],[11,"display","","",154,[[],["str"]]],[11,"clone","","",155,[[["self"]],["dot"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"peek","","",155,[[["cursor"]],["bool"]]],[11,"display","","",155,[[],["str"]]],[11,"clone","","",156,[[["self"]],["dot2"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"peek","","",156,[[["cursor"]],["bool"]]],[11,"display","","",156,[[],["str"]]],[11,"clone","","",157,[[["self"]],["dot3"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"peek","","",157,[[["cursor"]],["bool"]]],[11,"display","","",157,[[],["str"]]],[11,"clone","","",158,[[["self"]],["dotdoteq"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"peek","","",158,[[["cursor"]],["bool"]]],[11,"display","","",158,[[],["str"]]],[11,"clone","","",159,[[["self"]],["eq"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"peek","","",159,[[["cursor"]],["bool"]]],[11,"display","","",159,[[],["str"]]],[11,"clone","","",160,[[["self"]],["eqeq"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"peek","","",160,[[["cursor"]],["bool"]]],[11,"display","","",160,[[],["str"]]],[11,"clone","","",161,[[["self"]],["ge"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"peek","","",161,[[["cursor"]],["bool"]]],[11,"display","","",161,[[],["str"]]],[11,"clone","","",162,[[["self"]],["gt"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"peek","","",162,[[["cursor"]],["bool"]]],[11,"display","","",162,[[],["str"]]],[11,"clone","","",163,[[["self"]],["le"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"peek","","",163,[[["cursor"]],["bool"]]],[11,"display","","",163,[[],["str"]]],[11,"clone","","",164,[[["self"]],["lt"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"peek","","",164,[[["cursor"]],["bool"]]],[11,"display","","",164,[[],["str"]]],[11,"clone","","",165,[[["self"]],["muleq"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"peek","","",165,[[["cursor"]],["bool"]]],[11,"display","","",165,[[],["str"]]],[11,"clone","","",166,[[["self"]],["ne"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"peek","","",166,[[["cursor"]],["bool"]]],[11,"display","","",166,[[],["str"]]],[11,"clone","","",167,[[["self"]],["or"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["parsestream"]],["result"]]],[11,"peek","","",167,[[["cursor"]],["bool"]]],[11,"display","","",167,[[],["str"]]],[11,"clone","","",168,[[["self"]],["oreq"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"clone","","",169,[[["self"]],["oror"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["parsestream"]],["result"]]],[11,"peek","","",169,[[["cursor"]],["bool"]]],[11,"display","","",169,[[],["str"]]],[11,"clone","","",170,[[["self"]],["pound"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["parsestream"]],["result"]]],[11,"peek","","",170,[[["cursor"]],["bool"]]],[11,"display","","",170,[[],["str"]]],[11,"clone","","",171,[[["self"]],["question"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["parsestream"]],["result"]]],[11,"peek","","",171,[[["cursor"]],["bool"]]],[11,"display","","",171,[[],["str"]]],[11,"clone","","",172,[[["self"]],["rarrow"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"peek","","",172,[[["cursor"]],["bool"]]],[11,"display","","",172,[[],["str"]]],[11,"clone","","",173,[[["self"]],["larrow"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"peek","","",173,[[["cursor"]],["bool"]]],[11,"display","","",173,[[],["str"]]],[11,"clone","","",174,[[["self"]],["rem"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"peek","","",174,[[["cursor"]],["bool"]]],[11,"display","","",174,[[],["str"]]],[11,"clone","","",175,[[["self"]],["remeq"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"peek","","",175,[[["cursor"]],["bool"]]],[11,"display","","",175,[[],["str"]]],[11,"clone","","",176,[[["self"]],["fatarrow"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"peek","","",176,[[["cursor"]],["bool"]]],[11,"display","","",176,[[],["str"]]],[11,"clone","","",177,[[["self"]],["semi"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"peek","","",177,[[["cursor"]],["bool"]]],[11,"display","","",177,[[],["str"]]],[11,"clone","","",178,[[["self"]],["shl"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"peek","","",178,[[["cursor"]],["bool"]]],[11,"display","","",178,[[],["str"]]],[11,"clone","","",179,[[["self"]],["shleq"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["parsestream"]],["result"]]],[11,"peek","","",179,[[["cursor"]],["bool"]]],[11,"display","","",179,[[],["str"]]],[11,"clone","","",180,[[["self"]],["shr"]]],[11,"default","","",180,[[],["self"]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"parse","","",180,[[["parsestream"]],["result"]]],[11,"peek","","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"clone","","",181,[[["self"]],["shreq"]]],[11,"default","","",181,[[],["self"]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"clone","","",182,[[["self"]],["star"]]],[11,"default","","",182,[[],["self"]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"clone","","",183,[[["self"]],["sub"]]],[11,"default","","",183,[[],["self"]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"clone","","",184,[[["self"]],["subeq"]]],[11,"default","","",184,[[],["self"]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"clone","","",185,[[["self"]],["tilde"]]],[11,"default","","",185,[[],["self"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"clone","","",186,[[["self"]],["brace"]]],[11,"default","","",186,[[],["self"]]],[11,"surround","","",186,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",187,[[["self"]],["bracket"]]],[11,"default","","",187,[[],["self"]]],[11,"surround","","",187,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",188,[[["self"]],["paren"]]],[11,"default","","",188,[[],["self"]]],[11,"surround","","",188,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",189,[[["self"]],["group"]]],[11,"default","","",189,[[],["self"]]],[11,"surround","","",189,[[["self"],["tokenstream"],["f"]]]],[11,"parse","syn","",196,[[["parsestream"]],["result"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"from","","",196,[[["self_"]],["ident"]]],[11,"from","","",196,[[["capself"]],["ident"]]],[11,"from","","",196,[[["super"]],["ident"]]],[11,"from","","",196,[[["crate"]],["ident"]]],[11,"from","","",196,[[["extern"]],["ident"]]],[11,"from","","",196,[[["underscore"]],["ident"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprlet"]]],[11,"from","","",68,[[["exprlet"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",210,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",211,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",212,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",213,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",214,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",215,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",216,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",217,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",218,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",219,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",220,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",221,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",222,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",223,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",224,[[["self"]],["exprasync"]]],[11,"from","","",68,[[["exprasync"]],["expr"]]],[11,"clone","","",225,[[["self"]],["exprtryblock"]]],[11,"from","","",68,[[["exprtryblock"]],["expr"]]],[11,"clone","","",226,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",29,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",227,[[["self"]],["implgenerics"]]],[11,"clone","","",228,[[["self"]],["typegenerics"]]],[11,"clone","","",229,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",228,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","Panics",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",190,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",191,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",192,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",193,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",194,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",195,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",190,[[["str"],["span"]],["self"]]],[11,"value","","",190,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",190,[[["self"]],["result",["error"]]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"set_span","","",190,[[["self"],["span"]]]],[11,"new","","",191,N],[11,"value","","",191,[[["self"]],["vec",["u8"]]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"set_span","","",191,[[["self"],["span"]]]],[11,"new","","",192,[[["u8"],["span"]],["self"]]],[11,"value","","",192,[[["self"]],["u8"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"set_span","","",192,[[["self"],["span"]]]],[11,"new","","",193,[[["char"],["span"]],["self"]]],[11,"value","","",193,[[["self"]],["char"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"set_span","","",193,[[["self"],["span"]]]],[11,"new","","",194,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",194,[[["self"]],["u64"]]],[11,"suffix","","",194,[[["self"]],["intsuffix"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"set_span","","",194,[[["self"],["span"]]]],[11,"new","","",195,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",195,[[["self"]],["f64"]]],[11,"suffix","","",195,[[["self"]],["floatsuffix"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"set_span","","",195,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",84,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"without_plus","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"without_plus","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",59,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",60,[[["parsestream"]],["result"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",56,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",57,[[["self"]],["binding"]]],[11,"clone","","",58,[[["self"]],["constraint"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",230,[[["self"]],["cursor"]]],[11,"clone","","",231,[[["self"]],["cursor"]]],[11,"eq","","",231,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",231,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",231,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",231,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",231,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",231,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",231,[[["self"]],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",232,[[["parsestream"]],["result"]]],[11,"parse_any","syn","",196,[[["parsestream"]],["result"]]],[0,"punctuated","","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",233,N],[13,"End","","",233,N],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"clone","","",234,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",234,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",234,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",234,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",234,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",234,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",234,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",234,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",234,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",234,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",234,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",234,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",234,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",234,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",234,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",234,N],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"into_iter","","",234,N],[11,"default","","",234,[[],["self"]]],[11,"next","","",235,[[["self"]],["option"]]],[11,"len","","",235,[[["self"]],["usize"]]],[11,"next","","",236,[[["self"]],["option"]]],[11,"len","","",236,[[["self"]],["usize"]]],[11,"next","","",237,[[["self"]],["option"]]],[11,"len","","",237,[[["self"]],["usize"]]],[11,"next","","",238,[[["self"]],["option"]]],[11,"len","","",238,[[["self"]],["usize"]]],[11,"next","","",239,[[["self"]],["option"]]],[11,"len","","",239,[[["self"]],["usize"]]],[11,"next","","",240,[[["self"]],["option"]]],[11,"len","","",240,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",233,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",233,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",233,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",233,N],[11,"index","","",234,N],[11,"index_mut","","",234,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",241,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_constraint","","",N,[[["v"],["constraint"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input tokens.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[6,"ParseStream","","Input to a Syn parser function.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[8,"Parse","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",243,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",244,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",244,[[["self"],["str"]],["result"]]],[11,"drop","","",245,[[["self"]]]],[11,"clone","","",246,[[["self"]],["stepcursor"]]],[11,"deref","","",246,N],[11,"error","","Triggers an error at the current position of the parse stream.",246,[[["self"],["t"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",245,[[["self"]],["result"]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",245,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",245,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",245,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",245,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",245,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",245,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse stream.",245,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",245,[[["self"],["f"]],["result"]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",245,[[["self"]],["cursor"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"clone","","",247,[[["self"]],["error"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",247,[[["span"],["t"]],["self"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",247,[[["self"]],["tokenstream"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"description","","",247,[[["self"]],["str"]]],[11,"from","","",247,[[["lexerror"]],["self"]]],[14,"parenthesized","syn","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",196,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",196,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",196,N],[11,"clone","","",196,[[["self"]],["ident"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",196,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",196,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",196,N],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",196,[[["self"],["t"]],["bool"]]],[11,"eq","","",196,[[["self"],["ident"]],["bool"]]],[11,"to_tokens","","",196,N],[11,"visit_abi","syn::visit","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",248,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",248,[[["self"]],["error"]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprLet"],[3,"ExprIf"],[3,"ExprWhile"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprAsync"],[3,"ExprTryBlock"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[8,"Visit"],[8,"Parse"],[8,"Parser"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"]]};
searchIndex["synom"]={"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",N,N],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,N],[13,"Error","","Parsing failed.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["iresult"]],["bool"]]],[11,"ne","","",0,[[["self"],["iresult"]],["bool"]]],[11,"clone","","",0,[[["self"]],["iresult"]]],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,[[["self"],["str"]],["o"]]],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",N,N],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",N,N],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",N,N],[14,"named","","Define a function from a parser combination.",N,N],[14,"call","","Invoke the given parser function with the passed in arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",N,N],[14,"cond","","Conditionally execute the given parser.",N,N],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",N,N],[14,"preceded","","Parse two things, returning the value of the second.",N,N],[14,"terminated","","Parse two things, returning the value of the first.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"peek","","Parse a value without consuming it from the input data.",N,N],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",N,N],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",N,N],[14,"delimited","","Value surrounded by a pair of delimiters.",N,N],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",N,N]],"paths":[[4,"IResult"]]};
searchIndex["tamawiki"]={"doc":"A wiki implemented in Rust","items":[[0,"document","tamawiki","Documents and Operations on their content.",N,N],[3,"Participants","tamawiki::document","A collection of DocumentParticipants keyed by Participant ID. Serializes as an array of SerializedParticipant objects as JSON only allows strings as keys.",N,N],[12,"entries","","The participants",0,N],[3,"DocumentParticipant","","Edit session participant data relevant to displaying a document",N,N],[12,"cursor_pos","","Unicode Scalar Value index of the participant's cursor",1,N],[3,"Document","","Represents some String content at a point in time",N,N],[12,"content","","Current document content",2,N],[12,"participants","","Current active editors",2,N],[3,"Insert","","Inserts new content at a single position in the Document",N,N],[12,"pos","","Insert position as number of Unicode Scalar Values preceeding the Insert operation, from the beginning of the document (not byte position, or number of grapheme clusters)",3,N],[12,"content","","The String content to insert",3,N],[3,"Delete","","Deletes a contiguous region of content from the Document",N,N],[12,"start","","First Unicode Scalar Value to remove in range",4,N],[12,"end","","Unicode Scalar Value to end the delete operation on (exclusive of the 'end' character)",4,N],[3,"Join","","A new participant has joined the DocumentSession",N,N],[12,"id","","The id of the newly joined participant",5,N],[3,"Leave","","A participant has left the DocumentSession",N,N],[12,"id","","The id of the now departed participant",6,N],[3,"Edit","","An Edit combines multiple operations into a single Document change (i.e. all the operations are applied together, or not at all).",N,N],[12,"author","","The ParticipantId for the original author of this edit",7,N],[12,"operations","","The Operations which describe this Edit",7,N],[4,"Event","","Describes an event corresponding to a single Document.",N,N],[13,"Join","","A new participant has joined",8,N],[13,"Leave","","A participant has left",8,N],[13,"Edit","","An update was made to the document",8,N],[4,"Operation","","Describes incremental changes to a Document's content. Through the accumulated application of Operations to a Document, the Document's content at a point in time can be derived.",N,N],[13,"Insert","","Insert new content into the Docuemnt",9,N],[13,"Delete","","Remove content from the Document",9,N],[4,"EditError","","Error conditions which may occur when applying an Operation to a Document.",N,N],[13,"OutsideDocument","","The Operation's position or range falls outside the current Document.",10,N],[13,"InvalidOperation","","The operation is invalid and could not be applied meaningfully to any document.",10,N],[6,"ParticipantId","","Connection identifier, which must be unique between concurrent events",N,N],[11,"default","","",0,[[],["participants"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["participants"]],["bool"]]],[11,"ne","","",0,[[["self"],["participants"]],["bool"]]],[11,"clone","","",0,[[["self"]],["participants"]]],[11,"new","","Creates a new empty Participants collection",0,[[],["self"]]],[11,"from_iter","","",0,[[["i"]],["self"]]],[11,"deserialize","","",0,[[["d"]],["result",["participants"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["documentparticipant"]],["bool"]]],[11,"ne","","",1,[[["self"],["documentparticipant"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["documentparticipant"]]],[11,"clone","","",1,[[["self"]],["documentparticipant"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["document"]],["bool"]]],[11,"ne","","",2,[[["self"],["document"]],["bool"]]],[11,"default","","",2,[[],["document"]]],[11,"clone","","",2,[[["self"]],["document"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["insert"]],["bool"]]],[11,"ne","","",3,[[["self"],["insert"]],["bool"]]],[11,"clone","","",3,[[["self"]],["insert"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["delete"]],["bool"]]],[11,"ne","","",4,[[["self"],["delete"]],["bool"]]],[11,"clone","","",4,[[["self"]],["delete"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["event"]],["bool"]]],[11,"ne","","",8,[[["self"],["event"]],["bool"]]],[11,"clone","","",8,[[["self"]],["event"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["operation"]],["bool"]]],[11,"ne","","",9,[[["self"],["operation"]],["bool"]]],[11,"clone","","",9,[[["self"]],["operation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["join"]],["bool"]]],[11,"ne","","",5,[[["self"],["join"]],["bool"]]],[11,"clone","","",5,[[["self"]],["join"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["leave"]],["bool"]]],[11,"ne","","",6,[[["self"],["leave"]],["bool"]]],[11,"clone","","",6,[[["self"]],["leave"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["edit"]],["bool"]]],[11,"ne","","",7,[[["self"],["edit"]],["bool"]]],[11,"clone","","",7,[[["self"]],["edit"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["editerror"]],["bool"]]],[11,"apply","","Applies an Edit event to the Document's content. Either all Operations contained in the Edit are applied, or no Operations are applied and an EditError is returned.",2,[[["self"],["event"]],["result",["editerror"]]]],[11,"can_apply","","Checks that every operation inside the edit can be cleanly applied to the document, without making any changes to the document content.",2,[[["self"],["event"]],["result",["editerror"]]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"is_valid","","Returns false if the Operation would never describe a meaningful change for any given Document.",9,[[["self"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"cause","","",10,[[["self"]],["option",["error"]]]],[11,"transform","","Modifies the Event struct to accommodate a concurrent Event which has already been applied locally.",8,[[["self"],["event"]]]],[0,"service","tamawiki","TamaWiki HTTP service suitable for serving via Hyper",N,N],[3,"TamaWiki","tamawiki::service","Handles a request and returns a response",N,N],[11,"clone","","",11,[[["self"]],["tamawiki"]]],[11,"new","","Creates a new instace of TamaWiki",11,[[["t"],["p"]],["self"]]],[11,"new_service","","",11,N],[11,"call","","",11,N],[0,"session","tamawiki","Co-ordinates store updates and notifications",N,N],[3,"DocumentSessionManager","tamawiki::session","Provides access to DocumentSessions.",N,N],[3,"DocumentSession","","Co-ordinates store updates and notifications for (potentially) multiple clients editing a single document.",N,N],[0,"message","","Defines messages for client/server communication during an EditSession",N,N],[3,"ConnectedMessage","tamawiki::session::message","Client successfully connected",N,N],[12,"id","","The new client's participant ID",12,N],[3,"EditMessage","","An update was made to the Document",N,N],[12,"client_seq","","The most recently applied client SequenceId",13,N],[12,"seq","","The SequenceId of the edit Event in the Store",13,N],[12,"author","","The id of the participant responsible for making this change",13,N],[12,"operations","","The individual Operations which describe the edit",13,N],[3,"JoinMessage","","A new participant has joined the DocumentSession",N,N],[12,"client_seq","","The most recently applied client SequenceId",14,N],[12,"seq","","The SequenceId of the join Event in the Store",14,N],[12,"id","","The id of the newly joined participant",14,N],[3,"LeaveMessage","","A participant has left the DocumentSession",N,N],[12,"client_seq","","The most recently applied client SequenceId",15,N],[12,"seq","","The SequenceId of the leave Event in the Store",15,N],[12,"id","","The id of the now departed participant",15,N],[3,"ClientEditMessage","","A change made to the document content by the client",N,N],[12,"parent_seq","","The most recently applied server SequenceId before this client edit was made",16,N],[12,"client_seq","","The client's own local SequenceId for this event",16,N],[12,"operations","","The operations which describe the change to the document",16,N],[4,"ServerMessage","","Message sent from the server to the client",N,N],[13,"Connected","","Client successfully connected - always the first message sent to a client",17,N],[13,"Edit","","An update was made to the Document",17,N],[13,"Join","","A new participant joined the DocumentSession",17,N],[13,"Leave","","A participant has left the DocumentSession",17,N],[4,"ClientMessage","","Message sent from the client to the server",N,N],[13,"ClientEdit","","A change was made to the document content",18,N],[4,"MessageStreamError","","An error when attempting to read Events from a Stream, or write Events to a Sink.",N,N],[13,"InvalidMessage","","Failed to serialize or deserialize message",19,N],[12,"reason","tamawiki::session::message::MessageStreamError","Detailed information on the error if available",19,N],[13,"Transport","tamawiki::session::message","Errors from underlying protocol or event store",19,N],[12,"error","tamawiki::session::message::MessageStreamError","The original error",19,N],[5,"message_stream","tamawiki::session::message","Wraps an Sink + Stream which handles Strings so it can read ClientMessages and write ServerMessages.",N,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["servermessage"]],["bool"]]],[11,"ne","","",17,[[["self"],["servermessage"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["connectedmessage"]],["bool"]]],[11,"ne","","",12,[[["self"],["connectedmessage"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["editmessage"]],["bool"]]],[11,"ne","","",13,[[["self"],["editmessage"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["joinmessage"]],["bool"]]],[11,"ne","","",14,[[["self"],["joinmessage"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["leavemessage"]],["bool"]]],[11,"ne","","",15,[[["self"],["leavemessage"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["clientmessage"]],["bool"]]],[11,"ne","","",18,[[["self"],["clientmessage"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["clienteditmessage"]],["bool"]]],[11,"ne","","",16,[[["self"],["clienteditmessage"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from","","",19,[[["storeerror"]],["self"]]],[0,"participant","tamawiki::session","Handles client communication with a DocumentSession",N,N],[3,"Participant","tamawiki::session::participant","A client connected to a DocumentSession. This struct can be used as a Stream, to read ServerMessages applicable to the participant, and a Sink, for the participant to send ClientMessages to the DocumentSession.",N,N],[11,"new","","Creates a new Participant for the given DocumentSession. You should not need to call this directly, instead a Participant should be obtained by calling `join()` using the DocuemntSessionManager.",20,[[["documentsession"],["participantid"],["sequenceid"]],["self"]]],[11,"get_id","","Returns the ParticipantId.",20,[[["self"]],["participantid"]]],[11,"poll","","",20,[[["self"]],["poll",["option"]]]],[11,"start_send","","",20,N],[11,"poll_complete","","",20,[[["self"]],["poll"]]],[11,"drop","","",20,[[["self"]]]],[11,"clone","tamawiki::session","",21,[[["self"]],["documentsessionmanager"]]],[11,"new","","Creates a new DocumentSessionManager using the provided Store",21,[[["t"]],["self"]]],[11,"join","","Join an existing or new DocumentSession for the given path. A new DocumentSession is created automatically when the path has no active participants.",21,N],[11,"clone","","",22,[[["self"]],["documentsession"]]],[0,"store","tamawiki","Persists document events using paths as keys.",N,N],[4,"StoreError","tamawiki::store","Error conditions for reading data from, or writing data to, the store.",N,N],[13,"NotFound","","The document path is missing",23,N],[13,"InvalidSequenceId","","A non-existant SequenceId was requested for the document",23,N],[13,"InvalidDocument","","When requesting content, the store failed to build a representation of the document from the events in the store",23,N],[13,"ConnectionError","","There is a problem communicating with the storage backend",23,N],[0,"memory","","An in-memory store, useful for testing.",N,N],[3,"MemoryStore","tamawiki::store::memory","Holds document data in shared memory location",N,N],[3,"MemoryStoreStream","","An asynchronous stream of Event objects cloned from memory",N,N],[11,"default","","",24,[[],["memorystore"]]],[11,"clone","","",24,[[["self"]],["memorystore"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"push","","",24,N],[11,"seq","","",24,[[["self"],["path"]],["box",["future"]]]],[11,"since","","",24,N],[11,"content","","",24,[[["self"],["path"]],["box",["future"]]]],[11,"content_at","","",24,[[["self"],["path"],["sequenceid"]],["box",["future"]]]],[11,"from","","",24,[[["hashmap",["string","string"]]],["self"]]],[11,"poll","","",25,[[["self"]],["poll",["option"]]]],[6,"SequenceId","tamawiki::store","The sequence number for an Event. The first Event for a Document is SequenceId=1 (not 0). This is so requesting events since SequenceId=0 will return all Events for a Document.",N,N],[8,"Store","","Every store backend must provide a client interface to the store using the Store trait. This client interface will be cloned for multiple requests and orchestrating concurrent access (e.g. via locking and a connection pool) is left to the implementation.",N,N],[16,"Stream","","Type for the stream of Events returned by `since()` calls",26,N],[16,"SinceFuture","","The Future returned by `since()` calls",26,N],[16,"PushFuture","","The Future returned by `push()` calls",26,N],[10,"push","","Adds a new Event to the document at 'path' and returns the new SequenceId. If the document does not exist, the act of pushing an Event creates it.",26,N],[10,"seq","","Requests the current SequenceId for the document at 'path', or StoreError::NotFound if it does not exist.",26,[[["self"],["path"]],["box",["future"]]]],[10,"since","","Requests a stream of Events starting after the provided SequenceId. Requesting the current (head) SequenceId is not an error, but will return an empty stream. Requesting Events since a SequenceId that does not exist yet is a StoreError::InvalidSequenceId.",26,N],[10,"content","","Requests the current SequenceId and content for the document at 'path' (with all events applied), or StoreError::NotFound if the document does not exist.",26,[[["self"],["path"]],["box",["future"]]]],[10,"content_at","","Requests a snapshot of the document's content at a specific SequenceId. All events from SequenceId=1 (inclusive) to SequenceId=seq will be applied. Results in a StoreError::NotFound if the document does not exist, and StoreError::InvalidSequenceId if the SequenceId does not exist.",26,[[["self"],["path"],["sequenceid"]],["box",["future"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["storeerror"]],["bool"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"description","","",23,[[["self"]],["str"]]],[14,"memorystore","tamawiki","Convenient way to create a new MemoryStore with existing content.",N,N],[11,"to_owned","tamawiki::document","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"equivalent","","",1,[[["self"],["k"]],["bool"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","tamawiki::service","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"new_service","","",11,N],[11,"to_owned","tamawiki::session","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","tamawiki::session::message","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","tamawiki::session::participant","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","tamawiki::store","",23,[[["t"]],["t"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","tamawiki::store::memory","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]]],"paths":[[3,"Participants"],[3,"DocumentParticipant"],[3,"Document"],[3,"Insert"],[3,"Delete"],[3,"Join"],[3,"Leave"],[3,"Edit"],[4,"Event"],[4,"Operation"],[4,"EditError"],[3,"TamaWiki"],[3,"ConnectedMessage"],[3,"EditMessage"],[3,"JoinMessage"],[3,"LeaveMessage"],[3,"ClientEditMessage"],[4,"ServerMessage"],[4,"ClientMessage"],[4,"MessageStreamError"],[3,"Participant"],[3,"DocumentSessionManager"],[3,"DocumentSession"],[4,"StoreError"],[3,"MemoryStore"],[3,"MemoryStoreStream"],[8,"Store"]]};
searchIndex["tera"]={"doc":"Tera Tera is a template engine based on Jinja2 and the Django template language.","items":[[5,"from_value","tera","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"Context","","The struct that holds the context of a template rendering.",N,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",1,N],[3,"Tera","","The main point of interaction in this library.",N,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",2,N],[13,"Json","","An error happened while serializing JSON",2,N],[5,"escape_html","","Escape HTML following OWASP",N,[[["str"]],["string"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["context"]]],[11,"eq","","",3,[[["self"],["context"]],["bool"]]],[11,"ne","","",3,[[["self"],["context"]],["bool"]]],[11,"new","","Initializes an empty context",3,[[],["context"]]],[11,"insert","","Converts the `val` parameter to `Value` and insert it into the context",3,[[["self"],["str"],["t"]]]],[11,"extend","","Appends the data of the `source` parameter to `self`, overwriting existing keys. The source context will be dropped.",3,[[["self"],["context"]]]],[11,"default","","",3,[[],["context"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",1,N],[11,"with_chain","","",1,[[["e"],["k"]],["self"]]],[11,"kind","","",1,N],[11,"iter","","",1,[[["self"]],["iter"]]],[11,"chain_err","","",1,[[["self"],["f"]],["self"]]],[11,"backtrace","","",1,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",1,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",1,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",1,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",1,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",1,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",1,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",1,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",2,[[["self"]],["str"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"new","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob",4,[[["str"]],["result",["tera"]]]],[11,"parse","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob  The difference with `Tera::new` is that it won't build the inheritance chains automatically  so you are free to modify the templates if you need to.  You will NOT get a working Tera instance using `Tera::parse`, you will need to call  `tera.build_inheritance_chains()` to make it usable",4,[[["str"]],["result",["tera"]]]],[11,"build_inheritance_chains","","We need to know the hierarchy of templates to be able to render multiple extends level This happens at compile-time to avoid checking it every time we want to render a template This also checks for soundness issues in the inheritance chains, such as missing template or circular extends. It also builds the block inheritance chain and detects when super() is called in a place where it can't possibly work",4,[[["self"]],["result"]]],[11,"check_macro_files","","We keep track of macro files loaded in each Template so we can know whether one or them is missing and error accordingly before the user tries to render a template.",4,[[["self"]],["result"]]],[11,"render","","Renders a Tera template given an object that implements `Serialize`.",4,[[["self"],["str"],["t"]],["result",["string"]]]],[11,"one_off","","Renders a one off template (for example a template coming from a user input) given a `Context` or an object that implements `Serialize`.",4,[[["str"],["t"],["bool"]],["result",["string"]]]],[11,"add_raw_template","","Add a single template to the Tera instance",4,[[["self"],["str"],["str"]],["result"]]],[11,"add_raw_templates","","Add all the templates given to the Tera instance",4,[[["self"],["vec"]],["result"]]],[11,"add_template_file","","Add a single template from a path to the Tera instance. The default name for the template is the path given, but this can be renamed with the `name` parameter",4,[[["self"],["p"],["option",["str"]]],["result"]]],[11,"add_template_files","","Add several templates from paths to the Tera instance. The default name for the template is the path given, but this can be renamed with the second parameter of the tuple",4,[[["self"],["vec"]],["result"]]],[11,"register_filter","","Register a filter with Tera.",4,[[["self"],["str"],["filterfn"]]]],[11,"register_tester","","Register a tester with Tera.",4,[[["self"],["str"],["testerfn"]]]],[11,"register_global_function","","Register a global function with Tera.",4,[[["self"],["str"],["globalfn"]]]],[11,"register_function","","Register a function with Tera.",4,[[["self"],["str"],["globalfn"]]]],[11,"autoescape_on","","Select which suffix(es) to automatically do HTML escaping on, `[\".html\", \".htm\", \".xml\"]` by default.",4,[[["self"],["vec",["str"]]]]],[11,"set_escape_fn","","Set user-defined function which applied to a rendered content.",4,N],[11,"reset_escape_fn","","Reset escape function to default `tera::escape_html`.",4,[[["self"]]]],[11,"full_reload","","Re-parse all templates found in the glob given to Tera Use this when you are watching a directory and want to reload everything, for example when a file is added.",4,[[["self"]],["result"]]],[11,"extend","","Use that method when you want to add a given Tera instance templates/filters/testers  to your own. If a template/filter/tester with the same name already exists in your instance,  it will not be overwritten.",4,[[["self"],["tera"]],["result"]]],[11,"default","","",4,[[],["tera"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[6,"FilterFn","","The filter function type definition",N,N],[6,"GlobalFn","","The global function type definition",N,N],[6,"TesterFn","","The tester function type definition",N,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[14,"try_get_value","","Helper macro to get real values out of Value while retaining proper errors in filters",N,N],[14,"compile_templates","","Compile templates or exits process",N,N],[11,"new","","Makes a new empty Map.",5,[[],["map",["string","value"]]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",5,[[["usize"]],["map",["string","value"]]]],[11,"clear","","Clears the map, removing all values.",5,N],[11,"get","","Returns a reference to the value corresponding to the key.",5,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",5,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",5,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",5,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",5,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",5,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",5,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",5,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",5,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",5,[[["self"]],["valuesmut"]]],[11,"clone","","",5,[[["self"]],["map",["string","value"]]]],[11,"clone","","",6,[[["self"]],["number"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_iter","","",5,N],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"from_str","","",6,[[["str"]],["result",["number"]]]],[11,"from_iter","","",5,[[["t"]],["map",["string","value"]]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"default","","",5,[[],["map",["string","value"]]]],[11,"index_mut","","",5,[[["self"],["q"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index","","",5,[[["self"],["q"]],["value"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize","","",5,[[["d"]],["result",["map"]]]],[11,"deserialize","","",6,[[["d"]],["result",["number"]]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",6,[[["u32"]],["number"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["u16"]],["value"]]],[11,"from","","",6,[[["isize"]],["number"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","",6,[[["usize"]],["number"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"from","","",6,[[["u16"]],["number"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",6,[[["i32"]],["number"]]],[11,"from","","",6,[[["u64"]],["number"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","",6,[[["u8"]],["number"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","",6,[[["i16"]],["number"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","",6,[[["i8"]],["number"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",6,[[["i64"]],["number"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","",6,[[["parsernumber"]],["number"]]],[11,"extend","","",5,N],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",5,[[["self"],["map"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",6,[[["self"],["number"]],["bool"]]],[11,"ne","","",6,[[["self"],["number"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",6,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",6,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",6,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",6,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",6,[[["f64"]],["option",["number"]]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]]],"paths":[[4,"Value"],[3,"Error"],[4,"ErrorKind"],[3,"Context"],[3,"Tera"],[3,"Map"],[3,"Number"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio"]={"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",N,N],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","tokio","Utilities for encoding and decoding frames.",N,N],[8,"Decoder","tokio::codec","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",N,N],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["builder"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",4,[[],["self"]]],[11,"max_frame_length","","Returns the current max frame setting",4,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",4,[[["self"],["usize"]]]],[11,"decode","","",4,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"encode","","",4,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"new","","Creates a new length delimited codec builder with default configuration values.",3,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",3,[[["self"]],["self"]]],[11,"little_endian","","Read the length field as a little endian integer",3,[[["self"]],["self"]]],[11,"native_endian","","Read the length field as a native endian integer",3,[[["self"]],["self"]]],[11,"max_frame_length","","Sets the max frame length",3,[[["self"],["usize"]],["self"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",3,[[["self"],["usize"]],["self"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",3,[[["self"],["usize"]],["self"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",3,[[["self"],["isize"]],["self"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",3,[[["self"],["usize"]],["self"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",3,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",3,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",3,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",3,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[0,"executor","tokio","Task execution utilities.",N,N],[8,"Executor","tokio::executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",6,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",6,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[3,"Spawn","","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"into_future","","",7,N],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir","tokio::fs","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[5,"hard_link","tokio::fs","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"os","","OS-specific functionality.",N,N],[0,"unix","tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"read_dir","tokio::fs","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"remove_dir","","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"io","tokio","Asynchronous I/O.",N,N],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",8,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",8,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",8,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",8,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",8,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",9,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",9,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",9,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",9,[[["self"],["b"]],["result",["async","error"]]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",10,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",10,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",10,N],[13,"ConnectionReset","","The connection was reset by the remote server.",10,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",10,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",10,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",10,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",10,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",10,N],[13,"AlreadyExists","","An entity already exists, often a file.",10,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",10,N],[13,"InvalidInput","","A parameter was incorrect.",10,N],[13,"InvalidData","","Data not valid for the operation were encountered.",10,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",10,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",10,N],[13,"Interrupted","","This operation was interrupted.",10,N],[13,"Other","","Any I/O error not part of this list.",10,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",10,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",11,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",11,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",11,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",11,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",11,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",11,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",11,[[["self"]],["bytes"]]],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",11,[[["self"]],["chars"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",11,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",11,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",12,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",12,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",12,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",12,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",12,[[["self"]],["self"]]],[0,"net","tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[3,"TcpListener","tokio::net","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[0,"tcp","","TCP bindings for `tokio`.",N,N],[3,"ConnectFuture","tokio::net::tcp","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[0,"udp","tokio::net","UDP bindings for `tokio`.",N,N],[3,"RecvDgram","tokio::net::udp","A future used to receive a datagram from a UDP socket.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[0,"unix","tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"ConnectFuture","tokio::net::unix","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UCred","","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",13,N],[12,"gid","","GID (group ID) of the process",13,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",8,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",8,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",8,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",8,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",8,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",9,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",9,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",9,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",9,[[["self"],["b"]],["result",["async","error"]]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",11,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",11,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",11,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",11,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",11,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",11,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",11,[[["self"]],["bytes"]]],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",11,[[["self"]],["chars"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",11,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",11,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",12,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",12,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",12,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",12,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",12,[[["self"]],["self"]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",14,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",14,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",14,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",14,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",14,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",14,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",14,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",14,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",14,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",14,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",14,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",14,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",14,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",14,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",14,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",14,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",14,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",14,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",14,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",14,[[["self"]],["shared"]]],[0,"future","","Futures",N,N],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",14,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",14,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",14,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",14,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",14,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",14,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",14,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",14,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",14,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",14,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",14,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",14,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",14,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",14,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",14,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",14,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",14,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",14,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",14,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",14,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",14,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",15,N],[16,"Item","","The item that the future may resolve with.",15,N],[16,"Error","","The error that the future may resolve with.",15,N],[10,"into_future","","Consumes this object and produces a future.",15,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",16,N],[16,"Error","","Possible errors during conversion.",16,N],[10,"future_from","","Consume the given value, beginning the conversion.",16,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",17,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",18,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",18,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[3,"Done","","A future representing a value that is immediately ready.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",19,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",19,N],[5,"collect","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",20,N],[13,"B","","Second branch of the type",20,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[5,"finished","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Empty","","A future which is never resolved.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",21,N],[16,"Error","","The type of error this stream may generate.",21,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",21,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",21,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",21,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",21,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",21,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",21,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",21,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",21,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",21,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",21,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",21,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",21,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",21,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",21,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",21,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",21,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",21,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",21,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",21,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",21,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",21,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",21,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",21,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",21,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",21,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",21,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",21,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",21,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",21,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",21,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",21,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",21,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",21,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",21,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",21,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",21,[[["self"],["f"]],["inspecterr"]]],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",21,N],[16,"Error","","The type of error this stream may generate.",21,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",21,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",21,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",21,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",21,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",21,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",21,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",21,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",21,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",21,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",21,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",21,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",21,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",21,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",21,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",21,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",21,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",21,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",21,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",21,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",21,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",21,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",21,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",21,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",21,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",21,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",21,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",21,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",21,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",21,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",21,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",21,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",21,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",21,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",21,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",21,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",21,[[["self"],["f"]],["inspecterr"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",22,N],[12,"1","","",22,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",23,N],[13,"Second","","An item from the second stream",23,N],[13,"Both","","Items from both streams",23,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",24,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",24,N],[10,"start_send","","Begin the process of sending a value to the sink.",24,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",24,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",24,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",24,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",24,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",24,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",24,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",24,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",24,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",24,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",24,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",24,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",24,[[["self"],["s"]],["sendall"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",15,N],[16,"Item","","The item that the future may resolve with.",15,N],[16,"Error","","The error that the future may resolve with.",15,N],[10,"into_future","","Consumes this object and produces a future.",15,N],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",25,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",25,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",26,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",26,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"current","tokio::prelude::task","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",27,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",28,N],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",29,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",30,[[["self"],["duration"]],["timeout"]]],[8,"StreamExt","","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",31,[[["self"],["duration"]],["timeout"]]],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",N,N],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Runtime","","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,[[["f"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",32,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",32,[[["self"],["clock"]],["self"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",32,[[["self"],["usize"]],["self"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",32,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",32,[[["self"],["s"]],["self"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",32,[[["self"],["usize"]],["self"]]],[11,"build","","Create the configured `Runtime`.",32,[[["self"]],["result",["runtime"]]]],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",N,N],[5,"spawn","tokio::runtime::current_thread","Executes a future on the current thread.",N,N],[3,"TaskExecutor","","Executes futures on the current thread.",N,N],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[5,"block_on_all","","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",33,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",33,[[["self"],["clock"]],["self"]]],[11,"build","","Create the configured `Runtime`.",33,[[["self"]],["result",["runtime"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",35,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",35,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",35,[[["self"],["t"]],["result",["executeerror"]]]],[11,"new","","Returns a new runtime initialized with default configuration values.",34,[[],["result",["runtime"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",34,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",34,[[["self"],["f"]],["self"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",34,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",34,[[["self"]],["result",["runerror"]]]],[11,"poll","tokio::runtime","",36,[[["self"]],["poll"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",37,[[["self"],["f"]]]],[11,"execute","","",37,[[["self"],["t"]],["result",["executeerror"]]]],[11,"spawn","","",37,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new runtime instance with default configuration values.",38,[[],["result"]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",38,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",38,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",38,[[["self"],["f"]],["self"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",38,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",38,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",38,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",38,[[["self"]],["shutdown"]]],[11,"drop","","",38,[[["self"]]]],[0,"timer","tokio","Utilities for tracking time.",N,N],[0,"delay_queue","tokio::timer","A queue of delayed elements.",N,N],[3,"DelayQueue","tokio::timer::delay_queue","A queue of delayed elements.",N,N],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"DelayQueue","tokio::timer","A queue of delayed elements.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Timeout","tokio::timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Error returned by `Timeout`.",N,N],[0,"util","tokio","Utilities for working with Tokio.",N,N],[11,"timeout","tokio::prelude","Creates a new future which allows `self` until `timeout`.",30,[[["self"],["duration"]],["timeout"]]],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",31,[[["self"],["duration"]],["timeout"]]],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","tokio::prelude","Creates a new future which allows `self` until `timeout`.",30,[[["self"],["duration"]],["timeout"]]],[8,"StreamExt","tokio::util","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","tokio::prelude","Creates a new stream which allows `self` until `timeout`.",31,[[["self"],["duration"]],["timeout"]]],[11,"cmp","tokio::io","",10,[[["self"],["errorkind"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["errorkind"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",39,[[["self"]],["str"]]],[11,"cause","","",39,[[["self"]],["option",["error"]]]],[11,"eq","","",10,[[["self"],["errorkind"]],["bool"]]],[11,"from","","",39,[[["nulerror"]],["error"]]],[11,"from","","",39,[[["errorkind"]],["error"]]],[11,"from","","",39,[[["intoinnererror"]],["error"]]],[11,"hash","","",10,N],[11,"partial_cmp","","",10,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"start_send","tokio::prelude::stream","",40,N],[11,"poll_complete","","",40,[[["self"]],["result",["async"]]]],[11,"close","","",40,[[["self"]],["result",["async"]]]],[11,"start_send","","",41,N],[11,"poll_complete","","",41,[[["self"]],["result",["async"]]]],[11,"close","","",41,[[["self"]],["result",["async"]]]],[11,"start_send","","",42,N],[11,"poll_complete","","",42,[[["self"]],["result",["async"]]]],[11,"close","","",42,[[["self"]],["result",["async"]]]],[11,"start_send","","",43,N],[11,"poll_complete","","",43,[[["self"]],["result",["async"]]]],[11,"close","","",43,[[["self"]],["result",["async"]]]],[11,"start_send","","",44,N],[11,"poll_complete","","",44,[[["self"]],["result",["async"]]]],[11,"close","","",44,[[["self"]],["result",["async"]]]],[11,"start_send","","",45,N],[11,"poll_complete","","",45,[[["self"]],["result",["async"]]]],[11,"close","","",45,[[["self"]],["result",["async"]]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["result",["async"]]]],[11,"close","","",46,[[["self"]],["result",["async"]]]],[11,"start_send","","",47,N],[11,"poll_complete","","",47,[[["self"]],["result",["async"]]]],[11,"close","","",47,[[["self"]],["result",["async"]]]],[11,"start_send","","",48,N],[11,"poll_complete","","",48,[[["self"]],["result",["async"]]]],[11,"close","","",48,[[["self"]],["result",["async"]]]],[11,"start_send","","",49,N],[11,"poll_complete","","",49,[[["self"]],["result",["async"]]]],[11,"close","","",49,[[["self"]],["result",["async"]]]],[11,"start_send","","",50,N],[11,"poll_complete","","",50,[[["self"]],["result",["async"]]]],[11,"close","","",50,[[["self"]],["result",["async"]]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["result",["async"]]]],[11,"close","","",51,[[["self"]],["result",["async"]]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["result",["async"]]]],[11,"close","","",52,[[["self"]],["result",["async"]]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["result",["async"]]]],[11,"close","","",53,[[["self"]],["result",["async"]]]],[11,"start_send","","",54,N],[11,"poll_complete","","",54,[[["self"]],["result",["async"]]]],[11,"close","","",54,[[["self"]],["result",["async"]]]],[11,"start_send","","",55,N],[11,"poll_complete","","",55,[[["self"]],["result",["async"]]]],[11,"close","","",55,[[["self"]],["result",["async"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["result",["async"]]]],[11,"close","","",56,[[["self"]],["result",["async"]]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["result",["async"]]]],[11,"close","","",57,[[["self"]],["result",["async"]]]],[11,"start_send","","",58,N],[11,"poll_complete","","",58,[[["self"]],["result",["async"]]]],[11,"close","","",58,[[["self"]],["result",["async"]]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["result",["async"]]]],[11,"close","","",59,[[["self"]],["result",["async"]]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["result",["async"]]]],[11,"close","","",60,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",61,[[["self"]],["result",["async"]]]],[11,"poll","","",62,[[["self"]],["result",["async"]]]],[11,"poll","","",63,[[["self"]],["result",["async"]]]],[11,"poll","","",64,[[["self"]],["result",["async"]]]],[11,"poll","","",65,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",66,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",67,[[["self"]],["result",["async"]]]],[11,"poll","","",68,[[["self"]],["result",["async"]]]],[11,"poll","","",69,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",70,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",71,[[["self"]],["result",["async"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",73,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",74,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"poll","","",76,[[["self"]],["result",["async"]]]],[11,"poll","","",77,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",78,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",79,[[["self"]],["result",["async"]]]],[11,"poll","","",80,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","","",86,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",90,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",20,[[["self"]],["result",["async"]]]],[11,"poll","","",91,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",92,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"from_iter","tokio::prelude::stream::futures_unordered","",95,[[["t"]],["futuresunordered"]]],[11,"from_iter","tokio::prelude::stream","",96,[[["t"]],["futuresordered"]]],[11,"default","tokio::prelude::task","",97,[[],["atomictask"]]],[11,"clone","tokio::prelude::future","",88,[[["self"]],["futureresult"]]],[11,"clone","tokio::prelude","",25,[[["self"]],["async"]]],[11,"clone","tokio::prelude::future","",98,[[["self"]],["sharederror"]]],[11,"clone","","",99,[[["self"]],["shareditem"]]],[11,"clone","tokio::prelude::task","",100,[[["self"]],["unparkevent"]]],[11,"clone","","",101,[[["self"]],["taskrc"]]],[11,"clone","","",102,[[["self"]],["task"]]],[11,"clone","tokio::prelude::future","",79,[[["self"]],["shared"]]],[11,"clone","","",18,[[["self"]],["executeerrorkind"]]],[11,"clone","tokio::prelude","",26,[[["self"]],["asyncsink"]]],[11,"fmt","tokio::prelude::future","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",113,[[["self"]],["result",["async"]]]],[11,"poll","","",126,[[["self"]],["result",["async"]]]],[11,"poll","","",43,[[["self"]],["result",["async"]]]],[11,"poll","","",109,[[["self"]],["result",["async"]]]],[11,"poll","","",41,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"poll","","",119,[[["self"]],["result",["async"]]]],[11,"poll","","",103,[[["self"]],["result",["async"]]]],[11,"poll","","",49,[[["self"]],["result",["async"]]]],[11,"poll","","",45,[[["self"]],["result",["async"]]]],[11,"poll","","",59,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",105,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",58,[[["self"]],["result",["async"]]]],[11,"poll","","",42,[[["self"]],["result",["async"]]]],[11,"poll","","",56,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream::futures_unordered","",95,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",47,[[["self"]],["result",["async"]]]],[11,"poll","","",50,[[["self"]],["result",["async"]]]],[11,"poll","","",124,[[["self"]],["result",["async"]]]],[11,"poll","","",96,[[["self"]],["result",["async"]]]],[11,"poll","","",44,[[["self"]],["result",["async"]]]],[11,"poll","","",118,[[["self"]],["result",["async"]]]],[11,"poll","","",46,[[["self"]],["result",["async"]]]],[11,"poll","","",127,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"poll","","",106,[[["self"]],["result",["async"]]]],[11,"poll","","",57,[[["self"]],["result",["async"]]]],[11,"poll","","",60,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",116,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",123,[[["self"]],["result",["async"]]]],[11,"poll","","",53,[[["self"]],["result",["async"]]]],[11,"poll","","",122,[[["self"]],["result",["async"]]]],[11,"poll","","",52,[[["self"]],["result",["async"]]]],[11,"poll","","",125,[[["self"]],["result",["async"]]]],[11,"next","tokio::prelude::stream::futures_unordered","",114,[[["self"]],["option"]]],[11,"size_hint","","",114,N],[11,"next","tokio::prelude::stream","",104,[[["self"]],["option"]]],[11,"fmt","tokio::prelude::future","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","tokio::prelude","",26,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",26,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","tokio::prelude::future","",18,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","tokio::prelude","",25,[[["self"],["async"]],["bool"]]],[11,"ne","","",25,[[["self"],["async"]],["bool"]]],[11,"description","tokio::prelude::future","",98,[[["self"]],["str"]]],[11,"cause","","",98,[[["self"]],["option",["error"]]]],[11,"description","tokio::prelude::stream","",22,[[["self"]],["str"]]],[11,"description","","",117,[[["self"]],["str"]]],[11,"from","tokio::prelude","",25,[[["t"]],["async"]]],[11,"from","tokio::prelude::future","",88,[[["result"]],["futureresult"]]],[11,"deref","","",99,[[["self"]],["t"]]],[11,"deref","","",98,[[["self"]],["e"]]],[11,"drop","tokio::prelude::stream::futures_unordered","",95,N],[11,"drop","tokio::prelude::future","",79,N],[11,"clone","tokio::runtime::current_thread","",128,[[["self"]],["taskexecutor"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"spawn","","",128,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"execute","","",128,[[["self"],["f"]],["result",["executeerror"]]]],[11,"clone","tokio::executor","",129,[[["self"]],["defaultexecutor"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",130,[[["self"]],["str"]]],[11,"spawn","","",129,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",129,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",129,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::codec","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::codec","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::codec","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","tokio::io","",131,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",131,[[["self"],["b"]],["result",["async","error"]]]],[11,"write","","",131,N],[11,"flush","","",131,[[["self"]],["result",["error"]]]],[11,"read","","",132,N],[11,"read_buf","","",132,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","tokio::codec","",142,[[["self"]],["result",["async"]]]],[11,"poll","","",135,[[["self"]],["result",["async"]]]],[11,"poll","tokio::io","",138,[[["self"]],["result",["async","error"]]]],[11,"poll","tokio::codec","",143,[[["self"]],["result",["async"]]]],[11,"start_send","","",135,N],[11,"poll_complete","","",135,[[["self"]],["result",["async"]]]],[11,"close","","",135,[[["self"]],["result",["async"]]]],[11,"start_send","","",143,N],[11,"poll_complete","","",143,[[["self"]],["result",["async"]]]],[11,"close","","",143,[[["self"]],["result",["async"]]]],[11,"start_send","","",142,N],[11,"poll_complete","","",142,[[["self"]],["result",["async"]]]],[11,"close","","",142,[[["self"]],["result",["async"]]]],[11,"poll","tokio::io","",133,[[["self"]],["result",["async","error"]]]],[11,"poll","","",141,[[["self"]],["result",["async","error"]]]],[11,"poll","","",139,[[["self"]],["result",["async","error"]]]],[11,"poll","","",140,[[["self"]],["result",["async","error"]]]],[11,"poll","","",137,[[["self"]],["result",["async","error"]]]],[11,"poll","","",134,[[["self"]],["result",["async","error"]]]],[11,"poll","","",136,[[["self"]],["result",["async","error"]]]],[11,"clone","tokio::codec","",144,[[["self"]],["linescodec"]]],[11,"clone","","",145,[[["self"]],["bytescodec"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",145,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"partial_cmp","","",144,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"cmp","","",144,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",145,[[["self"],["bytescodec"]],["ordering"]]],[11,"decode","","",144,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",144,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",145,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"hash","","",145,N],[11,"hash","","",144,N],[11,"encode","","",144,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",145,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"eq","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",144,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",145,[[["self"],["bytescodec"]],["bool"]]],[11,"clone","tokio::fs","",146,[[["self"]],["openoptions"]]],[11,"fmt","tokio::fs::file","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::os::unix","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","tokio::fs","",154,N],[11,"write","","",154,N],[11,"flush","","",154,[[["self"]],["result",["error"]]]],[11,"write","tokio::io","",151,N],[11,"flush","","",151,[[["self"]],["result",["error"]]]],[11,"write","","",152,N],[11,"flush","","",152,[[["self"]],["result",["error"]]]],[11,"read","tokio::fs","",154,N],[11,"read","tokio::io","",149,N],[11,"poll","tokio::fs::file","",150,[[["self"]],["result",["async"]]]],[11,"poll","","",147,[[["self"]],["result",["async"]]]],[11,"poll","","",155,[[["self"]],["result",["async"]]]],[11,"poll","","",153,[[["self"]],["result",["async"]]]],[11,"poll","tokio::fs::os::unix","",148,[[["self"]],["result",["async"]]]],[11,"from","tokio::fs","",146,[[["openoptions"]],["openoptions"]]],[11,"shutdown","","",154,[[["self"]],["result",["async","error"]]]],[11,"shutdown","tokio::io","",151,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",152,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",149,N],[11,"prepare_uninitialized_buffer","tokio::fs","",154,N],[11,"from","tokio::io","",39,[[["error"]],["error"]]],[11,"clone","tokio::reactor","",156,[[["self"]],["handle"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",160,N],[11,"drop","","",158,N],[11,"unpark","","",156,N],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",156,[[],["handle"]]],[11,"write","","",160,N],[11,"flush","","",160,[[["self"]],["result",["error"]]]],[11,"read","","",160,N],[11,"shutdown","","",160,[[["self"]],["result",["async","error"]]]],[11,"unpark","","",161,N],[11,"park","","",161,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",161,[[["self"],["duration"]],["result",["error"]]]],[11,"fmt","tokio::timer","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::delay_queue","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::delay_queue","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::timeout","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::timeout","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",169,[[["self"]],["str"]]],[11,"description","tokio::timer","",162,[[["self"]],["str"]]],[11,"poll","","",168,[[["self"]],["result",["async","error"]]]],[11,"poll","tokio::timer::timeout","",167,[[["self"]],["result",["async"]]]],[11,"poll","tokio::timer","",164,[[["self"]],["result",["async"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::timeout","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",167,[[["self"]],["result",["async"]]]],[11,"poll","tokio::timer","",166,[[["self"]],["result",["async"]]]],[11,"fmt","tokio::net::tcp","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_raw_fd","","",173,[[["self"]],["i32"]]],[11,"as_raw_fd","","",171,[[["self"]],["i32"]]],[11,"write","","",173,N],[11,"flush","","",173,[[["self"]],["result",["error"]]]],[11,"read","","",173,N],[11,"poll","","",172,[[["self"]],["result",["async","error"]]]],[11,"poll","","",170,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",173,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",173,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",173,N],[11,"read_buf","","",173,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","tokio::net::udp","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_raw_fd","","",176,[[["self"]],["i32"]]],[11,"poll","","",177,[[["self"]],["result",["async"]]]],[11,"start_send","","",177,N],[11,"poll_complete","","",177,[[["self"]],["result",["async"]]]],[11,"close","","",177,[[["self"]],["result",["async"]]]],[11,"poll","","",174,[[["self"]],["result",["async","error"]]]],[11,"poll","","",175,[[["self"]],["result",["async","error"]]]],[11,"clone","tokio::net::unix","",13,[[["self"]],["ucred"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_raw_fd","","",180,[[["self"]],["i32"]]],[11,"as_raw_fd","","",183,[[["self"]],["i32"]]],[11,"as_raw_fd","","",179,[[["self"]],["i32"]]],[11,"shutdown","","",180,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",180,[[["self"],["b"]],["result",["async","error"]]]],[11,"write","","",180,N],[11,"flush","","",180,[[["self"]],["result",["error"]]]],[11,"read","","",180,N],[11,"hash","","",13,N],[11,"prepare_uninitialized_buffer","","",180,N],[11,"read_buf","","",180,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",181,[[["self"]],["result",["async","error"]]]],[11,"poll","","",178,[[["self"]],["result",["async","error"]]]],[11,"poll","","",182,[[["self"]],["result",["async"]]]],[11,"poll","","",184,[[["self"]],["result",["async"]]]],[11,"eq","","",13,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",13,[[["self"],["ucred"]],["bool"]]],[11,"new","tokio::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",143,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",143,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",143,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",143,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",143,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",143,[[["self"]],["framedparts"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",135,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",135,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",135,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",135,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",135,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",135,[[["self"]],["d"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",142,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",142,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",142,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",142,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",142,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",142,[[["self"]],["e"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",145,[[],["bytescodec"]]],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",144,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",144,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",144,[[["self"]],["usize"]]],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",129,[[],["defaultexecutor"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",130,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",130,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",130,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",130,[[["self"]],["bool"]]],[11,"current","tokio::runtime::current_thread","Returns an executor that executes futures on the current thread.",128,[[],["taskexecutor"]]],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",128,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",154,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",154,[[["p"]],["createfuture"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",154,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",154,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",154,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",154,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",154,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",154,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",154,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",154,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",154,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",154,[[["self"]],["file"]]],[11,"new","","Creates a blank new set of options ready for configuration.",146,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",146,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",146,[[["self"],["p"]],["openfuture"]]],[11,"into_inner","tokio::io","Returns the underlying I/O object.",138,[[["self"]],["a"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",39,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",39,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",39,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",39,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",39,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",39,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",39,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",39,[[["self"]],["errorkind"]]],[11,"bind","tokio::net::tcp","Create a new TCP listener associated with this event loop.",171,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",171,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",171,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",171,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",171,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",171,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",171,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",171,[[["self"],["u32"]],["result",["error"]]]],[11,"connect","","Create a new TCP stream connected to the specified address.",173,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",173,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",173,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",173,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",173,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",173,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",173,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",173,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",173,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",173,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",173,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",173,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",173,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",173,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",173,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",173,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",173,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",173,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",173,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",173,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",173,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",173,[[["self"]],["result",["tcpstream","error"]]]],[11,"new","tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",177,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",177,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",177,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",177,[[["self"]],["udpsocket"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",176,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",176,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",176,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",176,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",176,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",176,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",176,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",176,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",176,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",176,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",176,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",176,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",176,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",176,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",176,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",176,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",176,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",176,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",176,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",176,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",176,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",176,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",176,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",176,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",176,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",176,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"bind","tokio::net::unix","Creates a new `UnixListener` bound to the specified path.",179,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",179,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",179,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",179,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",179,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",179,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",179,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",179,[[["self"]],["incoming"]]],[11,"connect","","Connects to the socket named by `path`.",180,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",180,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",180,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",180,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",180,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",180,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",180,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",180,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",180,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",180,[[["self"],["shutdown"]],["result",["error"]]]],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",183,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",183,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",183,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",183,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",183,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",183,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",183,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",183,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",183,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",183,N],[11,"poll_recv","","Receives data from the socket.",183,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",183,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",183,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",183,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",183,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",183,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",183,[[["self"],["shutdown"]],["result",["error"]]]],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",115,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",115,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",115,[[["self"]],["f"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",20,N],[11,"is_done","","Returns whether the underlying future has finished or not.",83,[[["self"]],["bool"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",79,[[["self"]],["option",["result"]]]],[11,"new","tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",95,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",95,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",95,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",95,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",95,[[["self"]],["itermut"]]],[11,"get_ref","tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",45,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",45,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",45,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",42,[[["self"]],["result",["async"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",104,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",43,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",43,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",43,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",49,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",49,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",49,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"send","","Sends a new value along this channel to the receiver.",111,[[["self"],["result"]],["futuresender"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",55,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",55,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",55,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",48,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",48,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",48,[[["self"]],["s"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",58,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",41,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",41,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",41,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,[[["self"]],["s"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",78,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",78,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",78,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",78,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",54,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",47,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",40,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",96,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",96,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",96,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",96,N],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",103,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",25,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",25,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",25,[[["self"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",26,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",26,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",26,[[["self"]],["bool"]]],[11,"new","tokio::prelude::task","Inserts a new piece of task-local data into this task, returning a reference to it.",101,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",101,[[["self"],["f"]],["r"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",120,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",120,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",120,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",120,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",120,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",120,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",120,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",120,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",120,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",120,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",100,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",102,N],[11,"is_current","","Returns `true` when called from within the context of the task.",102,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",102,[[["self"]],["bool"]]],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",97,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",97,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",97,N],[11,"notify","","Notifies the task that last called `register`.",97,N],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",121,[[["self"],["f"]],["r"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",110,N],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",161,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",161,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",161,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",161,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",161,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",161,[[["self"]],["result",["background","error"]]]],[11,"current","","Returns a handle to the current reactor.",156,[[],["handle"]]],[11,"handle","","Returns a reference to the reactor handle.",158,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",158,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",158,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",158,N],[11,"new","","Create a new `Registration`.",157,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",157,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",157,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",157,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",157,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",157,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",157,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",157,[[["self"]],["result",["option","error"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",160,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",160,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",160,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",160,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",160,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",160,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",160,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",160,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",160,[[["self"]],["result",["error"]]]],[11,"new","tokio::timer","Create a new, empty, `DelayQueue`",168,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",168,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",168,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",168,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",168,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",168,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",168,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",168,N],[11,"clear","","Clears the queue, removing all items.",168,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",168,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",168,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",168,[[["self"]],["bool"]]],[11,"get_ref","tokio::timer::delay_queue","Returns a reference to the inner value.",165,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",165,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",165,[[["self"]],["t"]]],[11,"shutdown","tokio::timer","Create an error representing a shutdown timer.",162,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",162,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",162,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",162,[[["self"]],["bool"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",164,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",164,[[["duration"]],["interval"]]],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",166,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",166,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",166,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",166,N],[11,"new","tokio::timer::timeout","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",167,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",167,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",167,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",167,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",167,[[["t"],["instant"]],["timeout"]]],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",169,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",169,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",169,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",169,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",169,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",169,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",169,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",169,[[["self"]],["option",["error"]]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"Builder"],[3,"LengthDelimitedCodec"],[3,"FrameTooBig"],[8,"Executor"],[3,"Spawn"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[3,"UCred"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"EventSet"],[8,"Executor"],[8,"Unpark"],[8,"FutureExt"],[8,"StreamExt"],[3,"Builder"],[3,"Builder"],[3,"Runtime"],[3,"Handle"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[3,"Error"],[3,"SplitSink"],[3,"Inspect"],[3,"Peekable"],[3,"MapErr"],[3,"Then"],[3,"InspectErr"],[3,"FromErr"],[3,"Chunks"],[3,"Skip"],[3,"Take"],[3,"Filter"],[3,"TakeWhile"],[3,"BufferUnordered"],[3,"FilterMap"],[3,"Flatten"],[3,"Map"],[3,"OrElse"],[3,"SkipWhile"],[3,"Fuse"],[3,"AndThen"],[3,"Buffered"],[3,"Select2"],[3,"MapErr"],[3,"SelectOk"],[3,"FromErr"],[3,"PollFn"],[3,"StreamFuture"],[3,"Empty"],[3,"OrElse"],[3,"Join5"],[3,"FutureSender"],[3,"Map"],[3,"SelectAll"],[3,"Concat2"],[3,"Join3"],[3,"SelectNext"],[3,"JoinAll"],[3,"Lazy"],[3,"Forward"],[3,"Shared"],[3,"CatchUnwind"],[3,"Concat"],[3,"Fold"],[3,"Fuse"],[3,"AndThen"],[3,"Join"],[3,"Flatten"],[3,"Select"],[3,"Done"],[3,"LoopFn"],[3,"Collect"],[3,"Then"],[3,"ForEach"],[3,"Inspect"],[3,"Join4"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"AtomicTask"],[3,"SharedError"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Task"],[3,"SplitStream"],[3,"Wait"],[3,"FlattenStream"],[3,"CatchUnwind"],[3,"Receiver"],[3,"Chain"],[3,"Empty"],[3,"Run"],[3,"Sender"],[3,"IterOk"],[3,"Once"],[3,"IterMut"],[3,"ExecuteError"],[3,"IntoStream"],[3,"SendError"],[3,"Repeat"],[3,"Zip"],[3,"Spawn"],[3,"LocalKey"],[3,"Unfold"],[3,"IterResult"],[3,"IterStream"],[3,"Merge"],[3,"Select"],[3,"PollFn"],[3,"TaskExecutor"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"ReadUntil"],[3,"Shutdown"],[3,"FramedRead"],[3,"Copy"],[3,"ReadToEnd"],[3,"Lines"],[3,"WriteAll"],[3,"ReadExact"],[3,"Flush"],[3,"FramedWrite"],[3,"Framed"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"OpenOptions"],[3,"MetadataFuture"],[3,"SymlinkFuture"],[3,"Stdin"],[3,"OpenFuture"],[3,"Stdout"],[3,"Stderr"],[3,"CreateFuture"],[3,"File"],[3,"SeekFuture"],[3,"Handle"],[3,"Registration"],[3,"Background"],[3,"Turn"],[3,"PollEvented2"],[3,"Reactor"],[3,"Error"],[3,"Key"],[3,"Interval"],[3,"Expired"],[3,"Delay"],[3,"Timeout"],[3,"DelayQueue"],[3,"Error"],[3,"ConnectFuture"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStream"],[3,"SendDgram"],[3,"RecvDgram"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"ConnectFuture"],[3,"UnixListener"],[3,"UnixStream"],[3,"Incoming"],[3,"RecvDgram"],[3,"UnixDatagram"],[3,"SendDgram"]]};
searchIndex["tokio_codec"]={"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",N,N],[11,"clone","","",3,[[["self"]],["bytescodec"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bytescodec"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"hash","","",3,N],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,[[],["bytescodec"]]],[11,"decode","","",3,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"encode","","",3,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",4,[[["self"]],["linescodec"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"cmp","","",4,[[["self"],["linescodec"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",4,[[["usize"]],["self"]]],[11,"max_length","","Returns the maximum line length when decoding.",4,[[["self"]],["usize"]]],[11,"decode","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"encode","","",4,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",6,[[["self"]],["result",["async"]]]],[11,"poll","","",5,[[["self"]],["result",["async"]]]],[11,"poll","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",5,N],[11,"poll_complete","","",5,[[["self"]],["result",["async"]]]],[11,"close","","",5,[[["self"]],["result",["async"]]]],[11,"start_send","","",7,N],[11,"poll_complete","","",7,[[["self"]],["result",["async"]]]],[11,"close","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",6,N],[11,"poll_complete","","",6,[[["self"]],["result",["async"]]]],[11,"close","","",6,[[["self"]],["result",["async"]]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",7,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",7,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",7,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",7,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",7,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",7,[[["self"]],["framedparts"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",5,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",5,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",5,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",5,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",5,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",5,[[["self"]],["d"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",6,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",6,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",6,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",6,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",6,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",6,[[["self"]],["e"]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Framed"]]};
searchIndex["tokio_current_thread"]={"doc":"A single-threaded executor which executes tasks on the same thread from which they are spawned.","items":[[3,"CurrentThread","tokio_current_thread","Executes tasks on the current thread",N,N],[3,"TaskExecutor","","Executes futures on the current thread.",N,N],[3,"Turn","","Returned by the `turn` function.",N,N],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",N,N],[3,"RunError","","Error returned by the `run` function.",N,N],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",N,N],[3,"TurnError","","Error returned by the `turn` function.",N,N],[3,"BlockError","","Error returned by the `block_on` function.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",N,N],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",N,[[["f"]],["result"]]],[5,"spawn","","Executes a future on the current thread.",N,[[["f"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["taskexecutor"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"new","","Create a new instance of `CurrentThread`.",6,[[],["self"]]],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",6,[[["p"]],["self"]]],[11,"is_idle","","Returns `true` if the executor is currently idle.",6,[[["self"]],["bool"]]],[11,"spawn","","Spawn the future on the executor.",6,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",6,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",6,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",6,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",6,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"enter","","Bind `CurrentThread` instance with an execution context.",6,[[["self"],["enter"]],["entered"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",6,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",6,[[["self"]],["p"]]],[11,"handle","","Get a new handle to spawn futures on the executor",6,[[["self"]],["handle"]]],[11,"drop","","",6,[[["self"]]]],[11,"spawn","","",6,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn the future on the executor.",7,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",7,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,[[["self"]],["p"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["handle"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",8,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[11,"current","","Returns an executor that executes futures on the current thread.",0,[[],["taskexecutor"]]],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",0,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"spawn","","",0,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"execute","","",0,[[["self"],["f"]],["result",["executeerror"]]]],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",3,[[["self"]],["bool"]]],[11,"from","","",3,[[["entererror"]],["self"]]],[11,"into_inner","","Returns the error yielded by the future being blocked on",5,[[["self"]],["option"]]],[11,"from","","",5,[[["entererror"]],["self"]]]],"paths":[[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,[[["self"]]]],[11,"block_on","","Blocks the thread on the specified future, returning the value with which that future completes.",1,[[["self"],["f"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["defaultexecutor"]]],[11,"current","","Returns a handle to the default executor for the current context.",2,[[],["defaultexecutor"]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",2,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",2,[[["self"],["t"]],["result",["executeerror"]]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,N],[16,"Error","","Error returned by `park`",3,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,N],[10,"park","","Block the current thread unless or until the token is available.",3,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",3,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unparkthread"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,[[],["parkthread"]]],[11,"unpark","","",5,N],[11,"park","","",5,[[["self"]],["result"]]],[11,"park_timeout","","",5,[[["self"],["duration"]],["result"]]],[11,"unpark","","",7,[[["self"]]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,[[["self"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"]={"doc":"Asynchronous file and standard stream adaptation.","items":[[3,"CreateDirFuture","tokio_fs","Future returned by `create_dir`.",N,N],[3,"CreateDirAllFuture","","Future returned by `create_dir_all`.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"HardLinkFuture","","Future returned by `hard_link`.",N,N],[3,"MetadataFuture","","Future returned by `metadata`.",N,N],[3,"ReadDirFuture","","Future returned by `read_dir`.",N,N],[3,"ReadDir","","Stream of the entries in a directory.",N,N],[3,"DirEntry","","Entries returned by the [`ReadDir`] stream.",N,N],[3,"ReadLinkFuture","","Future returned by `read_link`.",N,N],[3,"RemoveDirFuture","","Future returned by `remove_dir`.",N,N],[3,"RemoveFileFuture","","Future returned by `remove_file`.",N,N],[3,"RenameFuture","","Future returned by `rename`.",N,N],[3,"SetPermissionsFuture","","Future returned by `set_permissions`.",N,N],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[3,"SymlinkMetadataFuture","","Future returned by `symlink_metadata`.",N,N],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"remove_dir","","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"File","","A reference to an open file on the filesystem.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"clone","tokio_fs","",5,[[["self"]],["openoptions"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a blank new set of options ready for configuration.",5,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",5,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",5,[[["self"],["p"]],["openfuture"]]],[11,"from","","",5,[[["stdopenoptions"]],["openoptions"]]],[11,"fmt","tokio_fs::file","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"open","","Attempts to open a file in read-only mode.",7,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",7,[[["p"]],["createfuture"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",7,[[["self"],["seekfrom"]],["poll",["u64","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",7,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",7,[[["self"]],["poll",["error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",7,[[["self"]],["poll",["error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",7,[[["self"],["u64"]],["poll",["error"]]]],[11,"metadata","","Queries metadata about the underlying file.",7,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",7,[[["self"]],["poll",["metadata","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",7,[[["self"]],["poll",["file","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",7,[[["self"],["permissions"]],["poll",["error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",7,[[["self"]],["stdfile"]]],[11,"read","","",7,N],[11,"prepare_uninitialized_buffer","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"shutdown","","",7,[[["self"]],["poll",["error"]]]],[11,"drop","","",7,[[["self"]]]],[11,"fmt","tokio_fs","",8,[[["self"],["formatter"]],["result"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[0,"os","","OS-specific functionality.",N,N],[0,"unix","tokio_fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[3,"SymlinkFuture","tokio_fs::os::unix","Future returned by `symlink`.",N,N],[5,"symlink","","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","tokio_fs","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"into_std","","Destructures the `tokio_fs::DirEntry` into a [`std::fs::DirEntry`][std].",13,[[["self"]],["stddirentry"]]],[11,"path","","Returns the full path to the file that this entry represents.",13,[[["self"]],["pathbuf"]]],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",13,[[["self"]],["osstring"]]],[11,"poll_metadata","","Return the metadata for the file that this entry points at.",13,[[["self"]],["poll",["metadata","error"]]]],[11,"poll_file_type","","Return the file type for the file that this entry points at.",13,[[["self"]],["poll",["filetype","error"]]]],[11,"ino","","",13,[[["self"]],["u64"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"read","","",19,N],[11,"prepare_uninitialized_buffer","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"write","","",20,N],[11,"flush","","",20,[[["self"]],["result"]]],[11,"shutdown","","",20,[[["self"]],["poll",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"write","","",21,N],[11,"flush","","",21,[[["self"]],["result"]]],[11,"shutdown","","",21,[[["self"]],["poll",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]]],"paths":[[3,"CreateDirFuture"],[3,"CreateDirAllFuture"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"OpenOptions"],[3,"SeekFuture"],[3,"File"],[3,"HardLinkFuture"],[3,"MetadataFuture"],[3,"SymlinkFuture"],[3,"ReadDirFuture"],[3,"ReadDir"],[3,"DirEntry"],[3,"ReadLinkFuture"],[3,"RemoveDirFuture"],[3,"RemoveFileFuture"],[3,"RenameFuture"],[3,"SetPermissionsFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"SymlinkMetadataFuture"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["allowstdio"]]],[11,"eq","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",8,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",8,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",8,[[["self"]],["t"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"write_all","","",8,N],[11,"write_fmt","","",8,[[["self"],["arguments"]],["result"]]],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"read","","",8,N],[11,"read_to_end","","",8,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",8,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",8,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Returns the underlying I/O object.",9,[[["self"]],["a"]]],[11,"poll","","",9,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"read","","",10,N],[11,"read_buf","","",10,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[11,"shutdown","","",11,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",11,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"drop","","",0,[[["self"]]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",2,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",2,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",2,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",2,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",2,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",2,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",2,[[["self"]],["result"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Registration`.",3,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",3,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",3,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",3,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",3,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",3,[[["self"]],["result",["option"]]]],[11,"clone","","",4,[[["self"]],["handle"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["setfallbackerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",7,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",7,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",7,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",7,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",7,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",7,[[["self"]],["result",["background"]]]],[11,"unpark","","",7,N],[11,"park","","",7,[[["self"]],["result"]]],[11,"park_timeout","","",7,[[["self"],["duration"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"current","","Returns a handle to the current reactor.",4,[[],["handle"]]],[11,"unpark","","",4,[[["self"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,[[],["handle"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]]],"paths":[[3,"Background"],[3,"Shutdown"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_tcp"]={"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["option","error"]]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",1,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,[[["self"]],["poll",["error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,[[["self"]],["poll",["error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,[[["tcplistener"],["handle"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",2,[[["self"]],["rawfd"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"connect","","Create a new TCP stream connected to the specified address.",2,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,[[["tcpstream"],["handle"]],["result",["tcpstream"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",2,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,[[["self"]],["result",["socketaddr"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,[[["self"],["shutdown"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,[[["self"]],["result",["bool"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,[[["self"],["bool"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,[[["self"]],["result",["usize"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,[[["self"],["usize"]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,[[["self"]],["result",["option"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,[[["self"],["option",["duration"]]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,[[["self"],["u32"]],["result"]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,[[["self"]],["result",["option"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,[[["self"],["option",["duration"]]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",2,[[["self"]],["result",["tcpstream"]]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",2,N],[11,"read_buf","","",2,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",2,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["tcpstream","error"]]]]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"]={"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",N,N],[3,"Builder","","Builds a thread pool with custom configuration values.",N,N],[3,"Sender","","Submit futures to the associated thread pool for execution.",N,N],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",N,N],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",N,N],[3,"SpawnHandle","","Handle returned from ThreadPool::spawn_handle.",N,N],[3,"Worker","","Thread worker",N,N],[3,"WorkerId","","Identifies a thread pool worker.",N,N],[5,"blocking","","Enter a blocking section of code.",N,[[["f"]],["poll",["blockingerror"]]]],[0,"park","","Thread parking utilities.",N,N],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",N,N],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `DefaultPark` instance.",0,[[],["defaultpark"]]],[11,"unpark","","",0,N],[11,"park","","",0,[[["self"]],["result"]]],[11,"park_timeout","","",0,[[["self"],["duration"]],["result"]]],[11,"unpark","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","tokio_threadpool","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,[[],["builder"]]],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,[[["self"],["usize"]],["self"]]],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,[[["self"],["usize"]],["self"]]],[11,"keep_alive","","Set the worker thread keep alive duration",4,[[["self"],["option",["duration"]]],["self"]]],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,[[["self"],["s"]],["self"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,[[["self"],["usize"]],["self"]]],[11,"around_worker","","Execute function `f` on each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each thread stops.",4,[[["self"],["f"]],["self"]]],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"build","","Create the configured `ThreadPool`.",4,[[["self"]],["threadpool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn a future onto the thread pool",5,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","",5,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",5,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"execute","","",5,[[["self"],["t"]],["result",["executeerror"]]]],[11,"clone","","",5,[[["self"]],["sender"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ThreadPool` with default values.",7,[[],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool.",7,[[["self"],["f"]]]],[11,"spawn_handle","","Spawn a future on to the thread pool, return a future representing  the produced value.",7,[[["self"],["f"]],["spawnhandle"]]],[11,"sender","","Return a reference to the sender handle",7,[[["self"]],["sender"]]],[11,"sender_mut","","Return a mutable reference to the sender handle",7,[[["self"]],["sender"]]],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,[[["self"]],["shutdown"]]],[11,"shutdown","","Shutdown the pool",7,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the pool immediately",7,[[["self"]],["shutdown"]]],[11,"drop","","",7,[[["self"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["workerid"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["workerid"]],["bool"]]],[11,"ne","","",10,[[["self"],["workerid"]],["bool"]]],[11,"id","","Returns a reference to the worker's identifier.",9,[[["self"]],["workerid"]]],[11,"run","","Run the worker",9,[[["self"]]]],[11,"drop","","",9,[[["self"]]]]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"SpawnHandle"],[3,"Worker"],[3,"WorkerId"]]};
searchIndex["tokio_timer"]={"doc":"Utilities for tracking time.","items":[[3,"DelayQueue","tokio_timer","A queue of delayed elements.",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[5,"sleep","","Create a Future that completes in `duration` from now.",N,[[["duration"]],["delay"]]],[0,"clock","","A configurable source of time.",N,N],[3,"Clock","tokio_timer::clock","A handle to a source of time.",N,N],[5,"now","","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[5,"with_default","","Set the default clock for the duration of the closure.",N,[[["clock"],["enter"],["f"]],["r"]]],[11,"default","","",0,[[],["clock"]]],[11,"clone","","",0,[[["self"]],["clock"]]],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,[[],["clock"]]],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,[[["t"]],["clock"]]],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,[[],["clock"]]],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,[[["self"]],["instant"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[8,"Now","","Returns `Instant` values representing the current instant in time.",N,N],[10,"now","","Returns an instant corresponding to \"now\".",1,[[["self"]],["instant"]]],[0,"delay_queue","tokio_timer","A queue of delayed elements.",N,N],[3,"DelayQueue","tokio_timer::delay_queue","A queue of delayed elements.",N,N],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty, `DelayQueue`",2,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",2,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",2,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",2,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",2,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",2,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",2,[[["self"],["key"],["instant"]]]],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",2,[[["self"],["key"],["duration"]]]],[11,"clear","","Clears the queue, removing all items.",2,[[["self"]]]],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",2,[[["self"],["usize"]]]],[11,"is_empty","","Returns `true` if there are no items in the queue.",2,[[["self"]],["bool"]]],[11,"poll","","",2,[[["self"]],["poll",["option","error"]]]],[11,"get_ref","","Returns a reference to the inner value.",3,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",3,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",3,[[["self"]],["t"]]],[0,"timeout","tokio_timer","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Timeout","tokio_timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Error returned by `Timeout`.",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",5,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",5,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",5,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",5,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",5,[[["t"],["instant"]],["timeout"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"poll","","",5,[[["self"]],["poll",["option"]]]],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",6,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",6,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",6,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",6,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",6,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,[[["self"]],["option",["error"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[0,"timer","tokio_timer","Timer implementation.",N,N],[3,"Handle","tokio_timer::timer","Handle to timer instance.",N,N],[3,"SystemNow","","A handle to a source of time.",N,N],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",N,N],[3,"Turn","","Return value from the `turn` method on `Timer`.",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["handle"]]],[11,"current","","Returns a handle to the current timer.",7,[[],["handle"]]],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",7,[[["self"],["instant"]],["delay"]]],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",7,[[["self"],["t"],["instant"]],["deadline"]]],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",7,[[["self"],["instant"],["duration"]],["interval"]]],[11,"default","","",7,[[],["handle"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",8,[[["t"]],["self"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,[[["self"]],["t"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,[[["self"]],["t"]]],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",8,[[["t"],["n"]],["self"]]],[11,"handle","","Returns a handle to the timer.",8,[[["self"]],["handle"]]],[11,"turn","","Performs one iteration of the timer loop.",8,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"default","","",8,[[],["self"]]],[11,"unpark","","",8,N],[11,"park","","",8,[[["self"]],["result"]]],[11,"park_timeout","","",8,[[["self"],["duration"]],["result"]]],[11,"drop","","",8,[[["self"]]]],[11,"fmt","tokio_timer","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",10,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",10,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",10,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",10,[[["self"],["instant"]]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Create an error representing a shutdown timer.",11,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",11,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",11,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",11,[[["self"]],["bool"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",12,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",12,[[["duration"]],["interval"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]]],"paths":[[3,"Clock"],[8,"Now"],[3,"DelayQueue"],[3,"Expired"],[3,"Key"],[3,"Timeout"],[3,"Error"],[3,"Handle"],[3,"Timer"],[3,"Turn"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_udp"]={"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["option"]]]],[11,"start_send","","",0,N],[11,"poll_complete","","",0,[[["self"]],["poll"]]],[11,"close","","",0,[[["self"]],["poll"]]],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,[[["self"]],["udpsocket"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,[[["udpsocket"],["handle"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,[[["self"],["socketaddr"]],["result"]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"],["u32"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["tokio_uds"]={"doc":"Unix Domain Sockets for Tokio.","items":[[3,"UnixDatagram","tokio_uds","An I/O object representing a Unix datagram socket.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"UCred","","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",0,N],[12,"gid","","GID (group ID) of the process",0,N],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",1,[[["p"]],["result",["unixdatagram"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",1,[[],["result"]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",1,[[["unixdatagram"],["handle"]],["result",["unixdatagram"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",1,[[],["result",["unixdatagram"]]]],[11,"connect","","Connects the socket to the specified address.",1,[[["self"],["p"]],["result"]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",1,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",1,[[["self"]],["result",["socketaddr"]]]],[11,"poll_recv_from","","Receives data from the socket.",1,N],[11,"poll_recv","","Receives data from the socket.",1,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",1,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",1,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",1,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",1,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",1,[[["self"],["shutdown"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["option","error"]]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",3,[[["p"]],["result",["unixlistener"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",3,[[["unixlistener"],["handle"]],["result",["unixlistener"]]]],[11,"local_addr","","Returns the local socket address of this listener.",3,[[["self"]],["result",["socketaddr"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",3,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",3,[[["self"]],["result",["option"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,[[["self"]],["poll",["error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,[[["self"]],["poll",["error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",3,[[["self"]],["incoming"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",3,[[["self"]],["rawfd"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"connect","","Connects to the socket named by `path`.",7,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",7,[[["unixstream"],["handle"]],["result",["unixstream"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",7,[[],["result"]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",7,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",7,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",7,[[["self"]],["result",["ucred"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",7,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"read","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",7,N],[11,"read_buf","","",7,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",7,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",7,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"poll","","",6,[[["self"]],["poll",["unixstream","error"]]]],[11,"clone","","",0,[[["self"]],["ucred"]]],[11,"eq","","",0,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",0,[[["self"],["ucred"]],["bool"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"UCred"],[3,"UnixDatagram"],[3,"Incoming"],[3,"UnixListener"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"UnixStream"]]};
searchIndex["try_lock"]={"doc":"A light-weight lock guarded by an atomic boolean.","items":[[3,"TryLock","try_lock","A light-weight lock guarded by an atomic boolean.",N,N],[3,"Locked","","A locked value acquired from a `TryLock`.",N,N],[11,"default","","",0,[[],["trylock"]]],[11,"new","","Create a `TryLock` around the value.",0,[[["t"]],["trylock"]]],[11,"try_lock","","Try to acquire the lock of this value.",0,[[["self"]],["option",["locked"]]]],[11,"try_lock_order","","Try to acquire the lock of this value using the lock and unlock orderings.",0,[[["self"],["ordering"],["ordering"]],["option",["locked"]]]],[11,"into_inner","","Take the value back out of the lock when this is the sole owner.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryLock"],[3,"Locked"]]};
searchIndex["tungstenite"]={"doc":"Lightweight, flexible WebSockets for Rust.","items":[[4,"Message","tungstenite","An enum representing the various forms of a WebSocket message.",N,N],[13,"Text","","A text WebSocket message",0,N],[13,"Binary","","A binary WebSocket message",0,N],[13,"Ping","","A ping message with the specified payload",0,N],[13,"Pong","","A pong message with the specified payload",0,N],[0,"error","","Error handling.",N,N],[4,"Error","tungstenite::error","Possible WebSocket errors",N,N],[13,"ConnectionClosed","","WebSocket connection closed (normally)",1,N],[13,"Io","","Input-output error",1,N],[13,"Tls","","TLS error",1,N],[13,"Capacity","","Buffer capacity exhausted",1,N],[13,"Protocol","","Protocol violation",1,N],[13,"SendQueueFull","","Message send queue full",1,N],[13,"Utf8","","UTF coding error",1,N],[13,"Url","","Invlid URL.",1,N],[13,"Http","","HTTP error.",1,N],[0,"tls","","TLS error wrapper module, feature-gated.",N,N],[3,"Error","tungstenite::error::tls","An error returned from the TLS implementation.",N,N],[6,"Result","tungstenite::error","Result type of all Tungstenite library calls.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",1,[[["utf8error"]],["self"]]],[11,"from","","",1,[[["fromutf8error"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[0,"protocol","tungstenite","Generic WebSocket message stream.",N,N],[3,"CloseFrame","tungstenite::protocol","A struct representing the close command.",N,N],[12,"code","","The reason as a code.",2,N],[12,"reason","","The reason as text string.",2,N],[3,"WebSocketConfig","","The configuration for WebSocket connection.",N,N],[12,"max_send_queue","","The size of the send queue. You can use it to turn on/off the backpressure features. `None` means here that the size of the queue is unlimited. The default value is the unlimited queue.",3,N],[12,"max_message_size","","The maximum size of a message. `None` means no size limit. The default value is 64 megabytes which should be reasonably big for all normal use-cases but small enough to prevent memory eating by a malicious user.",3,N],[12,"max_frame_size","","The maximum size of a single message frame. `None` means no size limit. The limit is for frame payload NOT including the frame header. The default value is 16 megabytes which should be reasonably big for all normal use-cases but small enough to prevent memory eating by a malicious user.",3,N],[3,"WebSocket","","WebSocket input-output stream.",N,N],[4,"Message","","An enum representing the various forms of a WebSocket message.",N,N],[13,"Text","","A text WebSocket message",0,N],[13,"Binary","","A binary WebSocket message",0,N],[13,"Ping","","A ping message with the specified payload",0,N],[13,"Pong","","A pong message with the specified payload",0,N],[4,"Role","","Indicates a Client or Server role of the websocket",N,N],[13,"Server","","This socket is a server",4,N],[13,"Client","","This socket is a client",4,N],[0,"frame","","Utilities to work with raw WebSocket frames.",N,N],[3,"Frame","tungstenite::protocol::frame","A struct representing a WebSocket frame.",N,N],[3,"FrameHeader","","A struct representing a WebSocket frame header.",N,N],[12,"is_final","","Indicates that the frame is the last one of a possibly fragmented message.",5,N],[12,"rsv1","","Reserved for protocol extensions.",5,N],[12,"rsv2","","Reserved for protocol extensions.",5,N],[12,"rsv3","","Reserved for protocol extensions.",5,N],[12,"opcode","","WebSocket protocol opcode.",5,N],[3,"CloseFrame","","A struct representing the close command.",N,N],[12,"code","","The reason as a code.",2,N],[12,"reason","","The reason as text string.",2,N],[3,"FrameSocket","","A reader and writer for WebSocket frames.",N,N],[0,"coding","","Various codes defined in RFC 6455.",N,N],[4,"OpCode","tungstenite::protocol::frame::coding","WebSocket message opcode as in RFC 6455.",N,N],[13,"Data","","Data (text or binary).",6,N],[13,"Control","","Control message (close, ping, pong).",6,N],[4,"Data","","Data opcodes as in RFC 6455",N,N],[13,"Continue","","0x0 denotes a continuation frame",7,N],[13,"Text","","0x1 denotes a text frame",7,N],[13,"Binary","","0x2 denotes a binary frame",7,N],[13,"Reserved","","0x3-7 are reserved for further non-control frames",7,N],[4,"Control","","Control opcodes as in RFC 6455",N,N],[13,"Close","","0x8 denotes a connection close",8,N],[13,"Ping","","0x9 denotes a ping",8,N],[13,"Pong","","0xa denotes a pong",8,N],[13,"Reserved","","0xb-f are reserved for further control frames",8,N],[4,"CloseCode","","Status code used to indicate why an endpoint is closing the WebSocket connection.",N,N],[13,"Normal","","Indicates a normal closure, meaning that the purpose for which the connection was established has been fulfilled.",9,N],[13,"Away","","Indicates that an endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.",9,N],[13,"Protocol","","Indicates that an endpoint is terminating the connection due to a protocol error.",9,N],[13,"Unsupported","","Indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).",9,N],[13,"Status","","Indicates that no status code was included in a closing frame. This close code makes it possible to use a single method, `on_close` to handle even cases where no close code was provided.",9,N],[13,"Abnormal","","Indicates an abnormal closure. If the abnormal closure was due to an error, this close code will not be used. Instead, the `on_error` method of the handler will be called with the error. However, if the connection is simply dropped, without an error, this close code will be sent to the handler.",9,N],[13,"Invalid","","Indicates that an endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).",9,N],[13,"Policy","","Indicates that an endpoint is terminating the connection because it has received a message that violates its policy.  This is a generic status code that can be returned when there is no other more suitable status code (e.g., Unsupported or Size) or if there is a need to hide specific details about the policy.",9,N],[13,"Size","","Indicates that an endpoint is terminating the connection because it has received a message that is too big for it to process.",9,N],[13,"Extension","","Indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake.  The list of extensions that are needed should be given as the reason for closing. Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.",9,N],[13,"Error","","Indicates that a server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.",9,N],[13,"Restart","","Indicates that the server is restarting. A client may choose to reconnect, and if it does, it should use a randomized delay of 5-30 seconds between attempts.",9,N],[13,"Again","","Indicates that the server is overloaded and the client should either connect to a different IP (when multiple targets exist), or reconnect to the same IP when a user has performed an action.",9,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["opcode"]],["bool"]]],[11,"ne","","",6,[[["self"],["opcode"]],["bool"]]],[11,"clone","","",6,[[["self"]],["opcode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["data"]],["bool"]]],[11,"ne","","",7,[[["self"],["data"]],["bool"]]],[11,"clone","","",7,[[["self"]],["data"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["control"]],["bool"]]],[11,"ne","","",8,[[["self"],["control"]],["bool"]]],[11,"clone","","",8,[[["self"]],["control"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into","","",6,[[["self"]],["u8"]]],[11,"from","","",6,[[["u8"]],["opcode"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["closecode"]],["bool"]]],[11,"ne","","",9,[[["self"],["closecode"]],["bool"]]],[11,"clone","","",9,[[["self"]],["closecode"]]],[11,"is_allowed","","Check if this CloseCode is allowed.",9,[[["self"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into","","",9,[[["self"]],["u16"]]],[11,"from","","",9,[[["u16"]],["closecode"]]],[11,"fmt","tungstenite::protocol","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["closeframe"]]],[11,"into_owned","","Convert into a owned string.",2,[[["self"]],["closeframe"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tungstenite::protocol::frame","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["frameheader"]]],[11,"default","","",5,[[],["self"]]],[11,"parse","","Parse a header from an input stream. Returns `None` if insufficient data and does not consume anything in this case. Payload size is returned along with the header.",5,[[["cursor"]],["result",["option"]]]],[11,"len","","Get the size of the header formatted with given payload length.",5,[[["self"],["u64"]],["usize"]]],[11,"format","","Format a header for given payload size.",5,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["frame"]]],[11,"len","","Get the length of the frame. This is the length of the header + the length of the payload.",10,[[["self"]],["usize"]]],[11,"header","","Get a reference to the frame's header.",10,[[["self"]],["frameheader"]]],[11,"header_mut","","Get a mutable reference to the frame's header.",10,[[["self"]],["frameheader"]]],[11,"payload","","Get a reference to the frame's payload.",10,[[["self"]],["vec"]]],[11,"payload_mut","","Get a mutable reference to the frame's payload.",10,[[["self"]],["vec"]]],[11,"into_data","","Consume the frame into its payload as binary.",10,[[["self"]],["vec",["u8"]]]],[11,"into_string","","Consume the frame into its payload as string.",10,[[["self"]],["stdresult",["string","fromutf8error"]]]],[11,"message","","Create a new data frame.",10,[[["vec",["u8"]],["opcode"],["bool"]],["frame"]]],[11,"pong","","Create a new Pong control frame.",10,[[["vec",["u8"]]],["frame"]]],[11,"ping","","Create a new Ping control frame.",10,[[["vec",["u8"]]],["frame"]]],[11,"close","","Create a new Close control frame.",10,[[["option",["closeframe"]]],["frame"]]],[11,"from_payload","","Create a frame from given header and data.",10,[[["frameheader"],["vec",["u8"]]],["self"]]],[11,"format","","Write a frame out to a buffer",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new frame socket.",11,[[["stream"]],["self"]]],[11,"from_partially_read","","Create a new frame socket from partially read data.",11,[[["stream"],["vec",["u8"]]],["self"]]],[11,"into_inner","","Extract a stream from the socket.",11,N],[11,"get_ref","","Returns a shared reference to the inner stream.",11,[[["self"]],["stream"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",11,[[["self"]],["stream"]]],[11,"read_frame","","Read a frame from stream.",11,[[["self"],["option",["usize"]]],["result",["option"]]]],[11,"write_frame","","Write a frame to stream.",11,[[["self"],["frame"]],["result"]]],[11,"write_pending","","Complete pending write, if any.",11,[[["self"]],["result"]]],[11,"fmt","tungstenite","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["message"]],["bool"]]],[11,"ne","","",0,[[["self"],["message"]],["bool"]]],[11,"clone","","",0,[[["self"]],["message"]]],[11,"text","","Create a new text WebSocket message from a stringable.",0,[[["s"]],["message"]]],[11,"binary","","Create a new binary WebSocket message by converting to Vec.",0,[[["b"]],["message"]]],[11,"is_text","","Indicates whether a message is a text message.",0,[[["self"]],["bool"]]],[11,"is_binary","","Indicates whether a message is a binary message.",0,[[["self"]],["bool"]]],[11,"is_ping","","Indicates whether a message is a ping message.",0,[[["self"]],["bool"]]],[11,"is_pong","","Indicates whether a message is a pong message.",0,[[["self"]],["bool"]]],[11,"len","","Get the length of the WebSocket message.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the WebSocket message has no content. For example, if the other side of the connection sent an empty string.",0,[[["self"]],["bool"]]],[11,"into_data","","Consume the WebSocket and return it as binary data.",0,[[["self"]],["vec",["u8"]]]],[11,"into_text","","Attempt to consume the WebSocket message and convert it to a String.",0,[[["self"]],["result",["string"]]]],[11,"to_text","","Attempt to get a &str from the WebSocket message, this will try to convert binary data to utf8.",0,[[["self"]],["result",["str"]]]],[11,"from","","",0,[[["string"]],["message"]]],[11,"from","","",0,[[["str"]],["message"]]],[11,"from","","",0,N],[11,"from","","",0,[[["vec",["u8"]]],["message"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["stdresult",["error"]]]],[11,"fmt","tungstenite::protocol","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["role"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["websocketconfig"]]],[11,"default","","",3,[[],["self"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from_raw_socket","","Convert a raw socket into a WebSocket without performing a handshake.",12,[[["stream"],["role"],["option",["websocketconfig"]]],["self"]]],[11,"from_partially_read","","Convert a raw socket into a WebSocket without performing a handshake.",12,[[["stream"],["vec",["u8"]],["role"],["option",["websocketconfig"]]],["self"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",12,[[["self"]],["stream"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",12,[[["self"]],["stream"]]],[11,"set_config","","Change the configuration.",12,N],[11,"read_message","","Read a message from stream, if possible.",12,[[["self"]],["result",["message"]]]],[11,"write_message","","Send a message to stream, if possible.",12,[[["self"],["message"]],["result"]]],[11,"close","","Close the connection.",12,[[["self"],["option",["closeframe"]]],["result"]]],[11,"write_pending","","Flush the pending send queue.",12,[[["self"]],["result"]]],[0,"client","tungstenite","Methods to connect to an WebSocket as a client.",N,N],[5,"connect_with_config","tungstenite::client","Connect to the given WebSocket in blocking mode.",N,[[["req"],["option",["websocketconfig"]]],["result"]]],[5,"connect","","Connect to the given WebSocket in blocking mode.",N,[[["req"]],["result"]]],[5,"url_mode","","Get the mode of the given URL.",N,[[["url"]],["result",["mode"]]]],[5,"client_with_config","","Do the client handshake over the given stream given a web socket configuration. Passing `None` as configuration is equal to calling `client()` function.",N,[[["req"],["stream"],["option",["websocketconfig"]]],["stdresult",["handshakeerror"]]]],[5,"client","","Do the client handshake over the given stream.",N,[[["req"],["stream"]],["stdresult",["handshakeerror"]]]],[6,"AutoStream","","TCP stream switcher (plain/TLS).",N,N],[0,"server","tungstenite","Methods to accept an incoming WebSocket connection on a server.",N,N],[5,"accept_with_config","tungstenite::server","Accept the given Stream as a WebSocket.",N,[[["s"],["option",["websocketconfig"]]],["result",["websocket","handshakeerror"]]]],[5,"accept","","Accept the given Stream as a WebSocket.",N,[[["s"]],["result",["websocket","handshakeerror"]]]],[5,"accept_hdr_with_config","","Accept the given Stream as a WebSocket.",N,[[["s"],["c"],["option",["websocketconfig"]]],["result",["websocket","handshakeerror"]]]],[5,"accept_hdr","","Accept the given Stream as a WebSocket.",N,[[["s"],["c"]],["result",["websocket","handshakeerror"]]]],[0,"handshake","tungstenite","WebSocket handshake control.",N,N],[3,"MidHandshake","tungstenite::handshake","A WebSocket handshake.",N,N],[4,"HandshakeError","","A handshake result.",N,N],[13,"Interrupted","","Handshake was interrupted (would block).",13,N],[13,"Failure","","Handshake failed.",13,N],[0,"headers","","HTTP Request and response header handling.",N,N],[3,"Headers","tungstenite::handshake::headers","HTTP request or response headers.",N,N],[3,"HeadersIter","","The iterator over headers.",N,N],[17,"MAX_HEADERS","","Limit for the number of header lines.",N,N],[8,"FromHttparse","","Trait to convert raw objects into HTTP parseables.",N,N],[10,"from_httparse","","Convert raw object into parsed HTTP headers.",14,[[["t"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"find_first","","Get first header with the given name, if any.",15,[[["self"],["str"]],["option"]]],[11,"find","","Iterate over all headers with the given name.",15,[[["self"],["str"]],["headersiter"]]],[11,"header_is","","Check if the given header has the given value.",15,[[["self"],["str"],["str"]],["bool"]]],[11,"header_is_ignore_case","","Check if the given header has the given value (case-insensitive).",15,[[["self"],["str"],["str"]],["bool"]]],[11,"iter","","Allows to iterate over available headers.",15,[[["self"]],["iter"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"from_httparse","","",15,N],[0,"client","tungstenite::handshake","Client handshake machine.",N,N],[3,"Request","tungstenite::handshake::client","Client request.",N,N],[12,"url","","`ws://` or `wss://` URL to connect to.",17,N],[12,"extra_headers","","Extra HTTP headers to append to the request.",17,N],[3,"ClientHandshake","","Client handshake role.",N,N],[3,"Response","","Server response.",N,N],[12,"code","","HTTP response code of the response.",18,N],[12,"headers","","Received headers.",18,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"add_protocol","","Adds a WebSocket protocol to the request.",17,[[["self"],["cow",["str"]]]]],[11,"add_header","","Adds a custom header to the request.",17,[[["self"],["cow",["str"]],["cow",["str"]]]]],[11,"from","","",17,[[["url"]],["self"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"start","","Initiate a client handshake.",19,[[["s"],["request"],["option",["websocketconfig"]]],["midhandshake"]]],[11,"stage_finished","","",19,[[["self"],["stageresult"]],["result",["processingresult"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"from_httparse","","",18,[[["response"]],["result"]]],[0,"server","tungstenite::handshake","Server handshake machine.",N,N],[3,"Request","tungstenite::handshake::server","Request from the client.",N,N],[12,"path","","Path part of the URL.",20,N],[12,"headers","","HTTP headers.",20,N],[3,"NoCallback","","Stub for callback that does nothing.",N,N],[3,"ServerHandshake","","Server handshake role.",N,N],[8,"Callback","","The callback trait.",N,N],[10,"on_request","","Called whenever the server read the request from the client and is ready to reply to it. May return additional reply headers. Returning an error resulting in rejecting the incoming connection.",21,[[["self"],["request"]],["result",["option"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"reply","","Reply to the response.",20,[[["self"],["option",["vec"]]],["result",["vec"]]]],[11,"from_httparse","","",20,[[["request"]],["result"]]],[11,"clone","","",22,[[["self"]],["nocallback"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"on_request","","",22,[[["self"],["request"]],["result",["option"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"start","","Start server handshake. `callback` specifies a custom callback which the user can pass to the handshake, this callback will be called when the a websocket client connnects to the server, you can specify the callback if you want to add additional header to the client upon join based on the incoming headers.",23,[[["s"],["c"],["option",["websocketconfig"]]],["midhandshake"]]],[11,"stage_finished","","",23,[[["self"],["stageresult"]],["result",["processingresult"]]]],[8,"HandshakeRole","tungstenite::handshake","Handshake role.",N,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"handshake","","Restarts the handshake process.",24,[[["self"]],["result",["handshakeerror"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"from","","",13,[[["error"]],["self"]]],[0,"stream","tungstenite","Convenience wrapper for streams to switch between plain TCP and TLS at runtime.",N,N],[4,"Mode","tungstenite::stream","Stream mode, either plain TCP or TLS.",N,N],[13,"Plain","","Plain mode (`ws://` URL).",25,N],[13,"Tls","","TLS mode (`wss://` URL).",25,N],[4,"Stream","","Stream, either plain TCP or TLS.",N,N],[13,"Plain","","Unencrypted socket stream.",26,N],[13,"Tls","","Encrypted socket stream.",26,N],[8,"NoDelay","","Trait to switch TCP_NODELAY.",N,N],[10,"set_nodelay","","Set the TCP_NODELAY option to the given value.",27,[[["self"],["bool"]],["ioresult"]]],[11,"clone","","",25,[[["self"]],["mode"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"read","","",26,N],[11,"write","","",26,N],[11,"flush","","",26,[[["self"]],["ioresult"]]],[11,"set_nodelay","","",26,[[["self"],["bool"]],["ioresult"]]],[0,"util","tungstenite","Helper traits to ease non-blocking handling.",N,N],[8,"NonBlockingError","tungstenite::util","Non-blocking IO handling.",N,N],[10,"into_non_blocking","","Convert WouldBlock to None and don't touch other errors.",28,[[["self"]],["option"]]],[8,"NonBlockingResult","","Non-blocking IO wrapper.",N,N],[16,"Result","","Type of the converted result: `Result<Option<T>, E>`",29,N],[10,"no_block","","Perform the non-block conversion.",29,N],[11,"into_non_blocking","tungstenite::error","",1,[[["self"]],["option"]]],[11,"fmt","tungstenite::error::tls","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",30,[[["self"]],["str"]]],[11,"cause","","",30,[[["self"]],["option",["error"]]]],[11,"from","","",30,[[["error"]],["error"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[4,"Message"],[4,"Error"],[3,"CloseFrame"],[3,"WebSocketConfig"],[4,"Role"],[3,"FrameHeader"],[4,"OpCode"],[4,"Data"],[4,"Control"],[4,"CloseCode"],[3,"Frame"],[3,"FrameSocket"],[3,"WebSocket"],[4,"HandshakeError"],[8,"FromHttparse"],[3,"Headers"],[3,"HeadersIter"],[3,"Request"],[3,"Response"],[3,"ClientHandshake"],[3,"Request"],[8,"Callback"],[3,"NoCallback"],[3,"ServerHandshake"],[3,"MidHandshake"],[4,"Mode"],[4,"Stream"],[8,"NoDelay"],[8,"NonBlockingError"],[8,"NonBlockingResult"],[3,"Error"]]};
searchIndex["typenum"]={"doc":"This crate provides type-level numbers evaluated at compile time. It depends only on libcore.","items":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Greater`.",N,N],[3,"Less","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Less`.",N,N],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Equal`.",N,N],[0,"consts","","Type aliases for many constants.",N,N],[6,"True","typenum::consts","",N,N],[6,"False","","",N,N],[6,"U0","","",N,N],[6,"U1","","",N,N],[6,"P1","","",N,N],[6,"N1","","",N,N],[6,"U2","","",N,N],[6,"P2","","",N,N],[6,"N2","","",N,N],[6,"U3","","",N,N],[6,"P3","","",N,N],[6,"N3","","",N,N],[6,"U4","","",N,N],[6,"P4","","",N,N],[6,"N4","","",N,N],[6,"U5","","",N,N],[6,"P5","","",N,N],[6,"N5","","",N,N],[6,"U6","","",N,N],[6,"P6","","",N,N],[6,"N6","","",N,N],[6,"U7","","",N,N],[6,"P7","","",N,N],[6,"N7","","",N,N],[6,"U8","","",N,N],[6,"P8","","",N,N],[6,"N8","","",N,N],[6,"U9","","",N,N],[6,"P9","","",N,N],[6,"N9","","",N,N],[6,"U10","","",N,N],[6,"P10","","",N,N],[6,"N10","","",N,N],[6,"U11","","",N,N],[6,"P11","","",N,N],[6,"N11","","",N,N],[6,"U12","","",N,N],[6,"P12","","",N,N],[6,"N12","","",N,N],[6,"U13","","",N,N],[6,"P13","","",N,N],[6,"N13","","",N,N],[6,"U14","","",N,N],[6,"P14","","",N,N],[6,"N14","","",N,N],[6,"U15","","",N,N],[6,"P15","","",N,N],[6,"N15","","",N,N],[6,"U16","","",N,N],[6,"P16","","",N,N],[6,"N16","","",N,N],[6,"U17","","",N,N],[6,"P17","","",N,N],[6,"N17","","",N,N],[6,"U18","","",N,N],[6,"P18","","",N,N],[6,"N18","","",N,N],[6,"U19","","",N,N],[6,"P19","","",N,N],[6,"N19","","",N,N],[6,"U20","","",N,N],[6,"P20","","",N,N],[6,"N20","","",N,N],[6,"U21","","",N,N],[6,"P21","","",N,N],[6,"N21","","",N,N],[6,"U22","","",N,N],[6,"P22","","",N,N],[6,"N22","","",N,N],[6,"U23","","",N,N],[6,"P23","","",N,N],[6,"N23","","",N,N],[6,"U24","","",N,N],[6,"P24","","",N,N],[6,"N24","","",N,N],[6,"U25","","",N,N],[6,"P25","","",N,N],[6,"N25","","",N,N],[6,"U26","","",N,N],[6,"P26","","",N,N],[6,"N26","","",N,N],[6,"U27","","",N,N],[6,"P27","","",N,N],[6,"N27","","",N,N],[6,"U28","","",N,N],[6,"P28","","",N,N],[6,"N28","","",N,N],[6,"U29","","",N,N],[6,"P29","","",N,N],[6,"N29","","",N,N],[6,"U30","","",N,N],[6,"P30","","",N,N],[6,"N30","","",N,N],[6,"U31","","",N,N],[6,"P31","","",N,N],[6,"N31","","",N,N],[6,"U32","","",N,N],[6,"P32","","",N,N],[6,"N32","","",N,N],[6,"U33","","",N,N],[6,"P33","","",N,N],[6,"N33","","",N,N],[6,"U34","","",N,N],[6,"P34","","",N,N],[6,"N34","","",N,N],[6,"U35","","",N,N],[6,"P35","","",N,N],[6,"N35","","",N,N],[6,"U36","","",N,N],[6,"P36","","",N,N],[6,"N36","","",N,N],[6,"U37","","",N,N],[6,"P37","","",N,N],[6,"N37","","",N,N],[6,"U38","","",N,N],[6,"P38","","",N,N],[6,"N38","","",N,N],[6,"U39","","",N,N],[6,"P39","","",N,N],[6,"N39","","",N,N],[6,"U40","","",N,N],[6,"P40","","",N,N],[6,"N40","","",N,N],[6,"U41","","",N,N],[6,"P41","","",N,N],[6,"N41","","",N,N],[6,"U42","","",N,N],[6,"P42","","",N,N],[6,"N42","","",N,N],[6,"U43","","",N,N],[6,"P43","","",N,N],[6,"N43","","",N,N],[6,"U44","","",N,N],[6,"P44","","",N,N],[6,"N44","","",N,N],[6,"U45","","",N,N],[6,"P45","","",N,N],[6,"N45","","",N,N],[6,"U46","","",N,N],[6,"P46","","",N,N],[6,"N46","","",N,N],[6,"U47","","",N,N],[6,"P47","","",N,N],[6,"N47","","",N,N],[6,"U48","","",N,N],[6,"P48","","",N,N],[6,"N48","","",N,N],[6,"U49","","",N,N],[6,"P49","","",N,N],[6,"N49","","",N,N],[6,"U50","","",N,N],[6,"P50","","",N,N],[6,"N50","","",N,N],[6,"U51","","",N,N],[6,"P51","","",N,N],[6,"N51","","",N,N],[6,"U52","","",N,N],[6,"P52","","",N,N],[6,"N52","","",N,N],[6,"U53","","",N,N],[6,"P53","","",N,N],[6,"N53","","",N,N],[6,"U54","","",N,N],[6,"P54","","",N,N],[6,"N54","","",N,N],[6,"U55","","",N,N],[6,"P55","","",N,N],[6,"N55","","",N,N],[6,"U56","","",N,N],[6,"P56","","",N,N],[6,"N56","","",N,N],[6,"U57","","",N,N],[6,"P57","","",N,N],[6,"N57","","",N,N],[6,"U58","","",N,N],[6,"P58","","",N,N],[6,"N58","","",N,N],[6,"U59","","",N,N],[6,"P59","","",N,N],[6,"N59","","",N,N],[6,"U60","","",N,N],[6,"P60","","",N,N],[6,"N60","","",N,N],[6,"U61","","",N,N],[6,"P61","","",N,N],[6,"N61","","",N,N],[6,"U62","","",N,N],[6,"P62","","",N,N],[6,"N62","","",N,N],[6,"U63","","",N,N],[6,"P63","","",N,N],[6,"N63","","",N,N],[6,"U64","","",N,N],[6,"P64","","",N,N],[6,"N64","","",N,N],[6,"U65","","",N,N],[6,"P65","","",N,N],[6,"N65","","",N,N],[6,"U66","","",N,N],[6,"P66","","",N,N],[6,"N66","","",N,N],[6,"U67","","",N,N],[6,"P67","","",N,N],[6,"N67","","",N,N],[6,"U68","","",N,N],[6,"P68","","",N,N],[6,"N68","","",N,N],[6,"U69","","",N,N],[6,"P69","","",N,N],[6,"N69","","",N,N],[6,"U70","","",N,N],[6,"P70","","",N,N],[6,"N70","","",N,N],[6,"U71","","",N,N],[6,"P71","","",N,N],[6,"N71","","",N,N],[6,"U72","","",N,N],[6,"P72","","",N,N],[6,"N72","","",N,N],[6,"U73","","",N,N],[6,"P73","","",N,N],[6,"N73","","",N,N],[6,"U74","","",N,N],[6,"P74","","",N,N],[6,"N74","","",N,N],[6,"U75","","",N,N],[6,"P75","","",N,N],[6,"N75","","",N,N],[6,"U76","","",N,N],[6,"P76","","",N,N],[6,"N76","","",N,N],[6,"U77","","",N,N],[6,"P77","","",N,N],[6,"N77","","",N,N],[6,"U78","","",N,N],[6,"P78","","",N,N],[6,"N78","","",N,N],[6,"U79","","",N,N],[6,"P79","","",N,N],[6,"N79","","",N,N],[6,"U80","","",N,N],[6,"P80","","",N,N],[6,"N80","","",N,N],[6,"U81","","",N,N],[6,"P81","","",N,N],[6,"N81","","",N,N],[6,"U82","","",N,N],[6,"P82","","",N,N],[6,"N82","","",N,N],[6,"U83","","",N,N],[6,"P83","","",N,N],[6,"N83","","",N,N],[6,"U84","","",N,N],[6,"P84","","",N,N],[6,"N84","","",N,N],[6,"U85","","",N,N],[6,"P85","","",N,N],[6,"N85","","",N,N],[6,"U86","","",N,N],[6,"P86","","",N,N],[6,"N86","","",N,N],[6,"U87","","",N,N],[6,"P87","","",N,N],[6,"N87","","",N,N],[6,"U88","","",N,N],[6,"P88","","",N,N],[6,"N88","","",N,N],[6,"U89","","",N,N],[6,"P89","","",N,N],[6,"N89","","",N,N],[6,"U90","","",N,N],[6,"P90","","",N,N],[6,"N90","","",N,N],[6,"U91","","",N,N],[6,"P91","","",N,N],[6,"N91","","",N,N],[6,"U92","","",N,N],[6,"P92","","",N,N],[6,"N92","","",N,N],[6,"U93","","",N,N],[6,"P93","","",N,N],[6,"N93","","",N,N],[6,"U94","","",N,N],[6,"P94","","",N,N],[6,"N94","","",N,N],[6,"U95","","",N,N],[6,"P95","","",N,N],[6,"N95","","",N,N],[6,"U96","","",N,N],[6,"P96","","",N,N],[6,"N96","","",N,N],[6,"U97","","",N,N],[6,"P97","","",N,N],[6,"N97","","",N,N],[6,"U98","","",N,N],[6,"P98","","",N,N],[6,"N98","","",N,N],[6,"U99","","",N,N],[6,"P99","","",N,N],[6,"N99","","",N,N],[6,"U100","","",N,N],[6,"P100","","",N,N],[6,"N100","","",N,N],[6,"U101","","",N,N],[6,"P101","","",N,N],[6,"N101","","",N,N],[6,"U102","","",N,N],[6,"P102","","",N,N],[6,"N102","","",N,N],[6,"U103","","",N,N],[6,"P103","","",N,N],[6,"N103","","",N,N],[6,"U104","","",N,N],[6,"P104","","",N,N],[6,"N104","","",N,N],[6,"U105","","",N,N],[6,"P105","","",N,N],[6,"N105","","",N,N],[6,"U106","","",N,N],[6,"P106","","",N,N],[6,"N106","","",N,N],[6,"U107","","",N,N],[6,"P107","","",N,N],[6,"N107","","",N,N],[6,"U108","","",N,N],[6,"P108","","",N,N],[6,"N108","","",N,N],[6,"U109","","",N,N],[6,"P109","","",N,N],[6,"N109","","",N,N],[6,"U110","","",N,N],[6,"P110","","",N,N],[6,"N110","","",N,N],[6,"U111","","",N,N],[6,"P111","","",N,N],[6,"N111","","",N,N],[6,"U112","","",N,N],[6,"P112","","",N,N],[6,"N112","","",N,N],[6,"U113","","",N,N],[6,"P113","","",N,N],[6,"N113","","",N,N],[6,"U114","","",N,N],[6,"P114","","",N,N],[6,"N114","","",N,N],[6,"U115","","",N,N],[6,"P115","","",N,N],[6,"N115","","",N,N],[6,"U116","","",N,N],[6,"P116","","",N,N],[6,"N116","","",N,N],[6,"U117","","",N,N],[6,"P117","","",N,N],[6,"N117","","",N,N],[6,"U118","","",N,N],[6,"P118","","",N,N],[6,"N118","","",N,N],[6,"U119","","",N,N],[6,"P119","","",N,N],[6,"N119","","",N,N],[6,"U120","","",N,N],[6,"P120","","",N,N],[6,"N120","","",N,N],[6,"U121","","",N,N],[6,"P121","","",N,N],[6,"N121","","",N,N],[6,"U122","","",N,N],[6,"P122","","",N,N],[6,"N122","","",N,N],[6,"U123","","",N,N],[6,"P123","","",N,N],[6,"N123","","",N,N],[6,"U124","","",N,N],[6,"P124","","",N,N],[6,"N124","","",N,N],[6,"U125","","",N,N],[6,"P125","","",N,N],[6,"N125","","",N,N],[6,"U126","","",N,N],[6,"P126","","",N,N],[6,"N126","","",N,N],[6,"U127","","",N,N],[6,"P127","","",N,N],[6,"N127","","",N,N],[6,"U128","","",N,N],[6,"P128","","",N,N],[6,"N128","","",N,N],[6,"U129","","",N,N],[6,"P129","","",N,N],[6,"N129","","",N,N],[6,"U130","","",N,N],[6,"P130","","",N,N],[6,"N130","","",N,N],[6,"U131","","",N,N],[6,"P131","","",N,N],[6,"N131","","",N,N],[6,"U132","","",N,N],[6,"P132","","",N,N],[6,"N132","","",N,N],[6,"U133","","",N,N],[6,"P133","","",N,N],[6,"N133","","",N,N],[6,"U134","","",N,N],[6,"P134","","",N,N],[6,"N134","","",N,N],[6,"U135","","",N,N],[6,"P135","","",N,N],[6,"N135","","",N,N],[6,"U136","","",N,N],[6,"P136","","",N,N],[6,"N136","","",N,N],[6,"U137","","",N,N],[6,"P137","","",N,N],[6,"N137","","",N,N],[6,"U138","","",N,N],[6,"P138","","",N,N],[6,"N138","","",N,N],[6,"U139","","",N,N],[6,"P139","","",N,N],[6,"N139","","",N,N],[6,"U140","","",N,N],[6,"P140","","",N,N],[6,"N140","","",N,N],[6,"U141","","",N,N],[6,"P141","","",N,N],[6,"N141","","",N,N],[6,"U142","","",N,N],[6,"P142","","",N,N],[6,"N142","","",N,N],[6,"U143","","",N,N],[6,"P143","","",N,N],[6,"N143","","",N,N],[6,"U144","","",N,N],[6,"P144","","",N,N],[6,"N144","","",N,N],[6,"U145","","",N,N],[6,"P145","","",N,N],[6,"N145","","",N,N],[6,"U146","","",N,N],[6,"P146","","",N,N],[6,"N146","","",N,N],[6,"U147","","",N,N],[6,"P147","","",N,N],[6,"N147","","",N,N],[6,"U148","","",N,N],[6,"P148","","",N,N],[6,"N148","","",N,N],[6,"U149","","",N,N],[6,"P149","","",N,N],[6,"N149","","",N,N],[6,"U150","","",N,N],[6,"P150","","",N,N],[6,"N150","","",N,N],[6,"U151","","",N,N],[6,"P151","","",N,N],[6,"N151","","",N,N],[6,"U152","","",N,N],[6,"P152","","",N,N],[6,"N152","","",N,N],[6,"U153","","",N,N],[6,"P153","","",N,N],[6,"N153","","",N,N],[6,"U154","","",N,N],[6,"P154","","",N,N],[6,"N154","","",N,N],[6,"U155","","",N,N],[6,"P155","","",N,N],[6,"N155","","",N,N],[6,"U156","","",N,N],[6,"P156","","",N,N],[6,"N156","","",N,N],[6,"U157","","",N,N],[6,"P157","","",N,N],[6,"N157","","",N,N],[6,"U158","","",N,N],[6,"P158","","",N,N],[6,"N158","","",N,N],[6,"U159","","",N,N],[6,"P159","","",N,N],[6,"N159","","",N,N],[6,"U160","","",N,N],[6,"P160","","",N,N],[6,"N160","","",N,N],[6,"U161","","",N,N],[6,"P161","","",N,N],[6,"N161","","",N,N],[6,"U162","","",N,N],[6,"P162","","",N,N],[6,"N162","","",N,N],[6,"U163","","",N,N],[6,"P163","","",N,N],[6,"N163","","",N,N],[6,"U164","","",N,N],[6,"P164","","",N,N],[6,"N164","","",N,N],[6,"U165","","",N,N],[6,"P165","","",N,N],[6,"N165","","",N,N],[6,"U166","","",N,N],[6,"P166","","",N,N],[6,"N166","","",N,N],[6,"U167","","",N,N],[6,"P167","","",N,N],[6,"N167","","",N,N],[6,"U168","","",N,N],[6,"P168","","",N,N],[6,"N168","","",N,N],[6,"U169","","",N,N],[6,"P169","","",N,N],[6,"N169","","",N,N],[6,"U170","","",N,N],[6,"P170","","",N,N],[6,"N170","","",N,N],[6,"U171","","",N,N],[6,"P171","","",N,N],[6,"N171","","",N,N],[6,"U172","","",N,N],[6,"P172","","",N,N],[6,"N172","","",N,N],[6,"U173","","",N,N],[6,"P173","","",N,N],[6,"N173","","",N,N],[6,"U174","","",N,N],[6,"P174","","",N,N],[6,"N174","","",N,N],[6,"U175","","",N,N],[6,"P175","","",N,N],[6,"N175","","",N,N],[6,"U176","","",N,N],[6,"P176","","",N,N],[6,"N176","","",N,N],[6,"U177","","",N,N],[6,"P177","","",N,N],[6,"N177","","",N,N],[6,"U178","","",N,N],[6,"P178","","",N,N],[6,"N178","","",N,N],[6,"U179","","",N,N],[6,"P179","","",N,N],[6,"N179","","",N,N],[6,"U180","","",N,N],[6,"P180","","",N,N],[6,"N180","","",N,N],[6,"U181","","",N,N],[6,"P181","","",N,N],[6,"N181","","",N,N],[6,"U182","","",N,N],[6,"P182","","",N,N],[6,"N182","","",N,N],[6,"U183","","",N,N],[6,"P183","","",N,N],[6,"N183","","",N,N],[6,"U184","","",N,N],[6,"P184","","",N,N],[6,"N184","","",N,N],[6,"U185","","",N,N],[6,"P185","","",N,N],[6,"N185","","",N,N],[6,"U186","","",N,N],[6,"P186","","",N,N],[6,"N186","","",N,N],[6,"U187","","",N,N],[6,"P187","","",N,N],[6,"N187","","",N,N],[6,"U188","","",N,N],[6,"P188","","",N,N],[6,"N188","","",N,N],[6,"U189","","",N,N],[6,"P189","","",N,N],[6,"N189","","",N,N],[6,"U190","","",N,N],[6,"P190","","",N,N],[6,"N190","","",N,N],[6,"U191","","",N,N],[6,"P191","","",N,N],[6,"N191","","",N,N],[6,"U192","","",N,N],[6,"P192","","",N,N],[6,"N192","","",N,N],[6,"U193","","",N,N],[6,"P193","","",N,N],[6,"N193","","",N,N],[6,"U194","","",N,N],[6,"P194","","",N,N],[6,"N194","","",N,N],[6,"U195","","",N,N],[6,"P195","","",N,N],[6,"N195","","",N,N],[6,"U196","","",N,N],[6,"P196","","",N,N],[6,"N196","","",N,N],[6,"U197","","",N,N],[6,"P197","","",N,N],[6,"N197","","",N,N],[6,"U198","","",N,N],[6,"P198","","",N,N],[6,"N198","","",N,N],[6,"U199","","",N,N],[6,"P199","","",N,N],[6,"N199","","",N,N],[6,"U200","","",N,N],[6,"P200","","",N,N],[6,"N200","","",N,N],[6,"U201","","",N,N],[6,"P201","","",N,N],[6,"N201","","",N,N],[6,"U202","","",N,N],[6,"P202","","",N,N],[6,"N202","","",N,N],[6,"U203","","",N,N],[6,"P203","","",N,N],[6,"N203","","",N,N],[6,"U204","","",N,N],[6,"P204","","",N,N],[6,"N204","","",N,N],[6,"U205","","",N,N],[6,"P205","","",N,N],[6,"N205","","",N,N],[6,"U206","","",N,N],[6,"P206","","",N,N],[6,"N206","","",N,N],[6,"U207","","",N,N],[6,"P207","","",N,N],[6,"N207","","",N,N],[6,"U208","","",N,N],[6,"P208","","",N,N],[6,"N208","","",N,N],[6,"U209","","",N,N],[6,"P209","","",N,N],[6,"N209","","",N,N],[6,"U210","","",N,N],[6,"P210","","",N,N],[6,"N210","","",N,N],[6,"U211","","",N,N],[6,"P211","","",N,N],[6,"N211","","",N,N],[6,"U212","","",N,N],[6,"P212","","",N,N],[6,"N212","","",N,N],[6,"U213","","",N,N],[6,"P213","","",N,N],[6,"N213","","",N,N],[6,"U214","","",N,N],[6,"P214","","",N,N],[6,"N214","","",N,N],[6,"U215","","",N,N],[6,"P215","","",N,N],[6,"N215","","",N,N],[6,"U216","","",N,N],[6,"P216","","",N,N],[6,"N216","","",N,N],[6,"U217","","",N,N],[6,"P217","","",N,N],[6,"N217","","",N,N],[6,"U218","","",N,N],[6,"P218","","",N,N],[6,"N218","","",N,N],[6,"U219","","",N,N],[6,"P219","","",N,N],[6,"N219","","",N,N],[6,"U220","","",N,N],[6,"P220","","",N,N],[6,"N220","","",N,N],[6,"U221","","",N,N],[6,"P221","","",N,N],[6,"N221","","",N,N],[6,"U222","","",N,N],[6,"P222","","",N,N],[6,"N222","","",N,N],[6,"U223","","",N,N],[6,"P223","","",N,N],[6,"N223","","",N,N],[6,"U224","","",N,N],[6,"P224","","",N,N],[6,"N224","","",N,N],[6,"U225","","",N,N],[6,"P225","","",N,N],[6,"N225","","",N,N],[6,"U226","","",N,N],[6,"P226","","",N,N],[6,"N226","","",N,N],[6,"U227","","",N,N],[6,"P227","","",N,N],[6,"N227","","",N,N],[6,"U228","","",N,N],[6,"P228","","",N,N],[6,"N228","","",N,N],[6,"U229","","",N,N],[6,"P229","","",N,N],[6,"N229","","",N,N],[6,"U230","","",N,N],[6,"P230","","",N,N],[6,"N230","","",N,N],[6,"U231","","",N,N],[6,"P231","","",N,N],[6,"N231","","",N,N],[6,"U232","","",N,N],[6,"P232","","",N,N],[6,"N232","","",N,N],[6,"U233","","",N,N],[6,"P233","","",N,N],[6,"N233","","",N,N],[6,"U234","","",N,N],[6,"P234","","",N,N],[6,"N234","","",N,N],[6,"U235","","",N,N],[6,"P235","","",N,N],[6,"N235","","",N,N],[6,"U236","","",N,N],[6,"P236","","",N,N],[6,"N236","","",N,N],[6,"U237","","",N,N],[6,"P237","","",N,N],[6,"N237","","",N,N],[6,"U238","","",N,N],[6,"P238","","",N,N],[6,"N238","","",N,N],[6,"U239","","",N,N],[6,"P239","","",N,N],[6,"N239","","",N,N],[6,"U240","","",N,N],[6,"P240","","",N,N],[6,"N240","","",N,N],[6,"U241","","",N,N],[6,"P241","","",N,N],[6,"N241","","",N,N],[6,"U242","","",N,N],[6,"P242","","",N,N],[6,"N242","","",N,N],[6,"U243","","",N,N],[6,"P243","","",N,N],[6,"N243","","",N,N],[6,"U244","","",N,N],[6,"P244","","",N,N],[6,"N244","","",N,N],[6,"U245","","",N,N],[6,"P245","","",N,N],[6,"N245","","",N,N],[6,"U246","","",N,N],[6,"P246","","",N,N],[6,"N246","","",N,N],[6,"U247","","",N,N],[6,"P247","","",N,N],[6,"N247","","",N,N],[6,"U248","","",N,N],[6,"P248","","",N,N],[6,"N248","","",N,N],[6,"U249","","",N,N],[6,"P249","","",N,N],[6,"N249","","",N,N],[6,"U250","","",N,N],[6,"P250","","",N,N],[6,"N250","","",N,N],[6,"U251","","",N,N],[6,"P251","","",N,N],[6,"N251","","",N,N],[6,"U252","","",N,N],[6,"P252","","",N,N],[6,"N252","","",N,N],[6,"U253","","",N,N],[6,"P253","","",N,N],[6,"N253","","",N,N],[6,"U254","","",N,N],[6,"P254","","",N,N],[6,"N254","","",N,N],[6,"U255","","",N,N],[6,"P255","","",N,N],[6,"N255","","",N,N],[6,"U256","","",N,N],[6,"P256","","",N,N],[6,"N256","","",N,N],[6,"U257","","",N,N],[6,"P257","","",N,N],[6,"N257","","",N,N],[6,"U258","","",N,N],[6,"P258","","",N,N],[6,"N258","","",N,N],[6,"U259","","",N,N],[6,"P259","","",N,N],[6,"N259","","",N,N],[6,"U260","","",N,N],[6,"P260","","",N,N],[6,"N260","","",N,N],[6,"U261","","",N,N],[6,"P261","","",N,N],[6,"N261","","",N,N],[6,"U262","","",N,N],[6,"P262","","",N,N],[6,"N262","","",N,N],[6,"U263","","",N,N],[6,"P263","","",N,N],[6,"N263","","",N,N],[6,"U264","","",N,N],[6,"P264","","",N,N],[6,"N264","","",N,N],[6,"U265","","",N,N],[6,"P265","","",N,N],[6,"N265","","",N,N],[6,"U266","","",N,N],[6,"P266","","",N,N],[6,"N266","","",N,N],[6,"U267","","",N,N],[6,"P267","","",N,N],[6,"N267","","",N,N],[6,"U268","","",N,N],[6,"P268","","",N,N],[6,"N268","","",N,N],[6,"U269","","",N,N],[6,"P269","","",N,N],[6,"N269","","",N,N],[6,"U270","","",N,N],[6,"P270","","",N,N],[6,"N270","","",N,N],[6,"U271","","",N,N],[6,"P271","","",N,N],[6,"N271","","",N,N],[6,"U272","","",N,N],[6,"P272","","",N,N],[6,"N272","","",N,N],[6,"U273","","",N,N],[6,"P273","","",N,N],[6,"N273","","",N,N],[6,"U274","","",N,N],[6,"P274","","",N,N],[6,"N274","","",N,N],[6,"U275","","",N,N],[6,"P275","","",N,N],[6,"N275","","",N,N],[6,"U276","","",N,N],[6,"P276","","",N,N],[6,"N276","","",N,N],[6,"U277","","",N,N],[6,"P277","","",N,N],[6,"N277","","",N,N],[6,"U278","","",N,N],[6,"P278","","",N,N],[6,"N278","","",N,N],[6,"U279","","",N,N],[6,"P279","","",N,N],[6,"N279","","",N,N],[6,"U280","","",N,N],[6,"P280","","",N,N],[6,"N280","","",N,N],[6,"U281","","",N,N],[6,"P281","","",N,N],[6,"N281","","",N,N],[6,"U282","","",N,N],[6,"P282","","",N,N],[6,"N282","","",N,N],[6,"U283","","",N,N],[6,"P283","","",N,N],[6,"N283","","",N,N],[6,"U284","","",N,N],[6,"P284","","",N,N],[6,"N284","","",N,N],[6,"U285","","",N,N],[6,"P285","","",N,N],[6,"N285","","",N,N],[6,"U286","","",N,N],[6,"P286","","",N,N],[6,"N286","","",N,N],[6,"U287","","",N,N],[6,"P287","","",N,N],[6,"N287","","",N,N],[6,"U288","","",N,N],[6,"P288","","",N,N],[6,"N288","","",N,N],[6,"U289","","",N,N],[6,"P289","","",N,N],[6,"N289","","",N,N],[6,"U290","","",N,N],[6,"P290","","",N,N],[6,"N290","","",N,N],[6,"U291","","",N,N],[6,"P291","","",N,N],[6,"N291","","",N,N],[6,"U292","","",N,N],[6,"P292","","",N,N],[6,"N292","","",N,N],[6,"U293","","",N,N],[6,"P293","","",N,N],[6,"N293","","",N,N],[6,"U294","","",N,N],[6,"P294","","",N,N],[6,"N294","","",N,N],[6,"U295","","",N,N],[6,"P295","","",N,N],[6,"N295","","",N,N],[6,"U296","","",N,N],[6,"P296","","",N,N],[6,"N296","","",N,N],[6,"U297","","",N,N],[6,"P297","","",N,N],[6,"N297","","",N,N],[6,"U298","","",N,N],[6,"P298","","",N,N],[6,"N298","","",N,N],[6,"U299","","",N,N],[6,"P299","","",N,N],[6,"N299","","",N,N],[6,"U300","","",N,N],[6,"P300","","",N,N],[6,"N300","","",N,N],[6,"U301","","",N,N],[6,"P301","","",N,N],[6,"N301","","",N,N],[6,"U302","","",N,N],[6,"P302","","",N,N],[6,"N302","","",N,N],[6,"U303","","",N,N],[6,"P303","","",N,N],[6,"N303","","",N,N],[6,"U304","","",N,N],[6,"P304","","",N,N],[6,"N304","","",N,N],[6,"U305","","",N,N],[6,"P305","","",N,N],[6,"N305","","",N,N],[6,"U306","","",N,N],[6,"P306","","",N,N],[6,"N306","","",N,N],[6,"U307","","",N,N],[6,"P307","","",N,N],[6,"N307","","",N,N],[6,"U308","","",N,N],[6,"P308","","",N,N],[6,"N308","","",N,N],[6,"U309","","",N,N],[6,"P309","","",N,N],[6,"N309","","",N,N],[6,"U310","","",N,N],[6,"P310","","",N,N],[6,"N310","","",N,N],[6,"U311","","",N,N],[6,"P311","","",N,N],[6,"N311","","",N,N],[6,"U312","","",N,N],[6,"P312","","",N,N],[6,"N312","","",N,N],[6,"U313","","",N,N],[6,"P313","","",N,N],[6,"N313","","",N,N],[6,"U314","","",N,N],[6,"P314","","",N,N],[6,"N314","","",N,N],[6,"U315","","",N,N],[6,"P315","","",N,N],[6,"N315","","",N,N],[6,"U316","","",N,N],[6,"P316","","",N,N],[6,"N316","","",N,N],[6,"U317","","",N,N],[6,"P317","","",N,N],[6,"N317","","",N,N],[6,"U318","","",N,N],[6,"P318","","",N,N],[6,"N318","","",N,N],[6,"U319","","",N,N],[6,"P319","","",N,N],[6,"N319","","",N,N],[6,"U320","","",N,N],[6,"P320","","",N,N],[6,"N320","","",N,N],[6,"U321","","",N,N],[6,"P321","","",N,N],[6,"N321","","",N,N],[6,"U322","","",N,N],[6,"P322","","",N,N],[6,"N322","","",N,N],[6,"U323","","",N,N],[6,"P323","","",N,N],[6,"N323","","",N,N],[6,"U324","","",N,N],[6,"P324","","",N,N],[6,"N324","","",N,N],[6,"U325","","",N,N],[6,"P325","","",N,N],[6,"N325","","",N,N],[6,"U326","","",N,N],[6,"P326","","",N,N],[6,"N326","","",N,N],[6,"U327","","",N,N],[6,"P327","","",N,N],[6,"N327","","",N,N],[6,"U328","","",N,N],[6,"P328","","",N,N],[6,"N328","","",N,N],[6,"U329","","",N,N],[6,"P329","","",N,N],[6,"N329","","",N,N],[6,"U330","","",N,N],[6,"P330","","",N,N],[6,"N330","","",N,N],[6,"U331","","",N,N],[6,"P331","","",N,N],[6,"N331","","",N,N],[6,"U332","","",N,N],[6,"P332","","",N,N],[6,"N332","","",N,N],[6,"U333","","",N,N],[6,"P333","","",N,N],[6,"N333","","",N,N],[6,"U334","","",N,N],[6,"P334","","",N,N],[6,"N334","","",N,N],[6,"U335","","",N,N],[6,"P335","","",N,N],[6,"N335","","",N,N],[6,"U336","","",N,N],[6,"P336","","",N,N],[6,"N336","","",N,N],[6,"U337","","",N,N],[6,"P337","","",N,N],[6,"N337","","",N,N],[6,"U338","","",N,N],[6,"P338","","",N,N],[6,"N338","","",N,N],[6,"U339","","",N,N],[6,"P339","","",N,N],[6,"N339","","",N,N],[6,"U340","","",N,N],[6,"P340","","",N,N],[6,"N340","","",N,N],[6,"U341","","",N,N],[6,"P341","","",N,N],[6,"N341","","",N,N],[6,"U342","","",N,N],[6,"P342","","",N,N],[6,"N342","","",N,N],[6,"U343","","",N,N],[6,"P343","","",N,N],[6,"N343","","",N,N],[6,"U344","","",N,N],[6,"P344","","",N,N],[6,"N344","","",N,N],[6,"U345","","",N,N],[6,"P345","","",N,N],[6,"N345","","",N,N],[6,"U346","","",N,N],[6,"P346","","",N,N],[6,"N346","","",N,N],[6,"U347","","",N,N],[6,"P347","","",N,N],[6,"N347","","",N,N],[6,"U348","","",N,N],[6,"P348","","",N,N],[6,"N348","","",N,N],[6,"U349","","",N,N],[6,"P349","","",N,N],[6,"N349","","",N,N],[6,"U350","","",N,N],[6,"P350","","",N,N],[6,"N350","","",N,N],[6,"U351","","",N,N],[6,"P351","","",N,N],[6,"N351","","",N,N],[6,"U352","","",N,N],[6,"P352","","",N,N],[6,"N352","","",N,N],[6,"U353","","",N,N],[6,"P353","","",N,N],[6,"N353","","",N,N],[6,"U354","","",N,N],[6,"P354","","",N,N],[6,"N354","","",N,N],[6,"U355","","",N,N],[6,"P355","","",N,N],[6,"N355","","",N,N],[6,"U356","","",N,N],[6,"P356","","",N,N],[6,"N356","","",N,N],[6,"U357","","",N,N],[6,"P357","","",N,N],[6,"N357","","",N,N],[6,"U358","","",N,N],[6,"P358","","",N,N],[6,"N358","","",N,N],[6,"U359","","",N,N],[6,"P359","","",N,N],[6,"N359","","",N,N],[6,"U360","","",N,N],[6,"P360","","",N,N],[6,"N360","","",N,N],[6,"U361","","",N,N],[6,"P361","","",N,N],[6,"N361","","",N,N],[6,"U362","","",N,N],[6,"P362","","",N,N],[6,"N362","","",N,N],[6,"U363","","",N,N],[6,"P363","","",N,N],[6,"N363","","",N,N],[6,"U364","","",N,N],[6,"P364","","",N,N],[6,"N364","","",N,N],[6,"U365","","",N,N],[6,"P365","","",N,N],[6,"N365","","",N,N],[6,"U366","","",N,N],[6,"P366","","",N,N],[6,"N366","","",N,N],[6,"U367","","",N,N],[6,"P367","","",N,N],[6,"N367","","",N,N],[6,"U368","","",N,N],[6,"P368","","",N,N],[6,"N368","","",N,N],[6,"U369","","",N,N],[6,"P369","","",N,N],[6,"N369","","",N,N],[6,"U370","","",N,N],[6,"P370","","",N,N],[6,"N370","","",N,N],[6,"U371","","",N,N],[6,"P371","","",N,N],[6,"N371","","",N,N],[6,"U372","","",N,N],[6,"P372","","",N,N],[6,"N372","","",N,N],[6,"U373","","",N,N],[6,"P373","","",N,N],[6,"N373","","",N,N],[6,"U374","","",N,N],[6,"P374","","",N,N],[6,"N374","","",N,N],[6,"U375","","",N,N],[6,"P375","","",N,N],[6,"N375","","",N,N],[6,"U376","","",N,N],[6,"P376","","",N,N],[6,"N376","","",N,N],[6,"U377","","",N,N],[6,"P377","","",N,N],[6,"N377","","",N,N],[6,"U378","","",N,N],[6,"P378","","",N,N],[6,"N378","","",N,N],[6,"U379","","",N,N],[6,"P379","","",N,N],[6,"N379","","",N,N],[6,"U380","","",N,N],[6,"P380","","",N,N],[6,"N380","","",N,N],[6,"U381","","",N,N],[6,"P381","","",N,N],[6,"N381","","",N,N],[6,"U382","","",N,N],[6,"P382","","",N,N],[6,"N382","","",N,N],[6,"U383","","",N,N],[6,"P383","","",N,N],[6,"N383","","",N,N],[6,"U384","","",N,N],[6,"P384","","",N,N],[6,"N384","","",N,N],[6,"U385","","",N,N],[6,"P385","","",N,N],[6,"N385","","",N,N],[6,"U386","","",N,N],[6,"P386","","",N,N],[6,"N386","","",N,N],[6,"U387","","",N,N],[6,"P387","","",N,N],[6,"N387","","",N,N],[6,"U388","","",N,N],[6,"P388","","",N,N],[6,"N388","","",N,N],[6,"U389","","",N,N],[6,"P389","","",N,N],[6,"N389","","",N,N],[6,"U390","","",N,N],[6,"P390","","",N,N],[6,"N390","","",N,N],[6,"U391","","",N,N],[6,"P391","","",N,N],[6,"N391","","",N,N],[6,"U392","","",N,N],[6,"P392","","",N,N],[6,"N392","","",N,N],[6,"U393","","",N,N],[6,"P393","","",N,N],[6,"N393","","",N,N],[6,"U394","","",N,N],[6,"P394","","",N,N],[6,"N394","","",N,N],[6,"U395","","",N,N],[6,"P395","","",N,N],[6,"N395","","",N,N],[6,"U396","","",N,N],[6,"P396","","",N,N],[6,"N396","","",N,N],[6,"U397","","",N,N],[6,"P397","","",N,N],[6,"N397","","",N,N],[6,"U398","","",N,N],[6,"P398","","",N,N],[6,"N398","","",N,N],[6,"U399","","",N,N],[6,"P399","","",N,N],[6,"N399","","",N,N],[6,"U400","","",N,N],[6,"P400","","",N,N],[6,"N400","","",N,N],[6,"U401","","",N,N],[6,"P401","","",N,N],[6,"N401","","",N,N],[6,"U402","","",N,N],[6,"P402","","",N,N],[6,"N402","","",N,N],[6,"U403","","",N,N],[6,"P403","","",N,N],[6,"N403","","",N,N],[6,"U404","","",N,N],[6,"P404","","",N,N],[6,"N404","","",N,N],[6,"U405","","",N,N],[6,"P405","","",N,N],[6,"N405","","",N,N],[6,"U406","","",N,N],[6,"P406","","",N,N],[6,"N406","","",N,N],[6,"U407","","",N,N],[6,"P407","","",N,N],[6,"N407","","",N,N],[6,"U408","","",N,N],[6,"P408","","",N,N],[6,"N408","","",N,N],[6,"U409","","",N,N],[6,"P409","","",N,N],[6,"N409","","",N,N],[6,"U410","","",N,N],[6,"P410","","",N,N],[6,"N410","","",N,N],[6,"U411","","",N,N],[6,"P411","","",N,N],[6,"N411","","",N,N],[6,"U412","","",N,N],[6,"P412","","",N,N],[6,"N412","","",N,N],[6,"U413","","",N,N],[6,"P413","","",N,N],[6,"N413","","",N,N],[6,"U414","","",N,N],[6,"P414","","",N,N],[6,"N414","","",N,N],[6,"U415","","",N,N],[6,"P415","","",N,N],[6,"N415","","",N,N],[6,"U416","","",N,N],[6,"P416","","",N,N],[6,"N416","","",N,N],[6,"U417","","",N,N],[6,"P417","","",N,N],[6,"N417","","",N,N],[6,"U418","","",N,N],[6,"P418","","",N,N],[6,"N418","","",N,N],[6,"U419","","",N,N],[6,"P419","","",N,N],[6,"N419","","",N,N],[6,"U420","","",N,N],[6,"P420","","",N,N],[6,"N420","","",N,N],[6,"U421","","",N,N],[6,"P421","","",N,N],[6,"N421","","",N,N],[6,"U422","","",N,N],[6,"P422","","",N,N],[6,"N422","","",N,N],[6,"U423","","",N,N],[6,"P423","","",N,N],[6,"N423","","",N,N],[6,"U424","","",N,N],[6,"P424","","",N,N],[6,"N424","","",N,N],[6,"U425","","",N,N],[6,"P425","","",N,N],[6,"N425","","",N,N],[6,"U426","","",N,N],[6,"P426","","",N,N],[6,"N426","","",N,N],[6,"U427","","",N,N],[6,"P427","","",N,N],[6,"N427","","",N,N],[6,"U428","","",N,N],[6,"P428","","",N,N],[6,"N428","","",N,N],[6,"U429","","",N,N],[6,"P429","","",N,N],[6,"N429","","",N,N],[6,"U430","","",N,N],[6,"P430","","",N,N],[6,"N430","","",N,N],[6,"U431","","",N,N],[6,"P431","","",N,N],[6,"N431","","",N,N],[6,"U432","","",N,N],[6,"P432","","",N,N],[6,"N432","","",N,N],[6,"U433","","",N,N],[6,"P433","","",N,N],[6,"N433","","",N,N],[6,"U434","","",N,N],[6,"P434","","",N,N],[6,"N434","","",N,N],[6,"U435","","",N,N],[6,"P435","","",N,N],[6,"N435","","",N,N],[6,"U436","","",N,N],[6,"P436","","",N,N],[6,"N436","","",N,N],[6,"U437","","",N,N],[6,"P437","","",N,N],[6,"N437","","",N,N],[6,"U438","","",N,N],[6,"P438","","",N,N],[6,"N438","","",N,N],[6,"U439","","",N,N],[6,"P439","","",N,N],[6,"N439","","",N,N],[6,"U440","","",N,N],[6,"P440","","",N,N],[6,"N440","","",N,N],[6,"U441","","",N,N],[6,"P441","","",N,N],[6,"N441","","",N,N],[6,"U442","","",N,N],[6,"P442","","",N,N],[6,"N442","","",N,N],[6,"U443","","",N,N],[6,"P443","","",N,N],[6,"N443","","",N,N],[6,"U444","","",N,N],[6,"P444","","",N,N],[6,"N444","","",N,N],[6,"U445","","",N,N],[6,"P445","","",N,N],[6,"N445","","",N,N],[6,"U446","","",N,N],[6,"P446","","",N,N],[6,"N446","","",N,N],[6,"U447","","",N,N],[6,"P447","","",N,N],[6,"N447","","",N,N],[6,"U448","","",N,N],[6,"P448","","",N,N],[6,"N448","","",N,N],[6,"U449","","",N,N],[6,"P449","","",N,N],[6,"N449","","",N,N],[6,"U450","","",N,N],[6,"P450","","",N,N],[6,"N450","","",N,N],[6,"U451","","",N,N],[6,"P451","","",N,N],[6,"N451","","",N,N],[6,"U452","","",N,N],[6,"P452","","",N,N],[6,"N452","","",N,N],[6,"U453","","",N,N],[6,"P453","","",N,N],[6,"N453","","",N,N],[6,"U454","","",N,N],[6,"P454","","",N,N],[6,"N454","","",N,N],[6,"U455","","",N,N],[6,"P455","","",N,N],[6,"N455","","",N,N],[6,"U456","","",N,N],[6,"P456","","",N,N],[6,"N456","","",N,N],[6,"U457","","",N,N],[6,"P457","","",N,N],[6,"N457","","",N,N],[6,"U458","","",N,N],[6,"P458","","",N,N],[6,"N458","","",N,N],[6,"U459","","",N,N],[6,"P459","","",N,N],[6,"N459","","",N,N],[6,"U460","","",N,N],[6,"P460","","",N,N],[6,"N460","","",N,N],[6,"U461","","",N,N],[6,"P461","","",N,N],[6,"N461","","",N,N],[6,"U462","","",N,N],[6,"P462","","",N,N],[6,"N462","","",N,N],[6,"U463","","",N,N],[6,"P463","","",N,N],[6,"N463","","",N,N],[6,"U464","","",N,N],[6,"P464","","",N,N],[6,"N464","","",N,N],[6,"U465","","",N,N],[6,"P465","","",N,N],[6,"N465","","",N,N],[6,"U466","","",N,N],[6,"P466","","",N,N],[6,"N466","","",N,N],[6,"U467","","",N,N],[6,"P467","","",N,N],[6,"N467","","",N,N],[6,"U468","","",N,N],[6,"P468","","",N,N],[6,"N468","","",N,N],[6,"U469","","",N,N],[6,"P469","","",N,N],[6,"N469","","",N,N],[6,"U470","","",N,N],[6,"P470","","",N,N],[6,"N470","","",N,N],[6,"U471","","",N,N],[6,"P471","","",N,N],[6,"N471","","",N,N],[6,"U472","","",N,N],[6,"P472","","",N,N],[6,"N472","","",N,N],[6,"U473","","",N,N],[6,"P473","","",N,N],[6,"N473","","",N,N],[6,"U474","","",N,N],[6,"P474","","",N,N],[6,"N474","","",N,N],[6,"U475","","",N,N],[6,"P475","","",N,N],[6,"N475","","",N,N],[6,"U476","","",N,N],[6,"P476","","",N,N],[6,"N476","","",N,N],[6,"U477","","",N,N],[6,"P477","","",N,N],[6,"N477","","",N,N],[6,"U478","","",N,N],[6,"P478","","",N,N],[6,"N478","","",N,N],[6,"U479","","",N,N],[6,"P479","","",N,N],[6,"N479","","",N,N],[6,"U480","","",N,N],[6,"P480","","",N,N],[6,"N480","","",N,N],[6,"U481","","",N,N],[6,"P481","","",N,N],[6,"N481","","",N,N],[6,"U482","","",N,N],[6,"P482","","",N,N],[6,"N482","","",N,N],[6,"U483","","",N,N],[6,"P483","","",N,N],[6,"N483","","",N,N],[6,"U484","","",N,N],[6,"P484","","",N,N],[6,"N484","","",N,N],[6,"U485","","",N,N],[6,"P485","","",N,N],[6,"N485","","",N,N],[6,"U486","","",N,N],[6,"P486","","",N,N],[6,"N486","","",N,N],[6,"U487","","",N,N],[6,"P487","","",N,N],[6,"N487","","",N,N],[6,"U488","","",N,N],[6,"P488","","",N,N],[6,"N488","","",N,N],[6,"U489","","",N,N],[6,"P489","","",N,N],[6,"N489","","",N,N],[6,"U490","","",N,N],[6,"P490","","",N,N],[6,"N490","","",N,N],[6,"U491","","",N,N],[6,"P491","","",N,N],[6,"N491","","",N,N],[6,"U492","","",N,N],[6,"P492","","",N,N],[6,"N492","","",N,N],[6,"U493","","",N,N],[6,"P493","","",N,N],[6,"N493","","",N,N],[6,"U494","","",N,N],[6,"P494","","",N,N],[6,"N494","","",N,N],[6,"U495","","",N,N],[6,"P495","","",N,N],[6,"N495","","",N,N],[6,"U496","","",N,N],[6,"P496","","",N,N],[6,"N496","","",N,N],[6,"U497","","",N,N],[6,"P497","","",N,N],[6,"N497","","",N,N],[6,"U498","","",N,N],[6,"P498","","",N,N],[6,"N498","","",N,N],[6,"U499","","",N,N],[6,"P499","","",N,N],[6,"N499","","",N,N],[6,"U500","","",N,N],[6,"P500","","",N,N],[6,"N500","","",N,N],[6,"U501","","",N,N],[6,"P501","","",N,N],[6,"N501","","",N,N],[6,"U502","","",N,N],[6,"P502","","",N,N],[6,"N502","","",N,N],[6,"U503","","",N,N],[6,"P503","","",N,N],[6,"N503","","",N,N],[6,"U504","","",N,N],[6,"P504","","",N,N],[6,"N504","","",N,N],[6,"U505","","",N,N],[6,"P505","","",N,N],[6,"N505","","",N,N],[6,"U506","","",N,N],[6,"P506","","",N,N],[6,"N506","","",N,N],[6,"U507","","",N,N],[6,"P507","","",N,N],[6,"N507","","",N,N],[6,"U508","","",N,N],[6,"P508","","",N,N],[6,"N508","","",N,N],[6,"U509","","",N,N],[6,"P509","","",N,N],[6,"N509","","",N,N],[6,"U510","","",N,N],[6,"P510","","",N,N],[6,"N510","","",N,N],[6,"U511","","",N,N],[6,"P511","","",N,N],[6,"N511","","",N,N],[6,"U512","","",N,N],[6,"P512","","",N,N],[6,"N512","","",N,N],[6,"U513","","",N,N],[6,"P513","","",N,N],[6,"N513","","",N,N],[6,"U514","","",N,N],[6,"P514","","",N,N],[6,"N514","","",N,N],[6,"U515","","",N,N],[6,"P515","","",N,N],[6,"N515","","",N,N],[6,"U516","","",N,N],[6,"P516","","",N,N],[6,"N516","","",N,N],[6,"U517","","",N,N],[6,"P517","","",N,N],[6,"N517","","",N,N],[6,"U518","","",N,N],[6,"P518","","",N,N],[6,"N518","","",N,N],[6,"U519","","",N,N],[6,"P519","","",N,N],[6,"N519","","",N,N],[6,"U520","","",N,N],[6,"P520","","",N,N],[6,"N520","","",N,N],[6,"U521","","",N,N],[6,"P521","","",N,N],[6,"N521","","",N,N],[6,"U522","","",N,N],[6,"P522","","",N,N],[6,"N522","","",N,N],[6,"U523","","",N,N],[6,"P523","","",N,N],[6,"N523","","",N,N],[6,"U524","","",N,N],[6,"P524","","",N,N],[6,"N524","","",N,N],[6,"U525","","",N,N],[6,"P525","","",N,N],[6,"N525","","",N,N],[6,"U526","","",N,N],[6,"P526","","",N,N],[6,"N526","","",N,N],[6,"U527","","",N,N],[6,"P527","","",N,N],[6,"N527","","",N,N],[6,"U528","","",N,N],[6,"P528","","",N,N],[6,"N528","","",N,N],[6,"U529","","",N,N],[6,"P529","","",N,N],[6,"N529","","",N,N],[6,"U530","","",N,N],[6,"P530","","",N,N],[6,"N530","","",N,N],[6,"U531","","",N,N],[6,"P531","","",N,N],[6,"N531","","",N,N],[6,"U532","","",N,N],[6,"P532","","",N,N],[6,"N532","","",N,N],[6,"U533","","",N,N],[6,"P533","","",N,N],[6,"N533","","",N,N],[6,"U534","","",N,N],[6,"P534","","",N,N],[6,"N534","","",N,N],[6,"U535","","",N,N],[6,"P535","","",N,N],[6,"N535","","",N,N],[6,"U536","","",N,N],[6,"P536","","",N,N],[6,"N536","","",N,N],[6,"U537","","",N,N],[6,"P537","","",N,N],[6,"N537","","",N,N],[6,"U538","","",N,N],[6,"P538","","",N,N],[6,"N538","","",N,N],[6,"U539","","",N,N],[6,"P539","","",N,N],[6,"N539","","",N,N],[6,"U540","","",N,N],[6,"P540","","",N,N],[6,"N540","","",N,N],[6,"U541","","",N,N],[6,"P541","","",N,N],[6,"N541","","",N,N],[6,"U542","","",N,N],[6,"P542","","",N,N],[6,"N542","","",N,N],[6,"U543","","",N,N],[6,"P543","","",N,N],[6,"N543","","",N,N],[6,"U544","","",N,N],[6,"P544","","",N,N],[6,"N544","","",N,N],[6,"U545","","",N,N],[6,"P545","","",N,N],[6,"N545","","",N,N],[6,"U546","","",N,N],[6,"P546","","",N,N],[6,"N546","","",N,N],[6,"U547","","",N,N],[6,"P547","","",N,N],[6,"N547","","",N,N],[6,"U548","","",N,N],[6,"P548","","",N,N],[6,"N548","","",N,N],[6,"U549","","",N,N],[6,"P549","","",N,N],[6,"N549","","",N,N],[6,"U550","","",N,N],[6,"P550","","",N,N],[6,"N550","","",N,N],[6,"U551","","",N,N],[6,"P551","","",N,N],[6,"N551","","",N,N],[6,"U552","","",N,N],[6,"P552","","",N,N],[6,"N552","","",N,N],[6,"U553","","",N,N],[6,"P553","","",N,N],[6,"N553","","",N,N],[6,"U554","","",N,N],[6,"P554","","",N,N],[6,"N554","","",N,N],[6,"U555","","",N,N],[6,"P555","","",N,N],[6,"N555","","",N,N],[6,"U556","","",N,N],[6,"P556","","",N,N],[6,"N556","","",N,N],[6,"U557","","",N,N],[6,"P557","","",N,N],[6,"N557","","",N,N],[6,"U558","","",N,N],[6,"P558","","",N,N],[6,"N558","","",N,N],[6,"U559","","",N,N],[6,"P559","","",N,N],[6,"N559","","",N,N],[6,"U560","","",N,N],[6,"P560","","",N,N],[6,"N560","","",N,N],[6,"U561","","",N,N],[6,"P561","","",N,N],[6,"N561","","",N,N],[6,"U562","","",N,N],[6,"P562","","",N,N],[6,"N562","","",N,N],[6,"U563","","",N,N],[6,"P563","","",N,N],[6,"N563","","",N,N],[6,"U564","","",N,N],[6,"P564","","",N,N],[6,"N564","","",N,N],[6,"U565","","",N,N],[6,"P565","","",N,N],[6,"N565","","",N,N],[6,"U566","","",N,N],[6,"P566","","",N,N],[6,"N566","","",N,N],[6,"U567","","",N,N],[6,"P567","","",N,N],[6,"N567","","",N,N],[6,"U568","","",N,N],[6,"P568","","",N,N],[6,"N568","","",N,N],[6,"U569","","",N,N],[6,"P569","","",N,N],[6,"N569","","",N,N],[6,"U570","","",N,N],[6,"P570","","",N,N],[6,"N570","","",N,N],[6,"U571","","",N,N],[6,"P571","","",N,N],[6,"N571","","",N,N],[6,"U572","","",N,N],[6,"P572","","",N,N],[6,"N572","","",N,N],[6,"U573","","",N,N],[6,"P573","","",N,N],[6,"N573","","",N,N],[6,"U574","","",N,N],[6,"P574","","",N,N],[6,"N574","","",N,N],[6,"U575","","",N,N],[6,"P575","","",N,N],[6,"N575","","",N,N],[6,"U576","","",N,N],[6,"P576","","",N,N],[6,"N576","","",N,N],[6,"U577","","",N,N],[6,"P577","","",N,N],[6,"N577","","",N,N],[6,"U578","","",N,N],[6,"P578","","",N,N],[6,"N578","","",N,N],[6,"U579","","",N,N],[6,"P579","","",N,N],[6,"N579","","",N,N],[6,"U580","","",N,N],[6,"P580","","",N,N],[6,"N580","","",N,N],[6,"U581","","",N,N],[6,"P581","","",N,N],[6,"N581","","",N,N],[6,"U582","","",N,N],[6,"P582","","",N,N],[6,"N582","","",N,N],[6,"U583","","",N,N],[6,"P583","","",N,N],[6,"N583","","",N,N],[6,"U584","","",N,N],[6,"P584","","",N,N],[6,"N584","","",N,N],[6,"U585","","",N,N],[6,"P585","","",N,N],[6,"N585","","",N,N],[6,"U586","","",N,N],[6,"P586","","",N,N],[6,"N586","","",N,N],[6,"U587","","",N,N],[6,"P587","","",N,N],[6,"N587","","",N,N],[6,"U588","","",N,N],[6,"P588","","",N,N],[6,"N588","","",N,N],[6,"U589","","",N,N],[6,"P589","","",N,N],[6,"N589","","",N,N],[6,"U590","","",N,N],[6,"P590","","",N,N],[6,"N590","","",N,N],[6,"U591","","",N,N],[6,"P591","","",N,N],[6,"N591","","",N,N],[6,"U592","","",N,N],[6,"P592","","",N,N],[6,"N592","","",N,N],[6,"U593","","",N,N],[6,"P593","","",N,N],[6,"N593","","",N,N],[6,"U594","","",N,N],[6,"P594","","",N,N],[6,"N594","","",N,N],[6,"U595","","",N,N],[6,"P595","","",N,N],[6,"N595","","",N,N],[6,"U596","","",N,N],[6,"P596","","",N,N],[6,"N596","","",N,N],[6,"U597","","",N,N],[6,"P597","","",N,N],[6,"N597","","",N,N],[6,"U598","","",N,N],[6,"P598","","",N,N],[6,"N598","","",N,N],[6,"U599","","",N,N],[6,"P599","","",N,N],[6,"N599","","",N,N],[6,"U600","","",N,N],[6,"P600","","",N,N],[6,"N600","","",N,N],[6,"U601","","",N,N],[6,"P601","","",N,N],[6,"N601","","",N,N],[6,"U602","","",N,N],[6,"P602","","",N,N],[6,"N602","","",N,N],[6,"U603","","",N,N],[6,"P603","","",N,N],[6,"N603","","",N,N],[6,"U604","","",N,N],[6,"P604","","",N,N],[6,"N604","","",N,N],[6,"U605","","",N,N],[6,"P605","","",N,N],[6,"N605","","",N,N],[6,"U606","","",N,N],[6,"P606","","",N,N],[6,"N606","","",N,N],[6,"U607","","",N,N],[6,"P607","","",N,N],[6,"N607","","",N,N],[6,"U608","","",N,N],[6,"P608","","",N,N],[6,"N608","","",N,N],[6,"U609","","",N,N],[6,"P609","","",N,N],[6,"N609","","",N,N],[6,"U610","","",N,N],[6,"P610","","",N,N],[6,"N610","","",N,N],[6,"U611","","",N,N],[6,"P611","","",N,N],[6,"N611","","",N,N],[6,"U612","","",N,N],[6,"P612","","",N,N],[6,"N612","","",N,N],[6,"U613","","",N,N],[6,"P613","","",N,N],[6,"N613","","",N,N],[6,"U614","","",N,N],[6,"P614","","",N,N],[6,"N614","","",N,N],[6,"U615","","",N,N],[6,"P615","","",N,N],[6,"N615","","",N,N],[6,"U616","","",N,N],[6,"P616","","",N,N],[6,"N616","","",N,N],[6,"U617","","",N,N],[6,"P617","","",N,N],[6,"N617","","",N,N],[6,"U618","","",N,N],[6,"P618","","",N,N],[6,"N618","","",N,N],[6,"U619","","",N,N],[6,"P619","","",N,N],[6,"N619","","",N,N],[6,"U620","","",N,N],[6,"P620","","",N,N],[6,"N620","","",N,N],[6,"U621","","",N,N],[6,"P621","","",N,N],[6,"N621","","",N,N],[6,"U622","","",N,N],[6,"P622","","",N,N],[6,"N622","","",N,N],[6,"U623","","",N,N],[6,"P623","","",N,N],[6,"N623","","",N,N],[6,"U624","","",N,N],[6,"P624","","",N,N],[6,"N624","","",N,N],[6,"U625","","",N,N],[6,"P625","","",N,N],[6,"N625","","",N,N],[6,"U626","","",N,N],[6,"P626","","",N,N],[6,"N626","","",N,N],[6,"U627","","",N,N],[6,"P627","","",N,N],[6,"N627","","",N,N],[6,"U628","","",N,N],[6,"P628","","",N,N],[6,"N628","","",N,N],[6,"U629","","",N,N],[6,"P629","","",N,N],[6,"N629","","",N,N],[6,"U630","","",N,N],[6,"P630","","",N,N],[6,"N630","","",N,N],[6,"U631","","",N,N],[6,"P631","","",N,N],[6,"N631","","",N,N],[6,"U632","","",N,N],[6,"P632","","",N,N],[6,"N632","","",N,N],[6,"U633","","",N,N],[6,"P633","","",N,N],[6,"N633","","",N,N],[6,"U634","","",N,N],[6,"P634","","",N,N],[6,"N634","","",N,N],[6,"U635","","",N,N],[6,"P635","","",N,N],[6,"N635","","",N,N],[6,"U636","","",N,N],[6,"P636","","",N,N],[6,"N636","","",N,N],[6,"U637","","",N,N],[6,"P637","","",N,N],[6,"N637","","",N,N],[6,"U638","","",N,N],[6,"P638","","",N,N],[6,"N638","","",N,N],[6,"U639","","",N,N],[6,"P639","","",N,N],[6,"N639","","",N,N],[6,"U640","","",N,N],[6,"P640","","",N,N],[6,"N640","","",N,N],[6,"U641","","",N,N],[6,"P641","","",N,N],[6,"N641","","",N,N],[6,"U642","","",N,N],[6,"P642","","",N,N],[6,"N642","","",N,N],[6,"U643","","",N,N],[6,"P643","","",N,N],[6,"N643","","",N,N],[6,"U644","","",N,N],[6,"P644","","",N,N],[6,"N644","","",N,N],[6,"U645","","",N,N],[6,"P645","","",N,N],[6,"N645","","",N,N],[6,"U646","","",N,N],[6,"P646","","",N,N],[6,"N646","","",N,N],[6,"U647","","",N,N],[6,"P647","","",N,N],[6,"N647","","",N,N],[6,"U648","","",N,N],[6,"P648","","",N,N],[6,"N648","","",N,N],[6,"U649","","",N,N],[6,"P649","","",N,N],[6,"N649","","",N,N],[6,"U650","","",N,N],[6,"P650","","",N,N],[6,"N650","","",N,N],[6,"U651","","",N,N],[6,"P651","","",N,N],[6,"N651","","",N,N],[6,"U652","","",N,N],[6,"P652","","",N,N],[6,"N652","","",N,N],[6,"U653","","",N,N],[6,"P653","","",N,N],[6,"N653","","",N,N],[6,"U654","","",N,N],[6,"P654","","",N,N],[6,"N654","","",N,N],[6,"U655","","",N,N],[6,"P655","","",N,N],[6,"N655","","",N,N],[6,"U656","","",N,N],[6,"P656","","",N,N],[6,"N656","","",N,N],[6,"U657","","",N,N],[6,"P657","","",N,N],[6,"N657","","",N,N],[6,"U658","","",N,N],[6,"P658","","",N,N],[6,"N658","","",N,N],[6,"U659","","",N,N],[6,"P659","","",N,N],[6,"N659","","",N,N],[6,"U660","","",N,N],[6,"P660","","",N,N],[6,"N660","","",N,N],[6,"U661","","",N,N],[6,"P661","","",N,N],[6,"N661","","",N,N],[6,"U662","","",N,N],[6,"P662","","",N,N],[6,"N662","","",N,N],[6,"U663","","",N,N],[6,"P663","","",N,N],[6,"N663","","",N,N],[6,"U664","","",N,N],[6,"P664","","",N,N],[6,"N664","","",N,N],[6,"U665","","",N,N],[6,"P665","","",N,N],[6,"N665","","",N,N],[6,"U666","","",N,N],[6,"P666","","",N,N],[6,"N666","","",N,N],[6,"U667","","",N,N],[6,"P667","","",N,N],[6,"N667","","",N,N],[6,"U668","","",N,N],[6,"P668","","",N,N],[6,"N668","","",N,N],[6,"U669","","",N,N],[6,"P669","","",N,N],[6,"N669","","",N,N],[6,"U670","","",N,N],[6,"P670","","",N,N],[6,"N670","","",N,N],[6,"U671","","",N,N],[6,"P671","","",N,N],[6,"N671","","",N,N],[6,"U672","","",N,N],[6,"P672","","",N,N],[6,"N672","","",N,N],[6,"U673","","",N,N],[6,"P673","","",N,N],[6,"N673","","",N,N],[6,"U674","","",N,N],[6,"P674","","",N,N],[6,"N674","","",N,N],[6,"U675","","",N,N],[6,"P675","","",N,N],[6,"N675","","",N,N],[6,"U676","","",N,N],[6,"P676","","",N,N],[6,"N676","","",N,N],[6,"U677","","",N,N],[6,"P677","","",N,N],[6,"N677","","",N,N],[6,"U678","","",N,N],[6,"P678","","",N,N],[6,"N678","","",N,N],[6,"U679","","",N,N],[6,"P679","","",N,N],[6,"N679","","",N,N],[6,"U680","","",N,N],[6,"P680","","",N,N],[6,"N680","","",N,N],[6,"U681","","",N,N],[6,"P681","","",N,N],[6,"N681","","",N,N],[6,"U682","","",N,N],[6,"P682","","",N,N],[6,"N682","","",N,N],[6,"U683","","",N,N],[6,"P683","","",N,N],[6,"N683","","",N,N],[6,"U684","","",N,N],[6,"P684","","",N,N],[6,"N684","","",N,N],[6,"U685","","",N,N],[6,"P685","","",N,N],[6,"N685","","",N,N],[6,"U686","","",N,N],[6,"P686","","",N,N],[6,"N686","","",N,N],[6,"U687","","",N,N],[6,"P687","","",N,N],[6,"N687","","",N,N],[6,"U688","","",N,N],[6,"P688","","",N,N],[6,"N688","","",N,N],[6,"U689","","",N,N],[6,"P689","","",N,N],[6,"N689","","",N,N],[6,"U690","","",N,N],[6,"P690","","",N,N],[6,"N690","","",N,N],[6,"U691","","",N,N],[6,"P691","","",N,N],[6,"N691","","",N,N],[6,"U692","","",N,N],[6,"P692","","",N,N],[6,"N692","","",N,N],[6,"U693","","",N,N],[6,"P693","","",N,N],[6,"N693","","",N,N],[6,"U694","","",N,N],[6,"P694","","",N,N],[6,"N694","","",N,N],[6,"U695","","",N,N],[6,"P695","","",N,N],[6,"N695","","",N,N],[6,"U696","","",N,N],[6,"P696","","",N,N],[6,"N696","","",N,N],[6,"U697","","",N,N],[6,"P697","","",N,N],[6,"N697","","",N,N],[6,"U698","","",N,N],[6,"P698","","",N,N],[6,"N698","","",N,N],[6,"U699","","",N,N],[6,"P699","","",N,N],[6,"N699","","",N,N],[6,"U700","","",N,N],[6,"P700","","",N,N],[6,"N700","","",N,N],[6,"U701","","",N,N],[6,"P701","","",N,N],[6,"N701","","",N,N],[6,"U702","","",N,N],[6,"P702","","",N,N],[6,"N702","","",N,N],[6,"U703","","",N,N],[6,"P703","","",N,N],[6,"N703","","",N,N],[6,"U704","","",N,N],[6,"P704","","",N,N],[6,"N704","","",N,N],[6,"U705","","",N,N],[6,"P705","","",N,N],[6,"N705","","",N,N],[6,"U706","","",N,N],[6,"P706","","",N,N],[6,"N706","","",N,N],[6,"U707","","",N,N],[6,"P707","","",N,N],[6,"N707","","",N,N],[6,"U708","","",N,N],[6,"P708","","",N,N],[6,"N708","","",N,N],[6,"U709","","",N,N],[6,"P709","","",N,N],[6,"N709","","",N,N],[6,"U710","","",N,N],[6,"P710","","",N,N],[6,"N710","","",N,N],[6,"U711","","",N,N],[6,"P711","","",N,N],[6,"N711","","",N,N],[6,"U712","","",N,N],[6,"P712","","",N,N],[6,"N712","","",N,N],[6,"U713","","",N,N],[6,"P713","","",N,N],[6,"N713","","",N,N],[6,"U714","","",N,N],[6,"P714","","",N,N],[6,"N714","","",N,N],[6,"U715","","",N,N],[6,"P715","","",N,N],[6,"N715","","",N,N],[6,"U716","","",N,N],[6,"P716","","",N,N],[6,"N716","","",N,N],[6,"U717","","",N,N],[6,"P717","","",N,N],[6,"N717","","",N,N],[6,"U718","","",N,N],[6,"P718","","",N,N],[6,"N718","","",N,N],[6,"U719","","",N,N],[6,"P719","","",N,N],[6,"N719","","",N,N],[6,"U720","","",N,N],[6,"P720","","",N,N],[6,"N720","","",N,N],[6,"U721","","",N,N],[6,"P721","","",N,N],[6,"N721","","",N,N],[6,"U722","","",N,N],[6,"P722","","",N,N],[6,"N722","","",N,N],[6,"U723","","",N,N],[6,"P723","","",N,N],[6,"N723","","",N,N],[6,"U724","","",N,N],[6,"P724","","",N,N],[6,"N724","","",N,N],[6,"U725","","",N,N],[6,"P725","","",N,N],[6,"N725","","",N,N],[6,"U726","","",N,N],[6,"P726","","",N,N],[6,"N726","","",N,N],[6,"U727","","",N,N],[6,"P727","","",N,N],[6,"N727","","",N,N],[6,"U728","","",N,N],[6,"P728","","",N,N],[6,"N728","","",N,N],[6,"U729","","",N,N],[6,"P729","","",N,N],[6,"N729","","",N,N],[6,"U730","","",N,N],[6,"P730","","",N,N],[6,"N730","","",N,N],[6,"U731","","",N,N],[6,"P731","","",N,N],[6,"N731","","",N,N],[6,"U732","","",N,N],[6,"P732","","",N,N],[6,"N732","","",N,N],[6,"U733","","",N,N],[6,"P733","","",N,N],[6,"N733","","",N,N],[6,"U734","","",N,N],[6,"P734","","",N,N],[6,"N734","","",N,N],[6,"U735","","",N,N],[6,"P735","","",N,N],[6,"N735","","",N,N],[6,"U736","","",N,N],[6,"P736","","",N,N],[6,"N736","","",N,N],[6,"U737","","",N,N],[6,"P737","","",N,N],[6,"N737","","",N,N],[6,"U738","","",N,N],[6,"P738","","",N,N],[6,"N738","","",N,N],[6,"U739","","",N,N],[6,"P739","","",N,N],[6,"N739","","",N,N],[6,"U740","","",N,N],[6,"P740","","",N,N],[6,"N740","","",N,N],[6,"U741","","",N,N],[6,"P741","","",N,N],[6,"N741","","",N,N],[6,"U742","","",N,N],[6,"P742","","",N,N],[6,"N742","","",N,N],[6,"U743","","",N,N],[6,"P743","","",N,N],[6,"N743","","",N,N],[6,"U744","","",N,N],[6,"P744","","",N,N],[6,"N744","","",N,N],[6,"U745","","",N,N],[6,"P745","","",N,N],[6,"N745","","",N,N],[6,"U746","","",N,N],[6,"P746","","",N,N],[6,"N746","","",N,N],[6,"U747","","",N,N],[6,"P747","","",N,N],[6,"N747","","",N,N],[6,"U748","","",N,N],[6,"P748","","",N,N],[6,"N748","","",N,N],[6,"U749","","",N,N],[6,"P749","","",N,N],[6,"N749","","",N,N],[6,"U750","","",N,N],[6,"P750","","",N,N],[6,"N750","","",N,N],[6,"U751","","",N,N],[6,"P751","","",N,N],[6,"N751","","",N,N],[6,"U752","","",N,N],[6,"P752","","",N,N],[6,"N752","","",N,N],[6,"U753","","",N,N],[6,"P753","","",N,N],[6,"N753","","",N,N],[6,"U754","","",N,N],[6,"P754","","",N,N],[6,"N754","","",N,N],[6,"U755","","",N,N],[6,"P755","","",N,N],[6,"N755","","",N,N],[6,"U756","","",N,N],[6,"P756","","",N,N],[6,"N756","","",N,N],[6,"U757","","",N,N],[6,"P757","","",N,N],[6,"N757","","",N,N],[6,"U758","","",N,N],[6,"P758","","",N,N],[6,"N758","","",N,N],[6,"U759","","",N,N],[6,"P759","","",N,N],[6,"N759","","",N,N],[6,"U760","","",N,N],[6,"P760","","",N,N],[6,"N760","","",N,N],[6,"U761","","",N,N],[6,"P761","","",N,N],[6,"N761","","",N,N],[6,"U762","","",N,N],[6,"P762","","",N,N],[6,"N762","","",N,N],[6,"U763","","",N,N],[6,"P763","","",N,N],[6,"N763","","",N,N],[6,"U764","","",N,N],[6,"P764","","",N,N],[6,"N764","","",N,N],[6,"U765","","",N,N],[6,"P765","","",N,N],[6,"N765","","",N,N],[6,"U766","","",N,N],[6,"P766","","",N,N],[6,"N766","","",N,N],[6,"U767","","",N,N],[6,"P767","","",N,N],[6,"N767","","",N,N],[6,"U768","","",N,N],[6,"P768","","",N,N],[6,"N768","","",N,N],[6,"U769","","",N,N],[6,"P769","","",N,N],[6,"N769","","",N,N],[6,"U770","","",N,N],[6,"P770","","",N,N],[6,"N770","","",N,N],[6,"U771","","",N,N],[6,"P771","","",N,N],[6,"N771","","",N,N],[6,"U772","","",N,N],[6,"P772","","",N,N],[6,"N772","","",N,N],[6,"U773","","",N,N],[6,"P773","","",N,N],[6,"N773","","",N,N],[6,"U774","","",N,N],[6,"P774","","",N,N],[6,"N774","","",N,N],[6,"U775","","",N,N],[6,"P775","","",N,N],[6,"N775","","",N,N],[6,"U776","","",N,N],[6,"P776","","",N,N],[6,"N776","","",N,N],[6,"U777","","",N,N],[6,"P777","","",N,N],[6,"N777","","",N,N],[6,"U778","","",N,N],[6,"P778","","",N,N],[6,"N778","","",N,N],[6,"U779","","",N,N],[6,"P779","","",N,N],[6,"N779","","",N,N],[6,"U780","","",N,N],[6,"P780","","",N,N],[6,"N780","","",N,N],[6,"U781","","",N,N],[6,"P781","","",N,N],[6,"N781","","",N,N],[6,"U782","","",N,N],[6,"P782","","",N,N],[6,"N782","","",N,N],[6,"U783","","",N,N],[6,"P783","","",N,N],[6,"N783","","",N,N],[6,"U784","","",N,N],[6,"P784","","",N,N],[6,"N784","","",N,N],[6,"U785","","",N,N],[6,"P785","","",N,N],[6,"N785","","",N,N],[6,"U786","","",N,N],[6,"P786","","",N,N],[6,"N786","","",N,N],[6,"U787","","",N,N],[6,"P787","","",N,N],[6,"N787","","",N,N],[6,"U788","","",N,N],[6,"P788","","",N,N],[6,"N788","","",N,N],[6,"U789","","",N,N],[6,"P789","","",N,N],[6,"N789","","",N,N],[6,"U790","","",N,N],[6,"P790","","",N,N],[6,"N790","","",N,N],[6,"U791","","",N,N],[6,"P791","","",N,N],[6,"N791","","",N,N],[6,"U792","","",N,N],[6,"P792","","",N,N],[6,"N792","","",N,N],[6,"U793","","",N,N],[6,"P793","","",N,N],[6,"N793","","",N,N],[6,"U794","","",N,N],[6,"P794","","",N,N],[6,"N794","","",N,N],[6,"U795","","",N,N],[6,"P795","","",N,N],[6,"N795","","",N,N],[6,"U796","","",N,N],[6,"P796","","",N,N],[6,"N796","","",N,N],[6,"U797","","",N,N],[6,"P797","","",N,N],[6,"N797","","",N,N],[6,"U798","","",N,N],[6,"P798","","",N,N],[6,"N798","","",N,N],[6,"U799","","",N,N],[6,"P799","","",N,N],[6,"N799","","",N,N],[6,"U800","","",N,N],[6,"P800","","",N,N],[6,"N800","","",N,N],[6,"U801","","",N,N],[6,"P801","","",N,N],[6,"N801","","",N,N],[6,"U802","","",N,N],[6,"P802","","",N,N],[6,"N802","","",N,N],[6,"U803","","",N,N],[6,"P803","","",N,N],[6,"N803","","",N,N],[6,"U804","","",N,N],[6,"P804","","",N,N],[6,"N804","","",N,N],[6,"U805","","",N,N],[6,"P805","","",N,N],[6,"N805","","",N,N],[6,"U806","","",N,N],[6,"P806","","",N,N],[6,"N806","","",N,N],[6,"U807","","",N,N],[6,"P807","","",N,N],[6,"N807","","",N,N],[6,"U808","","",N,N],[6,"P808","","",N,N],[6,"N808","","",N,N],[6,"U809","","",N,N],[6,"P809","","",N,N],[6,"N809","","",N,N],[6,"U810","","",N,N],[6,"P810","","",N,N],[6,"N810","","",N,N],[6,"U811","","",N,N],[6,"P811","","",N,N],[6,"N811","","",N,N],[6,"U812","","",N,N],[6,"P812","","",N,N],[6,"N812","","",N,N],[6,"U813","","",N,N],[6,"P813","","",N,N],[6,"N813","","",N,N],[6,"U814","","",N,N],[6,"P814","","",N,N],[6,"N814","","",N,N],[6,"U815","","",N,N],[6,"P815","","",N,N],[6,"N815","","",N,N],[6,"U816","","",N,N],[6,"P816","","",N,N],[6,"N816","","",N,N],[6,"U817","","",N,N],[6,"P817","","",N,N],[6,"N817","","",N,N],[6,"U818","","",N,N],[6,"P818","","",N,N],[6,"N818","","",N,N],[6,"U819","","",N,N],[6,"P819","","",N,N],[6,"N819","","",N,N],[6,"U820","","",N,N],[6,"P820","","",N,N],[6,"N820","","",N,N],[6,"U821","","",N,N],[6,"P821","","",N,N],[6,"N821","","",N,N],[6,"U822","","",N,N],[6,"P822","","",N,N],[6,"N822","","",N,N],[6,"U823","","",N,N],[6,"P823","","",N,N],[6,"N823","","",N,N],[6,"U824","","",N,N],[6,"P824","","",N,N],[6,"N824","","",N,N],[6,"U825","","",N,N],[6,"P825","","",N,N],[6,"N825","","",N,N],[6,"U826","","",N,N],[6,"P826","","",N,N],[6,"N826","","",N,N],[6,"U827","","",N,N],[6,"P827","","",N,N],[6,"N827","","",N,N],[6,"U828","","",N,N],[6,"P828","","",N,N],[6,"N828","","",N,N],[6,"U829","","",N,N],[6,"P829","","",N,N],[6,"N829","","",N,N],[6,"U830","","",N,N],[6,"P830","","",N,N],[6,"N830","","",N,N],[6,"U831","","",N,N],[6,"P831","","",N,N],[6,"N831","","",N,N],[6,"U832","","",N,N],[6,"P832","","",N,N],[6,"N832","","",N,N],[6,"U833","","",N,N],[6,"P833","","",N,N],[6,"N833","","",N,N],[6,"U834","","",N,N],[6,"P834","","",N,N],[6,"N834","","",N,N],[6,"U835","","",N,N],[6,"P835","","",N,N],[6,"N835","","",N,N],[6,"U836","","",N,N],[6,"P836","","",N,N],[6,"N836","","",N,N],[6,"U837","","",N,N],[6,"P837","","",N,N],[6,"N837","","",N,N],[6,"U838","","",N,N],[6,"P838","","",N,N],[6,"N838","","",N,N],[6,"U839","","",N,N],[6,"P839","","",N,N],[6,"N839","","",N,N],[6,"U840","","",N,N],[6,"P840","","",N,N],[6,"N840","","",N,N],[6,"U841","","",N,N],[6,"P841","","",N,N],[6,"N841","","",N,N],[6,"U842","","",N,N],[6,"P842","","",N,N],[6,"N842","","",N,N],[6,"U843","","",N,N],[6,"P843","","",N,N],[6,"N843","","",N,N],[6,"U844","","",N,N],[6,"P844","","",N,N],[6,"N844","","",N,N],[6,"U845","","",N,N],[6,"P845","","",N,N],[6,"N845","","",N,N],[6,"U846","","",N,N],[6,"P846","","",N,N],[6,"N846","","",N,N],[6,"U847","","",N,N],[6,"P847","","",N,N],[6,"N847","","",N,N],[6,"U848","","",N,N],[6,"P848","","",N,N],[6,"N848","","",N,N],[6,"U849","","",N,N],[6,"P849","","",N,N],[6,"N849","","",N,N],[6,"U850","","",N,N],[6,"P850","","",N,N],[6,"N850","","",N,N],[6,"U851","","",N,N],[6,"P851","","",N,N],[6,"N851","","",N,N],[6,"U852","","",N,N],[6,"P852","","",N,N],[6,"N852","","",N,N],[6,"U853","","",N,N],[6,"P853","","",N,N],[6,"N853","","",N,N],[6,"U854","","",N,N],[6,"P854","","",N,N],[6,"N854","","",N,N],[6,"U855","","",N,N],[6,"P855","","",N,N],[6,"N855","","",N,N],[6,"U856","","",N,N],[6,"P856","","",N,N],[6,"N856","","",N,N],[6,"U857","","",N,N],[6,"P857","","",N,N],[6,"N857","","",N,N],[6,"U858","","",N,N],[6,"P858","","",N,N],[6,"N858","","",N,N],[6,"U859","","",N,N],[6,"P859","","",N,N],[6,"N859","","",N,N],[6,"U860","","",N,N],[6,"P860","","",N,N],[6,"N860","","",N,N],[6,"U861","","",N,N],[6,"P861","","",N,N],[6,"N861","","",N,N],[6,"U862","","",N,N],[6,"P862","","",N,N],[6,"N862","","",N,N],[6,"U863","","",N,N],[6,"P863","","",N,N],[6,"N863","","",N,N],[6,"U864","","",N,N],[6,"P864","","",N,N],[6,"N864","","",N,N],[6,"U865","","",N,N],[6,"P865","","",N,N],[6,"N865","","",N,N],[6,"U866","","",N,N],[6,"P866","","",N,N],[6,"N866","","",N,N],[6,"U867","","",N,N],[6,"P867","","",N,N],[6,"N867","","",N,N],[6,"U868","","",N,N],[6,"P868","","",N,N],[6,"N868","","",N,N],[6,"U869","","",N,N],[6,"P869","","",N,N],[6,"N869","","",N,N],[6,"U870","","",N,N],[6,"P870","","",N,N],[6,"N870","","",N,N],[6,"U871","","",N,N],[6,"P871","","",N,N],[6,"N871","","",N,N],[6,"U872","","",N,N],[6,"P872","","",N,N],[6,"N872","","",N,N],[6,"U873","","",N,N],[6,"P873","","",N,N],[6,"N873","","",N,N],[6,"U874","","",N,N],[6,"P874","","",N,N],[6,"N874","","",N,N],[6,"U875","","",N,N],[6,"P875","","",N,N],[6,"N875","","",N,N],[6,"U876","","",N,N],[6,"P876","","",N,N],[6,"N876","","",N,N],[6,"U877","","",N,N],[6,"P877","","",N,N],[6,"N877","","",N,N],[6,"U878","","",N,N],[6,"P878","","",N,N],[6,"N878","","",N,N],[6,"U879","","",N,N],[6,"P879","","",N,N],[6,"N879","","",N,N],[6,"U880","","",N,N],[6,"P880","","",N,N],[6,"N880","","",N,N],[6,"U881","","",N,N],[6,"P881","","",N,N],[6,"N881","","",N,N],[6,"U882","","",N,N],[6,"P882","","",N,N],[6,"N882","","",N,N],[6,"U883","","",N,N],[6,"P883","","",N,N],[6,"N883","","",N,N],[6,"U884","","",N,N],[6,"P884","","",N,N],[6,"N884","","",N,N],[6,"U885","","",N,N],[6,"P885","","",N,N],[6,"N885","","",N,N],[6,"U886","","",N,N],[6,"P886","","",N,N],[6,"N886","","",N,N],[6,"U887","","",N,N],[6,"P887","","",N,N],[6,"N887","","",N,N],[6,"U888","","",N,N],[6,"P888","","",N,N],[6,"N888","","",N,N],[6,"U889","","",N,N],[6,"P889","","",N,N],[6,"N889","","",N,N],[6,"U890","","",N,N],[6,"P890","","",N,N],[6,"N890","","",N,N],[6,"U891","","",N,N],[6,"P891","","",N,N],[6,"N891","","",N,N],[6,"U892","","",N,N],[6,"P892","","",N,N],[6,"N892","","",N,N],[6,"U893","","",N,N],[6,"P893","","",N,N],[6,"N893","","",N,N],[6,"U894","","",N,N],[6,"P894","","",N,N],[6,"N894","","",N,N],[6,"U895","","",N,N],[6,"P895","","",N,N],[6,"N895","","",N,N],[6,"U896","","",N,N],[6,"P896","","",N,N],[6,"N896","","",N,N],[6,"U897","","",N,N],[6,"P897","","",N,N],[6,"N897","","",N,N],[6,"U898","","",N,N],[6,"P898","","",N,N],[6,"N898","","",N,N],[6,"U899","","",N,N],[6,"P899","","",N,N],[6,"N899","","",N,N],[6,"U900","","",N,N],[6,"P900","","",N,N],[6,"N900","","",N,N],[6,"U901","","",N,N],[6,"P901","","",N,N],[6,"N901","","",N,N],[6,"U902","","",N,N],[6,"P902","","",N,N],[6,"N902","","",N,N],[6,"U903","","",N,N],[6,"P903","","",N,N],[6,"N903","","",N,N],[6,"U904","","",N,N],[6,"P904","","",N,N],[6,"N904","","",N,N],[6,"U905","","",N,N],[6,"P905","","",N,N],[6,"N905","","",N,N],[6,"U906","","",N,N],[6,"P906","","",N,N],[6,"N906","","",N,N],[6,"U907","","",N,N],[6,"P907","","",N,N],[6,"N907","","",N,N],[6,"U908","","",N,N],[6,"P908","","",N,N],[6,"N908","","",N,N],[6,"U909","","",N,N],[6,"P909","","",N,N],[6,"N909","","",N,N],[6,"U910","","",N,N],[6,"P910","","",N,N],[6,"N910","","",N,N],[6,"U911","","",N,N],[6,"P911","","",N,N],[6,"N911","","",N,N],[6,"U912","","",N,N],[6,"P912","","",N,N],[6,"N912","","",N,N],[6,"U913","","",N,N],[6,"P913","","",N,N],[6,"N913","","",N,N],[6,"U914","","",N,N],[6,"P914","","",N,N],[6,"N914","","",N,N],[6,"U915","","",N,N],[6,"P915","","",N,N],[6,"N915","","",N,N],[6,"U916","","",N,N],[6,"P916","","",N,N],[6,"N916","","",N,N],[6,"U917","","",N,N],[6,"P917","","",N,N],[6,"N917","","",N,N],[6,"U918","","",N,N],[6,"P918","","",N,N],[6,"N918","","",N,N],[6,"U919","","",N,N],[6,"P919","","",N,N],[6,"N919","","",N,N],[6,"U920","","",N,N],[6,"P920","","",N,N],[6,"N920","","",N,N],[6,"U921","","",N,N],[6,"P921","","",N,N],[6,"N921","","",N,N],[6,"U922","","",N,N],[6,"P922","","",N,N],[6,"N922","","",N,N],[6,"U923","","",N,N],[6,"P923","","",N,N],[6,"N923","","",N,N],[6,"U924","","",N,N],[6,"P924","","",N,N],[6,"N924","","",N,N],[6,"U925","","",N,N],[6,"P925","","",N,N],[6,"N925","","",N,N],[6,"U926","","",N,N],[6,"P926","","",N,N],[6,"N926","","",N,N],[6,"U927","","",N,N],[6,"P927","","",N,N],[6,"N927","","",N,N],[6,"U928","","",N,N],[6,"P928","","",N,N],[6,"N928","","",N,N],[6,"U929","","",N,N],[6,"P929","","",N,N],[6,"N929","","",N,N],[6,"U930","","",N,N],[6,"P930","","",N,N],[6,"N930","","",N,N],[6,"U931","","",N,N],[6,"P931","","",N,N],[6,"N931","","",N,N],[6,"U932","","",N,N],[6,"P932","","",N,N],[6,"N932","","",N,N],[6,"U933","","",N,N],[6,"P933","","",N,N],[6,"N933","","",N,N],[6,"U934","","",N,N],[6,"P934","","",N,N],[6,"N934","","",N,N],[6,"U935","","",N,N],[6,"P935","","",N,N],[6,"N935","","",N,N],[6,"U936","","",N,N],[6,"P936","","",N,N],[6,"N936","","",N,N],[6,"U937","","",N,N],[6,"P937","","",N,N],[6,"N937","","",N,N],[6,"U938","","",N,N],[6,"P938","","",N,N],[6,"N938","","",N,N],[6,"U939","","",N,N],[6,"P939","","",N,N],[6,"N939","","",N,N],[6,"U940","","",N,N],[6,"P940","","",N,N],[6,"N940","","",N,N],[6,"U941","","",N,N],[6,"P941","","",N,N],[6,"N941","","",N,N],[6,"U942","","",N,N],[6,"P942","","",N,N],[6,"N942","","",N,N],[6,"U943","","",N,N],[6,"P943","","",N,N],[6,"N943","","",N,N],[6,"U944","","",N,N],[6,"P944","","",N,N],[6,"N944","","",N,N],[6,"U945","","",N,N],[6,"P945","","",N,N],[6,"N945","","",N,N],[6,"U946","","",N,N],[6,"P946","","",N,N],[6,"N946","","",N,N],[6,"U947","","",N,N],[6,"P947","","",N,N],[6,"N947","","",N,N],[6,"U948","","",N,N],[6,"P948","","",N,N],[6,"N948","","",N,N],[6,"U949","","",N,N],[6,"P949","","",N,N],[6,"N949","","",N,N],[6,"U950","","",N,N],[6,"P950","","",N,N],[6,"N950","","",N,N],[6,"U951","","",N,N],[6,"P951","","",N,N],[6,"N951","","",N,N],[6,"U952","","",N,N],[6,"P952","","",N,N],[6,"N952","","",N,N],[6,"U953","","",N,N],[6,"P953","","",N,N],[6,"N953","","",N,N],[6,"U954","","",N,N],[6,"P954","","",N,N],[6,"N954","","",N,N],[6,"U955","","",N,N],[6,"P955","","",N,N],[6,"N955","","",N,N],[6,"U956","","",N,N],[6,"P956","","",N,N],[6,"N956","","",N,N],[6,"U957","","",N,N],[6,"P957","","",N,N],[6,"N957","","",N,N],[6,"U958","","",N,N],[6,"P958","","",N,N],[6,"N958","","",N,N],[6,"U959","","",N,N],[6,"P959","","",N,N],[6,"N959","","",N,N],[6,"U960","","",N,N],[6,"P960","","",N,N],[6,"N960","","",N,N],[6,"U961","","",N,N],[6,"P961","","",N,N],[6,"N961","","",N,N],[6,"U962","","",N,N],[6,"P962","","",N,N],[6,"N962","","",N,N],[6,"U963","","",N,N],[6,"P963","","",N,N],[6,"N963","","",N,N],[6,"U964","","",N,N],[6,"P964","","",N,N],[6,"N964","","",N,N],[6,"U965","","",N,N],[6,"P965","","",N,N],[6,"N965","","",N,N],[6,"U966","","",N,N],[6,"P966","","",N,N],[6,"N966","","",N,N],[6,"U967","","",N,N],[6,"P967","","",N,N],[6,"N967","","",N,N],[6,"U968","","",N,N],[6,"P968","","",N,N],[6,"N968","","",N,N],[6,"U969","","",N,N],[6,"P969","","",N,N],[6,"N969","","",N,N],[6,"U970","","",N,N],[6,"P970","","",N,N],[6,"N970","","",N,N],[6,"U971","","",N,N],[6,"P971","","",N,N],[6,"N971","","",N,N],[6,"U972","","",N,N],[6,"P972","","",N,N],[6,"N972","","",N,N],[6,"U973","","",N,N],[6,"P973","","",N,N],[6,"N973","","",N,N],[6,"U974","","",N,N],[6,"P974","","",N,N],[6,"N974","","",N,N],[6,"U975","","",N,N],[6,"P975","","",N,N],[6,"N975","","",N,N],[6,"U976","","",N,N],[6,"P976","","",N,N],[6,"N976","","",N,N],[6,"U977","","",N,N],[6,"P977","","",N,N],[6,"N977","","",N,N],[6,"U978","","",N,N],[6,"P978","","",N,N],[6,"N978","","",N,N],[6,"U979","","",N,N],[6,"P979","","",N,N],[6,"N979","","",N,N],[6,"U980","","",N,N],[6,"P980","","",N,N],[6,"N980","","",N,N],[6,"U981","","",N,N],[6,"P981","","",N,N],[6,"N981","","",N,N],[6,"U982","","",N,N],[6,"P982","","",N,N],[6,"N982","","",N,N],[6,"U983","","",N,N],[6,"P983","","",N,N],[6,"N983","","",N,N],[6,"U984","","",N,N],[6,"P984","","",N,N],[6,"N984","","",N,N],[6,"U985","","",N,N],[6,"P985","","",N,N],[6,"N985","","",N,N],[6,"U986","","",N,N],[6,"P986","","",N,N],[6,"N986","","",N,N],[6,"U987","","",N,N],[6,"P987","","",N,N],[6,"N987","","",N,N],[6,"U988","","",N,N],[6,"P988","","",N,N],[6,"N988","","",N,N],[6,"U989","","",N,N],[6,"P989","","",N,N],[6,"N989","","",N,N],[6,"U990","","",N,N],[6,"P990","","",N,N],[6,"N990","","",N,N],[6,"U991","","",N,N],[6,"P991","","",N,N],[6,"N991","","",N,N],[6,"U992","","",N,N],[6,"P992","","",N,N],[6,"N992","","",N,N],[6,"U993","","",N,N],[6,"P993","","",N,N],[6,"N993","","",N,N],[6,"U994","","",N,N],[6,"P994","","",N,N],[6,"N994","","",N,N],[6,"U995","","",N,N],[6,"P995","","",N,N],[6,"N995","","",N,N],[6,"U996","","",N,N],[6,"P996","","",N,N],[6,"N996","","",N,N],[6,"U997","","",N,N],[6,"P997","","",N,N],[6,"N997","","",N,N],[6,"U998","","",N,N],[6,"P998","","",N,N],[6,"N998","","",N,N],[6,"U999","","",N,N],[6,"P999","","",N,N],[6,"N999","","",N,N],[6,"U1000","","",N,N],[6,"P1000","","",N,N],[6,"N1000","","",N,N],[6,"U1001","","",N,N],[6,"P1001","","",N,N],[6,"N1001","","",N,N],[6,"U1002","","",N,N],[6,"P1002","","",N,N],[6,"N1002","","",N,N],[6,"U1003","","",N,N],[6,"P1003","","",N,N],[6,"N1003","","",N,N],[6,"U1004","","",N,N],[6,"P1004","","",N,N],[6,"N1004","","",N,N],[6,"U1005","","",N,N],[6,"P1005","","",N,N],[6,"N1005","","",N,N],[6,"U1006","","",N,N],[6,"P1006","","",N,N],[6,"N1006","","",N,N],[6,"U1007","","",N,N],[6,"P1007","","",N,N],[6,"N1007","","",N,N],[6,"U1008","","",N,N],[6,"P1008","","",N,N],[6,"N1008","","",N,N],[6,"U1009","","",N,N],[6,"P1009","","",N,N],[6,"N1009","","",N,N],[6,"U1010","","",N,N],[6,"P1010","","",N,N],[6,"N1010","","",N,N],[6,"U1011","","",N,N],[6,"P1011","","",N,N],[6,"N1011","","",N,N],[6,"U1012","","",N,N],[6,"P1012","","",N,N],[6,"N1012","","",N,N],[6,"U1013","","",N,N],[6,"P1013","","",N,N],[6,"N1013","","",N,N],[6,"U1014","","",N,N],[6,"P1014","","",N,N],[6,"N1014","","",N,N],[6,"U1015","","",N,N],[6,"P1015","","",N,N],[6,"N1015","","",N,N],[6,"U1016","","",N,N],[6,"P1016","","",N,N],[6,"N1016","","",N,N],[6,"U1017","","",N,N],[6,"P1017","","",N,N],[6,"N1017","","",N,N],[6,"U1018","","",N,N],[6,"P1018","","",N,N],[6,"N1018","","",N,N],[6,"U1019","","",N,N],[6,"P1019","","",N,N],[6,"N1019","","",N,N],[6,"U1020","","",N,N],[6,"P1020","","",N,N],[6,"N1020","","",N,N],[6,"U1021","","",N,N],[6,"P1021","","",N,N],[6,"N1021","","",N,N],[6,"U1022","","",N,N],[6,"P1022","","",N,N],[6,"N1022","","",N,N],[6,"U1023","","",N,N],[6,"P1023","","",N,N],[6,"N1023","","",N,N],[6,"U1024","","",N,N],[6,"P1024","","",N,N],[6,"N1024","","",N,N],[6,"U2048","","",N,N],[6,"P2048","","",N,N],[6,"N2048","","",N,N],[6,"U4096","","",N,N],[6,"P4096","","",N,N],[6,"N4096","","",N,N],[6,"U8192","","",N,N],[6,"P8192","","",N,N],[6,"N8192","","",N,N],[6,"U16384","","",N,N],[6,"P16384","","",N,N],[6,"N16384","","",N,N],[6,"U32768","","",N,N],[6,"P32768","","",N,N],[6,"N32768","","",N,N],[6,"U65536","","",N,N],[6,"P65536","","",N,N],[6,"N65536","","",N,N],[6,"U131072","","",N,N],[6,"P131072","","",N,N],[6,"N131072","","",N,N],[6,"U262144","","",N,N],[6,"P262144","","",N,N],[6,"N262144","","",N,N],[6,"U524288","","",N,N],[6,"P524288","","",N,N],[6,"N524288","","",N,N],[6,"U1048576","","",N,N],[6,"P1048576","","",N,N],[6,"N1048576","","",N,N],[6,"U2097152","","",N,N],[6,"P2097152","","",N,N],[6,"N2097152","","",N,N],[6,"U4194304","","",N,N],[6,"P4194304","","",N,N],[6,"N4194304","","",N,N],[6,"U8388608","","",N,N],[6,"P8388608","","",N,N],[6,"N8388608","","",N,N],[6,"U16777216","","",N,N],[6,"P16777216","","",N,N],[6,"N16777216","","",N,N],[6,"U33554432","","",N,N],[6,"P33554432","","",N,N],[6,"N33554432","","",N,N],[6,"U67108864","","",N,N],[6,"P67108864","","",N,N],[6,"N67108864","","",N,N],[6,"U134217728","","",N,N],[6,"P134217728","","",N,N],[6,"N134217728","","",N,N],[6,"U268435456","","",N,N],[6,"P268435456","","",N,N],[6,"N268435456","","",N,N],[6,"U536870912","","",N,N],[6,"P536870912","","",N,N],[6,"N536870912","","",N,N],[6,"U1073741824","","",N,N],[6,"P1073741824","","",N,N],[6,"N1073741824","","",N,N],[6,"U2147483648","","",N,N],[6,"P2147483648","","",N,N],[6,"N2147483648","","",N,N],[6,"U4294967296","","",N,N],[6,"P4294967296","","",N,N],[6,"N4294967296","","",N,N],[6,"U8589934592","","",N,N],[6,"P8589934592","","",N,N],[6,"N8589934592","","",N,N],[6,"U17179869184","","",N,N],[6,"P17179869184","","",N,N],[6,"N17179869184","","",N,N],[6,"U34359738368","","",N,N],[6,"P34359738368","","",N,N],[6,"N34359738368","","",N,N],[6,"U68719476736","","",N,N],[6,"P68719476736","","",N,N],[6,"N68719476736","","",N,N],[6,"U137438953472","","",N,N],[6,"P137438953472","","",N,N],[6,"N137438953472","","",N,N],[6,"U274877906944","","",N,N],[6,"P274877906944","","",N,N],[6,"N274877906944","","",N,N],[6,"U549755813888","","",N,N],[6,"P549755813888","","",N,N],[6,"N549755813888","","",N,N],[6,"U1099511627776","","",N,N],[6,"P1099511627776","","",N,N],[6,"N1099511627776","","",N,N],[6,"U2199023255552","","",N,N],[6,"P2199023255552","","",N,N],[6,"N2199023255552","","",N,N],[6,"U4398046511104","","",N,N],[6,"P4398046511104","","",N,N],[6,"N4398046511104","","",N,N],[6,"U8796093022208","","",N,N],[6,"P8796093022208","","",N,N],[6,"N8796093022208","","",N,N],[6,"U17592186044416","","",N,N],[6,"P17592186044416","","",N,N],[6,"N17592186044416","","",N,N],[6,"U35184372088832","","",N,N],[6,"P35184372088832","","",N,N],[6,"N35184372088832","","",N,N],[6,"U70368744177664","","",N,N],[6,"P70368744177664","","",N,N],[6,"N70368744177664","","",N,N],[6,"U140737488355328","","",N,N],[6,"P140737488355328","","",N,N],[6,"N140737488355328","","",N,N],[6,"U281474976710656","","",N,N],[6,"P281474976710656","","",N,N],[6,"N281474976710656","","",N,N],[6,"U562949953421312","","",N,N],[6,"P562949953421312","","",N,N],[6,"N562949953421312","","",N,N],[6,"U1125899906842624","","",N,N],[6,"P1125899906842624","","",N,N],[6,"N1125899906842624","","",N,N],[6,"U2251799813685248","","",N,N],[6,"P2251799813685248","","",N,N],[6,"N2251799813685248","","",N,N],[6,"U4503599627370496","","",N,N],[6,"P4503599627370496","","",N,N],[6,"N4503599627370496","","",N,N],[6,"U9007199254740992","","",N,N],[6,"P9007199254740992","","",N,N],[6,"N9007199254740992","","",N,N],[6,"U18014398509481984","","",N,N],[6,"P18014398509481984","","",N,N],[6,"N18014398509481984","","",N,N],[6,"U36028797018963968","","",N,N],[6,"P36028797018963968","","",N,N],[6,"N36028797018963968","","",N,N],[6,"U72057594037927936","","",N,N],[6,"P72057594037927936","","",N,N],[6,"N72057594037927936","","",N,N],[6,"U144115188075855872","","",N,N],[6,"P144115188075855872","","",N,N],[6,"N144115188075855872","","",N,N],[6,"U288230376151711744","","",N,N],[6,"P288230376151711744","","",N,N],[6,"N288230376151711744","","",N,N],[6,"U576460752303423488","","",N,N],[6,"P576460752303423488","","",N,N],[6,"N576460752303423488","","",N,N],[6,"U1152921504606846976","","",N,N],[6,"P1152921504606846976","","",N,N],[6,"N1152921504606846976","","",N,N],[6,"U2305843009213693952","","",N,N],[6,"P2305843009213693952","","",N,N],[6,"N2305843009213693952","","",N,N],[6,"U4611686018427387904","","",N,N],[6,"P4611686018427387904","","",N,N],[6,"N4611686018427387904","","",N,N],[6,"U9223372036854775808","","",N,N],[6,"U10000","","",N,N],[6,"P10000","","",N,N],[6,"N10000","","",N,N],[6,"U100000","","",N,N],[6,"P100000","","",N,N],[6,"N100000","","",N,N],[6,"U1000000","","",N,N],[6,"P1000000","","",N,N],[6,"N1000000","","",N,N],[6,"U10000000","","",N,N],[6,"P10000000","","",N,N],[6,"N10000000","","",N,N],[6,"U100000000","","",N,N],[6,"P100000000","","",N,N],[6,"N100000000","","",N,N],[6,"U1000000000","","",N,N],[6,"P1000000000","","",N,N],[6,"N1000000000","","",N,N],[6,"U10000000000","","",N,N],[6,"P10000000000","","",N,N],[6,"N10000000000","","",N,N],[6,"U100000000000","","",N,N],[6,"P100000000000","","",N,N],[6,"N100000000000","","",N,N],[6,"U1000000000000","","",N,N],[6,"P1000000000000","","",N,N],[6,"N1000000000000","","",N,N],[6,"U10000000000000","","",N,N],[6,"P10000000000000","","",N,N],[6,"N10000000000000","","",N,N],[6,"U100000000000000","","",N,N],[6,"P100000000000000","","",N,N],[6,"N100000000000000","","",N,N],[6,"U1000000000000000","","",N,N],[6,"P1000000000000000","","",N,N],[6,"N1000000000000000","","",N,N],[6,"U10000000000000000","","",N,N],[6,"P10000000000000000","","",N,N],[6,"N10000000000000000","","",N,N],[6,"U100000000000000000","","",N,N],[6,"P100000000000000000","","",N,N],[6,"N100000000000000000","","",N,N],[6,"U1000000000000000000","","",N,N],[6,"P1000000000000000000","","",N,N],[6,"N1000000000000000000","","",N,N],[6,"U10000000000000000000","","",N,N],[0,"bit","typenum","Type-level bits.",N,N],[3,"B0","typenum::bit","The type-level bit 0.",N,N],[3,"B1","","The type-level bit 1.",N,N],[11,"eq","","",0,[[["self"],["b0"]],["bool"]]],[11,"cmp","","",0,[[["self"],["b0"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["b0"]],["option",["ordering"]]]],[11,"clone","","",0,[[["self"]],["b0"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["b0"]]],[11,"new","","Instantiates a singleton representing this bit.",0,[[],["b0"]]],[11,"eq","","",1,[[["self"],["b1"]],["bool"]]],[11,"cmp","","",1,[[["self"],["b1"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["b1"]],["option",["ordering"]]]],[11,"clone","","",1,[[["self"]],["b1"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["b1"]]],[11,"new","","Instantiates a singleton representing this bit.",1,[[],["b1"]]],[11,"to_u8","","",0,[[],["u8"]]],[11,"to_bool","","",0,[[],["bool"]]],[11,"to_u8","","",1,[[],["u8"]]],[11,"to_bool","","",1,[[],["bool"]]],[11,"not","","",0,N],[11,"not","","",1,N],[11,"bitand","","",0,N],[11,"bitand","","",1,N],[11,"bitand","","",1,N],[11,"bitor","","",0,N],[11,"bitor","","",0,N],[11,"bitor","","",1,N],[11,"bitxor","","",0,N],[11,"bitxor","","",1,N],[11,"bitxor","","",0,N],[11,"bitxor","","",1,N],[11,"min","","",0,[[["self"],["b0"]],["b0"]]],[11,"min","","",0,[[["self"],["b1"]],["b0"]]],[11,"min","","",1,[[["self"],["b0"]],["b0"]]],[11,"min","","",1,[[["self"],["b1"]],["b1"]]],[11,"max","","",0,[[["self"],["b0"]],["b0"]]],[11,"max","","",0,[[["self"],["b1"]],["b1"]]],[11,"max","","",1,[[["self"],["b0"]],["b1"]]],[11,"max","","",1,[[["self"],["b1"]],["b1"]]],[0,"uint","typenum","Type-level unsigned integers.",N,N],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the most significant bit. `UTerm` by itself represents zero, which is aliased to `U0`.",N,N],[3,"UInt","","`UInt` is defined recursively, where `B` is the least significant bit and `U` is the rest of the number. Conceptually, `U` should be bound by the trait `Unsigned` and `B` should be bound by the trait `Bit`, but enforcing these bounds causes linear instead of logrithmic scaling in some places, so they are left off for now. They may be enforced in future.",N,N],[6,"GetBitOut","","",N,N],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I, B> = <N as SetBit<I, B>>::Output`.",N,N],[8,"GetBit","","",N,N],[16,"Output","","",2,N],[8,"SetBit","","A type operator that, when implemented for unsigned integer `N`, sets the bit at position `I` to `B`.",N,N],[16,"Output","","",3,N],[11,"eq","","",4,[[["self"],["uterm"]],["bool"]]],[11,"cmp","","",4,[[["self"],["uterm"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["uterm"]],["option",["ordering"]]]],[11,"clone","","",4,[[["self"]],["uterm"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["uterm"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,[[],["uterm"]]],[11,"to_u8","","",4,[[],["u8"]]],[11,"to_u16","","",4,[[],["u16"]]],[11,"to_u32","","",4,[[],["u32"]]],[11,"to_u64","","",4,[[],["u64"]]],[11,"to_usize","","",4,[[],["usize"]]],[11,"to_i8","","",4,[[],["i8"]]],[11,"to_i16","","",4,[[],["i16"]]],[11,"to_i32","","",4,[[],["i32"]]],[11,"to_i64","","",4,[[],["i64"]]],[11,"to_isize","","",4,[[],["isize"]]],[11,"eq","","",5,[[["self"],["uint"]],["bool"]]],[11,"ne","","",5,[[["self"],["uint"]],["bool"]]],[11,"cmp","","",5,[[["self"],["uint"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["uint"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["uint"]],["bool"]]],[11,"le","","",5,[[["self"],["uint"]],["bool"]]],[11,"gt","","",5,[[["self"],["uint"]],["bool"]]],[11,"ge","","",5,[[["self"],["uint"]],["bool"]]],[11,"clone","","",5,[[["self"]],["uint"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["uint"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,[[],["uint"]]],[11,"to_u8","","",5,[[],["u8"]]],[11,"to_u16","","",5,[[],["u16"]]],[11,"to_u32","","",5,[[],["u32"]]],[11,"to_u64","","",5,[[],["u64"]]],[11,"to_usize","","",5,[[],["usize"]]],[11,"to_i8","","",5,[[],["i8"]]],[11,"to_i16","","",5,[[],["i16"]]],[11,"to_i32","","",5,[[],["i32"]]],[11,"to_i64","","",5,[[],["i64"]]],[11,"to_isize","","",5,[[],["isize"]]],[11,"len","","",4,N],[11,"len","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"sub","","",4,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",4,N],[11,"sub","","",5,N],[11,"bitand","","",4,N],[11,"bitand","","",5,N],[11,"bitor","","",4,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitxor","","",4,N],[11,"bitxor","","",5,N],[11,"shl","","",4,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",4,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"mul","","",5,N],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"div","","",4,N],[11,"div","","",5,N],[11,"rem","","",4,N],[11,"rem","","",5,N],[11,"partial_div","","",4,N],[11,"partial_div","","",5,N],[11,"min","","",4,N],[11,"min","","",5,N],[11,"max","","",4,N],[11,"max","","",5,N],[0,"int","typenum","Type-level signed integers.",N,N],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",N,N],[3,"NInt","","Type-level signed integers with negative sign.",N,N],[3,"Z0","","The type-level signed integer 0.",N,N],[11,"eq","","",6,[[["self"],["pint"]],["bool"]]],[11,"ne","","",6,[[["self"],["pint"]],["bool"]]],[11,"cmp","","",6,[[["self"],["pint"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["pint"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["pint"]],["bool"]]],[11,"le","","",6,[[["self"],["pint"]],["bool"]]],[11,"gt","","",6,[[["self"],["pint"]],["bool"]]],[11,"ge","","",6,[[["self"],["pint"]],["bool"]]],[11,"clone","","",6,[[["self"]],["pint"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["pint"]]],[11,"eq","","",7,[[["self"],["nint"]],["bool"]]],[11,"ne","","",7,[[["self"],["nint"]],["bool"]]],[11,"cmp","","",7,[[["self"],["nint"]],["ordering"]]],[11,"partial_cmp","","",7,[[["self"],["nint"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["nint"]],["bool"]]],[11,"le","","",7,[[["self"],["nint"]],["bool"]]],[11,"gt","","",7,[[["self"],["nint"]],["bool"]]],[11,"ge","","",7,[[["self"],["nint"]],["bool"]]],[11,"clone","","",7,[[["self"]],["nint"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"default","","",7,[[],["nint"]]],[11,"new","","Instantiates a singleton representing this strictly positive integer.",6,[[],["pint"]]],[11,"new","","Instantiates a singleton representing this strictly negative integer.",7,[[],["nint"]]],[11,"eq","","",8,[[["self"],["z0"]],["bool"]]],[11,"cmp","","",8,[[["self"],["z0"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["z0"]],["option",["ordering"]]]],[11,"clone","","",8,[[["self"]],["z0"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"default","","",8,[[],["z0"]]],[11,"new","","Instantiates a singleton representing the integer 0.",8,[[],["z0"]]],[11,"to_i8","","",8,[[],["i8"]]],[11,"to_i16","","",8,[[],["i16"]]],[11,"to_i32","","",8,[[],["i32"]]],[11,"to_i64","","",8,[[],["i64"]]],[11,"to_isize","","",8,[[],["isize"]]],[11,"to_i8","","",6,[[],["i8"]]],[11,"to_i16","","",6,[[],["i16"]]],[11,"to_i32","","",6,[[],["i32"]]],[11,"to_i64","","",6,[[],["i64"]]],[11,"to_isize","","",6,[[],["isize"]]],[11,"to_i8","","",7,[[],["i8"]]],[11,"to_i16","","",7,[[],["i16"]]],[11,"to_i32","","",7,[[],["i32"]]],[11,"to_i64","","",7,[[],["i64"]]],[11,"to_isize","","",7,[[],["isize"]]],[11,"neg","","",8,N],[11,"neg","","",6,N],[11,"neg","","",7,N],[11,"add","","",8,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"sub","","",8,N],[11,"sub","","",8,N],[11,"sub","","",8,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"mul","","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"div","","",8,N],[11,"div","","",6,N],[11,"div","","",6,N],[11,"div","","",7,N],[11,"div","","",7,N],[11,"rem","","",8,N],[11,"rem","","",6,N],[11,"rem","","",6,N],[11,"rem","","",7,N],[11,"rem","","",7,N],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","","",9,N],[11,"powi","","",10,N],[11,"powi","","",10,N],[11,"powi","","",6,N],[11,"powi","","",7,N],[11,"powi","","",6,N],[11,"powi","","",7,N],[11,"powi","","",7,N],[11,"min","","",8,N],[11,"min","","",8,N],[11,"min","","",8,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"max","","",8,N],[11,"max","","",8,N],[11,"max","","",8,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[0,"marker_traits","typenum","All of the marker traits used in typenum.",N,N],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`.",N,N],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",N,N],[10,"to_ordering","","",11,[[],["ordering"]]],[8,"Bit","","The marker trait for compile time bits.",N,N],[18,"U8","","",12,N],[18,"BOOL","","",12,N],[10,"to_u8","","",12,[[],["u8"]]],[10,"to_bool","","",12,[[],["bool"]]],[8,"Unsigned","","The marker trait for compile time unsigned integers.",N,N],[18,"U8","","",13,N],[18,"U16","","",13,N],[18,"U32","","",13,N],[18,"U64","","",13,N],[18,"USIZE","","",13,N],[18,"I8","","",13,N],[18,"I16","","",13,N],[18,"I32","","",13,N],[18,"I64","","",13,N],[18,"ISIZE","","",13,N],[10,"to_u8","","",13,[[],["u8"]]],[10,"to_u16","","",13,[[],["u16"]]],[10,"to_u32","","",13,[[],["u32"]]],[10,"to_u64","","",13,[[],["u64"]]],[10,"to_usize","","",13,[[],["usize"]]],[10,"to_i8","","",13,[[],["i8"]]],[10,"to_i16","","",13,[[],["i16"]]],[10,"to_i32","","",13,[[],["i32"]]],[10,"to_i64","","",13,[[],["i64"]]],[10,"to_isize","","",13,[[],["isize"]]],[8,"Integer","","The marker trait for compile time signed integers.",N,N],[18,"I8","","",14,N],[18,"I16","","",14,N],[18,"I32","","",14,N],[18,"I64","","",14,N],[18,"ISIZE","","",14,N],[10,"to_i8","","",14,[[],["i8"]]],[10,"to_i16","","",14,[[],["i16"]]],[10,"to_i32","","",14,[[],["i32"]]],[10,"to_i64","","",14,[[],["i64"]]],[10,"to_isize","","",14,[[],["isize"]]],[8,"TypeArray","","The marker trait for type-level arrays of type-level numbers.",N,N],[8,"PowerOfTwo","","The marker trait for type-level numbers which are a power of two.",N,N],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",N,N],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators.",N,N],[16,"Output","","Should always be `Self`",15,N],[8,"Abs","","A type operator that returns the absolute value.",N,N],[16,"Output","","The absolute value.",16,N],[8,"Pow","","A type operator that provides exponentiation by repeated squaring.",N,N],[16,"Output","","The result of the exponentiation.",17,N],[10,"powi","","This function isn't used in this crate, but may be useful for others. It is implemented for primitives.",17,N],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types.",N,N],[16,"Output","","The result of the comparison. It should only ever be one of `Greater`, `Less`, or `Equal`.",18,N],[8,"Len","","A type operator that gives the length of an `Array` or the number of bits in a `UInt`.",N,N],[16,"Output","","The length as a type-level unsigned integer.",19,N],[10,"len","","This function isn't used in this crate, but may be useful for others.",19,N],[8,"PartialDiv","","Division as a partial function. This type operator performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder).",N,N],[16,"Output","","The type of the result of the division",20,N],[10,"partial_div","","Method for performing the division",20,N],[8,"Min","","A type operator that returns the minimum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the minimum of `Self` and `Rhs`",21,N],[10,"min","","Method returning the minimum",21,N],[8,"Max","","A type operator that returns the maximum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the maximum of `Self` and `Rhs`",22,N],[10,"max","","Method returning the maximum",22,N],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",23,N],[10,"is_less","","Method returning `True` or `False`.",23,N],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",24,N],[10,"is_equal","","Method returning `True` or `False`.",24,N],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",25,N],[10,"is_greater","","Method returning `True` or `False`.",25,N],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",26,N],[10,"is_less_or_equal","","Method returning `True` or `False`.",26,N],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",27,N],[10,"is_not_equal","","Method returning `True` or `False`.",27,N],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",28,N],[10,"is_greater_or_equal","","Method returning `True` or `False`.",28,N],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their purpose is to increase the ergonomics of performing operations on the types defined here. For even more ergonomics, consider using the `op!` macro instead.",N,N],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A as BitAnd<B>>::Output`",N,N],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A as BitOr<B>>::Output`",N,N],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A as BitXor<B>>::Output`",N,N],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A as Shl<B>>::Output`",N,N],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> = <A as Shr<B>>::Output`",N,N],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as Add<B>>::Output`",N,N],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A as Sub<B>>::Output`",N,N],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A as Mul<B>>::Output`",N,N],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A as Div<B>>::Output`",N,N],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as Rem<B>>::Output`",N,N],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`: `PartialQuot<A, B> = <A as PartialDiv<B>>::Output`",N,N],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as Neg>::Output`",N,N],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as Abs>::Output`",N,N],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as Pow<B>>::Output`",N,N],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as Add<B1>>::Output`",N,N],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as Sub<B1>>::Output`",N,N],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as Mul<A>>::Output`",N,N],[6,"Cube","","Alias to make it easy to cube. `Cube<A> = <Square<A> as Mul<A>>::Output`",N,N],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> = <A as Cmp<B>>::Output`",N,N],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as Len>::Output`",N,N],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> = <A as Min<B>>::Output`",N,N],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> = <A as Max<B>>::Output`",N,N],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A as IsLess<B>>::Output`",N,N],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A as IsEqual<B>>::Output`",N,N],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> = <A as IsGreater<B>>::Output`",N,N],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`: `GrEq<A, B> = <A as IsGreaterOrEqual<B>>::Output`",N,N],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A, B> = <A as IsLessOrEqual<B>>::Output`",N,N],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A, B> = <A as IsNotEqual<B>>::Output`",N,N],[0,"array","typenum","A type-level array of type-level numbers.",N,N],[3,"ATerm","typenum::array","The terminating type for type arrays.",N,N],[3,"TArr","","`TArr` is a type that acts as an array of types. It is defined similarly to `UInt`, only its values can be more than bits, and it is designed to act as an array. So you can only add two if they have the same number of elements, for example.",N,N],[11,"eq","","",29,[[["self"],["aterm"]],["bool"]]],[11,"cmp","","",29,[[["self"],["aterm"]],["ordering"]]],[11,"partial_cmp","","",29,[[["self"],["aterm"]],["option",["ordering"]]]],[11,"clone","","",29,[[["self"]],["aterm"]]],[11,"hash","","",29,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["tarr"]],["bool"]]],[11,"ne","","",30,[[["self"],["tarr"]],["bool"]]],[11,"cmp","","",30,[[["self"],["tarr"]],["ordering"]]],[11,"partial_cmp","","",30,[[["self"],["tarr"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["tarr"]],["bool"]]],[11,"le","","",30,[[["self"],["tarr"]],["bool"]]],[11,"gt","","",30,[[["self"],["tarr"]],["bool"]]],[11,"ge","","",30,[[["self"],["tarr"]],["bool"]]],[11,"clone","","",30,[[["self"]],["tarr"]]],[11,"hash","","",30,N],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"len","","",29,N],[11,"len","","",30,N],[11,"add","","",29,N],[11,"add","","",30,N],[11,"sub","","",29,N],[11,"sub","","",30,N],[11,"mul","","",29,N],[11,"mul","","",30,N],[11,"mul","typenum::int","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"div","typenum::array","",29,N],[11,"div","","",30,N],[11,"partial_div","","",29,N],[11,"partial_div","","",30,N],[11,"rem","","",29,N],[11,"rem","","",30,N],[11,"neg","","",29,N],[11,"neg","","",30,N],[11,"eq","typenum","",31,[[["self"],["greater"]],["bool"]]],[11,"cmp","","",31,[[["self"],["greater"]],["ordering"]]],[11,"partial_cmp","","",31,[[["self"],["greater"]],["option",["ordering"]]]],[11,"clone","","",31,[[["self"]],["greater"]]],[11,"hash","","",31,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"default","","",31,[[],["greater"]]],[11,"eq","","",32,[[["self"],["less"]],["bool"]]],[11,"cmp","","",32,[[["self"],["less"]],["ordering"]]],[11,"partial_cmp","","",32,[[["self"],["less"]],["option",["ordering"]]]],[11,"clone","","",32,[[["self"]],["less"]]],[11,"hash","","",32,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"default","","",32,[[],["less"]]],[11,"eq","","",33,[[["self"],["equal"]],["bool"]]],[11,"cmp","","",33,[[["self"],["equal"]],["ordering"]]],[11,"partial_cmp","","",33,[[["self"],["equal"]],["option",["ordering"]]]],[11,"clone","","",33,[[["self"]],["equal"]]],[11,"hash","","",33,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"default","","",33,[[],["equal"]]],[11,"to_ordering","","",31,[[],["ordering"]]],[11,"to_ordering","","",32,[[],["ordering"]]],[11,"to_ordering","","",33,[[],["ordering"]]],[14,"op","","Convenient type operations.",N,N],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!` instead.",N,N],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0 or newer.",N,N],[14,"assert_type_eq","","Asserts that two types are the same.",N,N],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",N,N]],"paths":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[6,"P1"],[6,"N1"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"]]};
searchIndex["ucd_trie"]={"doc":"The ucd-trie crate provides a compressed trie set specifically tailored for Unicode codepoints. The principle use case for such a trie is to represent properties defined by Unicode that correspond to sets of Unicode codepoints. (These properties are formally called boolean properties or \"single valued\" properties. See UTR#23 S3.3 for more details.)","items":[[3,"TrieSetOwned","ucd_trie","An owned trie set.",N,N],[3,"TrieSetSlice","","A borrowed trie set.",N,N],[4,"Error","","An error that can occur during construction of a trie.",N,N],[13,"InvalidCodepoint","","This error is returned when an invalid codepoint is given to `TrieSetOwned::from_codepoints`. An invalid codepoint is a `u32` that is greater than `0x10FFFF`.",0,N],[13,"GaveUp","","This error is returned when a set of Unicode codepoints could not be sufficiently compressed into the trie provided by this crate. There is no work-around for this error at this time.",0,N],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["triesetowned"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_scalars","","Create a new trie set from a set of Unicode scalar values.",1,[[["i"]],["result",["triesetowned"]]]],[11,"from_codepoints","","Create a new trie set from a set of Unicode scalar values.",1,[[["i"]],["result",["triesetowned"]]]],[11,"as_slice","","Return this set as a slice.",1,[[["self"]],["triesetslice"]]],[11,"contains_char","","Returns true if and only if the given Unicode scalar value is in this set.",1,[[["self"],["char"]],["bool"]]],[11,"contains_u32","","Returns true if and only if the given codepoint is in this set.",1,[[["self"],["u32"]],["bool"]]],[6,"Result","","A type alias that maps to `std::result::Result<T, ucd_trie::Error>`.",N,N],[6,"TrieSet","","A type alias for `TrieSetSlice<'static>`.",N,N],[11,"clone","","",2,[[["self"]],["triesetslice"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains_char","","Returns true if and only if the given Unicode scalar value is in this set.",2,[[["self"],["char"]],["bool"]]],[11,"contains_u32","","Returns true if and only if the given codepoint is in this set.",2,[[["self"],["u32"]],["bool"]]]],"paths":[[4,"Error"],[3,"TrieSetOwned"],[3,"TrieSetSlice"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unic_char_property"]={"doc":"UNIC — Unicode Character Tools - Character Property","items":[[0,"tables","unic_char_property","Character data tables used in UNIC.",N,N],[3,"CharDataTableIter","unic_char_property::tables","Iterator for `CharDataTable`. Iterates over pairs `(CharRange, V)`.",N,N],[4,"CharDataTable","","A mapping from characters to some associated data.",N,N],[11,"clone","","",0,[[["self"]],["chardatatable"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["self"]]],[11,"contains","","Does this table contain a mapping for a character?",0,[[["self"],["char"]],["bool"]]],[11,"find","","Find the associated data for a character in this table.",0,[[["self"],["char"]],["option"]]],[11,"find_or_default","","Find the associated data for a character in this table, or the default value if not entered.",0,[[["self"],["char"]],["v"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"iter","","Iterate over the entries in this table. Yields pairs `(CharRange, V)`.",0,[[["self"]],["chardatatableiter"]]],[17,"PKG_DESCRIPTION","unic_char_property","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N],[8,"CharProperty","","A Character Property, defined for some or all Unicode characters.",N,N],[10,"prop_abbr_name","","The abbreviated name of the property.",2,[[],["str"]]],[10,"prop_long_name","","The long name of the property.",2,[[],["str"]]],[10,"prop_human_name","","The human-readable name of the property.",2,[[],["str"]]],[8,"PartialCharProperty","","A Character Property defined for some characters.",N,N],[10,"of","","The property value for the character, or None.",3,[[["char"]],["option"]]],[8,"TotalCharProperty","","A Character Property defined on all characters.",N,N],[10,"of","","The property value for the character.",4,[[["char"]],["self"]]],[8,"BinaryCharProperty","","A Character Property with binary values.",N,N],[10,"as_bool","","The boolean value of the property value.",5,[[["self"]],["bool"]]],[11,"abbr_name","","The abbreviated name of the property value.",5,[[["self"]],["str"]]],[11,"long_name","","The long name of the property value.",5,[[["self"]],["str"]]],[11,"human_name","","The human-readable name of the property value.",5,[[["self"]],["str"]]],[8,"CustomCharProperty","","A Character Property with custom values.",N,N],[10,"actual","","The actual (inner) value for the property value.",6,[[["self"]],["value"]]],[8,"EnumeratedCharProperty","","A Character Property with enumerated values.",N,N],[10,"all_values","","Exhaustive list of all property values.",7,N],[10,"abbr_name","","The abbreviated name of the property value.",7,[[["self"]],["str"]]],[10,"long_name","","The long name of the property value.",7,[[["self"]],["str"]]],[10,"human_name","","The human-readable name of the property value.",7,[[["self"]],["str"]]],[8,"NumericCharProperty","","A Character Property with numeric values.",N,N],[10,"number","","The numeric value for the property value.",8,[[["self"]],["numericvalue"]]],[8,"NumericCharPropertyValue","","Marker for numeric types accepted by `NumericCharProperty`.",N,N],[14,"char_property","","Macro for declaring a character property.",N,N],[11,"abbr_name","","The abbreviated name of the property value.",5,[[["self"]],["str"]]],[11,"long_name","","The long name of the property value.",5,[[["self"]],["str"]]],[11,"human_name","","The human-readable name of the property value.",5,[[["self"]],["str"]]]],"paths":[[4,"CharDataTable"],[3,"CharDataTableIter"],[8,"CharProperty"],[8,"PartialCharProperty"],[8,"TotalCharProperty"],[8,"BinaryCharProperty"],[8,"CustomCharProperty"],[8,"EnumeratedCharProperty"],[8,"NumericCharProperty"]]};
searchIndex["unic_char_range"]={"doc":"UNIC — Unicode Character Tools - Character Range","items":[[3,"CharIter","unic_char_range","An iterator over a range of unicode code points.",N,N],[3,"CharRange","","A range of unicode code points.",N,N],[12,"low","","The lowest character in this range (inclusive).",0,N],[12,"high","","The highest character in this range (inclusive).",0,N],[11,"clone","","",1,[[["self"]],["chariter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["charrange"]],["chariter"]]],[11,"from","","",0,[[["chariter"]],["charrange"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"last","","",1,[[["self"]],["option",["char"]]]],[11,"max","","",1,[[["self"]],["option",["char"]]]],[11,"min","","",1,[[["self"]],["option",["char"]]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"clone","","",0,[[["self"]],["charrange"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"closed","","Construct a closed range of characters.",0,[[["char"],["char"]],["charrange"]]],[11,"open_right","","Construct a half open (right) range of characters.",0,[[["char"],["char"]],["charrange"]]],[11,"open_left","","Construct a half open (left) range of characters.",0,[[["char"],["char"]],["charrange"]]],[11,"open","","Construct a fully open range of characters.",0,[[["char"],["char"]],["charrange"]]],[11,"all","","Construct a range over all characters.",0,[[],["charrange"]]],[11,"contains","","Does this range include a character?",0,[[["self"],["char"]],["bool"]]],[11,"cmp","","Determine the ordering of this range and a character.",0,[[["self"],["char"]],["ordering"]]],[11,"len","","How many characters are in this range?",0,[[["self"]],["usize"]]],[11,"is_empty","","Is this range empty?",0,[[["self"]],["bool"]]],[11,"iter","","Create an iterator over this range.",0,[[["self"]],["chariter"]]],[11,"into_iter","","",0,[[["self"]],["chariter"]]],[11,"eq","","",0,[[["self"],["charrange"]],["bool"]]],[17,"PKG_DESCRIPTION","","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N],[14,"chars","","Convenience macro for the initialization of `CharRange`s.",N,N]],"paths":[[3,"CharRange"],[3,"CharIter"]]};
searchIndex["unic_common"]={"doc":"UNIC — Common Utilities","items":[[0,"version","unic_common","Version data types.",N,N],[3,"UnicodeVersion","unic_common::version","Represents a Unicode Version type.",N,N],[12,"major","","Major version.",0,N],[12,"minor","","Minor version.",0,N],[12,"micro","","Micro (or Update) version.",0,N],[11,"clone","","",0,[[["self"]],["unicodeversion"]]],[11,"eq","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"cmp","","",0,[[["self"],["unicodeversion"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["unicodeversion"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"default","","",0,[[],["unicodeversion"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[17,"PKG_DESCRIPTION","unic_common","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N]],"paths":[[3,"UnicodeVersion"]]};
searchIndex["unic_segment"]={"doc":"UNIC — Unicode Text Segmentation Algorithms","items":[[17,"UNICODE_VERSION","unic_segment","The Unicode version of data",N,N],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",N,N],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",N,N],[3,"Graphemes","","External iterator for a string's grapheme clusters.",N,N],[3,"WordBoundIndices","","External iterator for word boundaries and byte offsets.",N,N],[3,"WordBounds","","External iterator for a string's word boundaries.",N,N],[3,"Words","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",N,N],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",N,N],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,N],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,N],[11,"clone","","",1,[[["self"]],["graphemeindices"]]],[11,"new","","Create new iterator for extended grapheme clusters.",1,[[["str"]],["graphemeindices"]]],[11,"new_legacy","","Create new iterator for legacy grapheme clusters.",1,[[["str"]],["graphemeindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,[[["self"]],["str"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["graphemes"]]],[11,"new","","Create new iterator for extended grapheme clusters.",2,[[["str"]],["graphemes"]]],[11,"new_legacy","","Create new iterator for legacy grapheme clusters.",2,[[["str"]],["graphemes"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,[[["self"]],["str"]]],[11,"size_hint","","",2,N],[11,"next","","",2,[[["self"]],["option",["str"]]]],[11,"next_back","","",2,[[["self"]],["option",["str"]]]],[11,"clone","","",3,[[["self"]],["graphemecursor"]]],[11,"eq","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"ne","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not.",3,[[["usize"],["usize"]],["graphemecursor"]]],[11,"new_legacy","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not.",3,[[["usize"],["usize"]],["graphemecursor"]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,[[["self"],["usize"]]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,[[["self"]],["usize"]]],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,[[["self"],["str"],["usize"]]]],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,[[["self"],["str"],["usize"]],["result",["bool","graphemeincomplete"]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"next","","",4,[[["self"]],["option",["str"]]]],[11,"next_back","","",4,[[["self"]],["option",["str"]]]],[11,"new","","Create new iterator for words.",4,N],[11,"clone","","",5,[[["self"]],["wordbounds"]]],[11,"clone","","",6,[[["self"]],["wordboundindices"]]],[11,"new","","Create new iterator for word boundries and their indices.",6,[[["str"]],["wordboundindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,[[["self"]],["str"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",5,[[["self"]],["option",["str"]]]],[11,"next_back","","",5,[[["self"]],["option",["str"]]]],[11,"new","","Create new iterator for word boundries.",5,[[["str"]],["wordbounds"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,[[["self"]],["str"]]],[17,"PKG_DESCRIPTION","","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"Words"],[3,"WordBounds"],[3,"WordBoundIndices"]]};
searchIndex["unic_ucd_segment"]={"doc":"UNIC — UCD — Segmentation Properties\"","items":[[0,"grapheme_cluster_break","unic_ucd_segment","Unicode Grapheme_Cluster_Break Character Property.",N,N],[4,"GraphemeClusterBreak","unic_ucd_segment::grapheme_cluster_break","Represents the Unicode character Grapheme_Cluster_Break property.",N,N],[13,"CR","","`text U+000D CARRIAGE RETURN (CR)`",0,N],[13,"LF","","`text U+000A LINE FEED (LF)`",0,N],[13,"Control","","`text General_Category = Line_Separator, or General_Category = Paragraph_Separator, or General_Category = Control, or General_Category = Unassigned and Default_Ignorable_Code_Point, or General_Category = Surrogate, or General_Category = Format and not U+000D CARRIAGE RETURN and not U+000A LINE FEED and not U+200C ZERO WIDTH NON-JOINER (ZWNJ) and not U+200D ZERO WIDTH JOINER (ZWJ)`",0,N],[13,"Extend","","",0,N],[13,"ZWJ","","`text U+200D ZERO WIDTH JOINER`",0,N],[13,"RegionalIndicator","","`text Regional_Indicator = Yes`",0,N],[13,"Prepend","","`text Indic_Syllabic_Category = Consonant_Preceding_Repha, or Indic_Syllabic_Category = Consonant_Prefixed, or Prepended_Concatenation_Mark = Yes`",0,N],[13,"SpacingMark","","`text Grapheme_Cluster_Break ≠ Extend, and General_Category = Spacing_Mark, or any of the following (which have General_Category = Other_Letter): U+0E33 ( ำ ) THAI CHARACTER SARA AM U+0EB3 ( ຳ ) LAO VOWEL SIGN AM`",0,N],[13,"L","","`text Hangul_Syllable_Type=L`",0,N],[13,"V","","`text Hangul_Syllable_Type=V`",0,N],[13,"T","","`text Hangul_Syllable_Type=T`",0,N],[13,"LV","","`text Hangul_Syllable_Type=LV:`",0,N],[13,"LVT","","`text Hangul_Syllable_Type=LVT`",0,N],[13,"EBase","","Emoji characters listed as `Emoji_Modifier_Base=Yes` in `emoji-data.txt`, which do not occur after ZWJ in `emoji-zwj-sequences.txt`.",0,N],[13,"EModifier","","Emoji characters listed as `Emoji_Modifer=Yes` in `emoji-data.txt`.",0,N],[13,"GlueAfterZwj","","Emoji characters that do not break from a previous ZWJ in a defined emoji ZWJ sequence, and are not listed as `Emoji_Modifier_Base=Yes` in `emoji-data.txt`.",0,N],[13,"EBaseGAZ","","Emoji characters listed as `Emoji_Modifer_Base=Yes` in `emoji_data.txt`, and also occur after ZWJ in `emoji-zwj-sequences.txt`.",0,N],[13,"Other","","All other characters",0,N],[0,"abbr_names","","Abbreviated name aliases for the Grapheme_Cluster_Break property.",N,N],[0,"long_names","","Long name aliases for the Grapheme_Cluster_Break property.",N,N],[11,"clone","","",0,[[["self"]],["graphemeclusterbreak"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["graphemeclusterbreak"]],["bool"]]],[11,"hash","","",0,N],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"prop_abbr_name","","",0,[[],["str"]]],[11,"prop_long_name","","",0,[[],["str"]]],[11,"prop_human_name","","",0,[[],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"all_values","","",0,N],[11,"abbr_name","","",0,[[["self"]],["str"]]],[11,"long_name","","",0,[[["self"]],["str"]]],[11,"human_name","","",0,[[["self"]],["str"]]],[11,"of","","",0,[[["char"]],["self"]]],[11,"default","","",0,[[],["self"]]],[11,"of","","Find the character Grapheme_Cluster_Break property value.",0,[[["char"]],["graphemeclusterbreak"]]],[0,"sentence_break","unic_ucd_segment","Unicode Sentence_Break Character Property.",N,N],[4,"SentenceBreak","unic_ucd_segment::sentence_break","Represents the Unicode character Sentence_Break property.",N,N],[13,"CR","","`text U+000D CARRIAGE RETURN (CR)`",1,N],[13,"LF","","`text U+000A LINE FEED (LF)`",1,N],[13,"Extend","","`text Grapheme_Extend = Yes, or U+200D ZERO WIDTH JOINER (ZWJ), or General_Category = Spacing_Mark`",1,N],[13,"Sep","","`text U+0085 NEXT LINE (NEL) U+2028 LINE SEPARATOR U+2029 PARAGRAPH SEPARATOR`",1,N],[13,"Format","","`text General_Category = Format and not U+200C ZERO WIDTH NON-JOINER (ZWNJ) and not U+200D ZERO WIDTH JOINER (ZWJ)`",1,N],[13,"Sp","","`text White_Space = Yes and Sentence_Break ≠ Sep and Sentence_Break ≠ CR and Sentence_Break ≠ LF`",1,N],[13,"Lower","","`text Lowercase = Yes and Grapheme_Extend = No`",1,N],[13,"Upper","","`text General_Category = Titlecase_Letter, or Uppercase = Yes`",1,N],[13,"OLetter","","`text Alphabetic = Yes, or U+00A0 NO-BREAK SPACE (NBSP), or U+05F3 ( ׳ ) HEBREW PUNCTUATION GERESH and Lower = No and Upper = No and Sentence_Break ≠ Extend`",1,N],[13,"Numeric","","`text Line_Break = Numeric`",1,N],[13,"ATerm","","`text U+002E ( . ) FULL STOP U+2024 ( ․ ) ONE DOT LEADER U+FE52 ( ﹒ ) SMALL FULL STOP U+FF0E ( ． ) FULLWIDTH FULL STOP`",1,N],[13,"SContinue","","`text U+002C ( , ) COMMA U+002D ( - ) HYPHEN-MINUS U+003A ( : ) COLON U+055D ( ՝ ) ARMENIAN COMMA U+060C ( ، ) ARABIC COMMA U+060D ( ‎؍‎ ) ARABIC DATE SEPARATOR U+07F8 ( ߸ ) NKO COMMA U+1802 ( ᠂ ) MONGOLIAN COMMA U+1808 ( ᠈ ) MONGOLIAN MANCHU COMMA U+2013 ( – ) EN DASH U+2014 ( — ) EM DASH U+3001 ( 、 ) IDEOGRAPHIC COMMA U+FE10 ( ︐ ) PRESENTATION FORM FOR VERTICAL COMMA U+FE11 ( ︑ ) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA U+FE13 ( ︓ ) PRESENTATION FORM FOR VERTICAL COLON U+FE31 ( ︱ ) PRESENTATION FORM FOR VERTICAL EM DASH U+FE32 ( ︲ ) PRESENTATION FORM FOR VERTICAL EN DASH U+FE50 ( ﹐ ) SMALL COMMA U+FE51 ( ﹑ ) SMALL IDEOGRAPHIC COMMA U+FE55 ( ﹕ ) SMALL COLON U+FE58 ( ﹘ ) SMALL EM DASH U+FE63 ( ﹣ ) SMALL HYPHEN-MINUS U+FF0C ( ， ) FULLWIDTH COMMA U+FF0D ( － ) FULLWIDTH HYPHEN-MINUS U+FF1A ( ： ) FULLWIDTH COLON U+FF64 ( ､ ) HALFWIDTH IDEOGRAPHIC COMMA`",1,N],[13,"STerm","","`text Sentence_Terminal = Yes`",1,N],[13,"Close","","`text General_Category = Open_Punctuation, or General_Category = Close_Punctuation, or Line_Break = Quotation and not U+05F3 ( ׳ ) HEBREW PUNCTUATION GERESH and ATerm = No and STerm = No`",1,N],[13,"Other","","All other characters",1,N],[0,"abbr_names","","Abbreviated name aliases for the Sentence_Break property.",N,N],[0,"long_names","","Long name aliases for the Sentence_Break property.",N,N],[11,"clone","","",1,[[["self"]],["sentencebreak"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["sentencebreak"]],["bool"]]],[11,"hash","","",1,N],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"prop_abbr_name","","",1,[[],["str"]]],[11,"prop_long_name","","",1,[[],["str"]]],[11,"prop_human_name","","",1,[[],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"all_values","","",1,N],[11,"abbr_name","","",1,[[["self"]],["str"]]],[11,"long_name","","",1,[[["self"]],["str"]]],[11,"human_name","","",1,[[["self"]],["str"]]],[11,"of","","",1,[[["char"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"of","","Find the character Sentence_Break property value.",1,[[["char"]],["sentencebreak"]]],[0,"word_break","unic_ucd_segment","Unicode Word_Break Character Property.",N,N],[4,"WordBreak","unic_ucd_segment::word_break","Represents the Unicode character Word_Break property.",N,N],[13,"CR","","`text U+000D CARRIAGE RETURN (CR)`",2,N],[13,"LF","","`text U+000A LINE FEED (LF)`",2,N],[13,"Newline","","`text U+000B LINE TABULATION U+000C FORM FEED (FF) U+0085 NEXT LINE (NEL) U+2028 LINE SEPARATOR U+2029 PARAGRAPH SEPARATOR`",2,N],[13,"Extend","","`text Grapheme_Extend = Yes, or General_Category = Spacing_Mark and not U+200D ZERO WIDTH JOINER (ZWJ)`",2,N],[13,"ZWJ","","`text U+200D ZERO WIDTH JOINER`",2,N],[13,"RegionalIndicator","","`text Regional_Indicator = Yes`",2,N],[13,"Format","","`text General_Category = Format and not U+200B ZERO WIDTH SPACE (ZWSP) and not U+200C ZERO WIDTH NON-JOINER (ZWNJ) and not U+200D ZERO WIDTH JOINER (ZWJ)`",2,N],[13,"Katakana","","`text Script = KATAKANA, or any of the following: U+3031 ( 〱 ) VERTICAL KANA REPEAT MARK U+3032 ( 〲 ) VERTICAL KANA REPEAT WITH VOICED SOUND MARK U+3033 ( 〳 ) VERTICAL KANA REPEAT MARK UPPER HALF U+3034 ( 〴 ) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF U+3035 ( 〵 ) VERTICAL KANA REPEAT MARK LOWER HALF U+309B ( ゛ ) KATAKANA-HIRAGANA VOICED SOUND MARK U+309C ( ゜ ) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK U+30A0 ( ゠ ) KATAKANA-HIRAGANA DOUBLE HYPHEN U+30FC ( ー ) KATAKANA-HIRAGANA PROLONGED SOUND MARK U+FF70 ( ｰ ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK`",2,N],[13,"HebrewLetter","","`text Script = Hebrew and General_Category = Other_Letter`",2,N],[13,"ALetter","","`text Alphabetic = Yes, or any of the following 36 characters: U+02C2 ( ˂ ) MODIFIER LETTER LEFT ARROWHEAD ..U+02C5 ( ˅ ) MODIFIER LETTER DOWN ARROWHEAD U+02D2 ( ˒ ) MODIFIER LETTER CENTRED RIGHT HALF RING ..U+02D7 ( ˗ ) MODIFIER LETTER MINUS SIGN U+02DE ( ˞ ) MODIFIER LETTER RHOTIC HOOK U+02DF ( ˟ ) MODIFIER LETTER CROSS ACCENT U+02ED ( ˭ ) MODIFIER LETTER UNASPIRATED U+02EF ( ˯ ) MODIFIER LETTER LOW DOWN ARROWHEAD ..U+02FF ( ˿ ) MODIFIER LETTER LOW LEFT ARROW U+05F3 ( ׳ ) HEBREW PUNCTUATION GERESH U+A720 ( ꜠ ) MODIFIER LETTER STRESS AND HIGH TONE U+A721 ( ꜡ ) MODIFIER LETTER STRESS AND LOW TONE U+A789 ( ꞉ ) MODIFIER LETTER COLON U+A78A ( ꞊ ) MODIFIER LETTER SHORT EQUALS SIGN U+AB5B ( ꭛ ) MODIFIER BREVE WITH INVERTED BREVE and Ideographic = No and Word_Break ≠ Katakana and Line_Break ≠ Complex_Context (SA) and Script ≠ Hiragana and Word_Break ≠ Extend and Word_Break ≠ Hebrew_Letter`",2,N],[13,"SingleQuote","","`text U+0027 ( ' ) APOSTROPHE`",2,N],[13,"DoubleQuote","","`text U+0022 ( \" ) QUOTATION MARK`",2,N],[13,"MidNumLet","","`text U+002E ( . ) FULL STOP U+2018 ( ‘ ) LEFT SINGLE QUOTATION MARK U+2019 ( ’ ) RIGHT SINGLE QUOTATION MARK U+2024 ( ․ ) ONE DOT LEADER U+FE52 ( ﹒ ) SMALL FULL STOP U+FF07 ( ＇ ) FULLWIDTH APOSTROPHE U+FF0E ( ． ) FULLWIDTH FULL STOP`",2,N],[13,"MidLetter","","`text U+00B7 ( · ) MIDDLE DOT U+0387 ( · ) GREEK ANO TELEIA U+05F4 ( ״ ) HEBREW PUNCTUATION GERSHAYIM U+2027 ( ‧ ) HYPHENATION POINT U+003A ( : ) COLON (used in Swedish) U+FE13 ( ︓ ) PRESENTATION FORM FOR VERTICAL COLON U+FE55 ( ﹕ ) SMALL COLON U+FF1A ( ： ) FULLWIDTH COLON`",2,N],[13,"MidNum","","`text Line_Break = Infix_Numeric, or any of the following: U+066C ( ٬ ) ARABIC THOUSANDS SEPARATOR U+FE50 ( ﹐ ) SMALL COMMA U+FE54 ( ﹔ ) SMALL SEMICOLON U+FF0C ( ， ) FULLWIDTH COMMA U+FF1B ( ； ) FULLWIDTH SEMICOLON and not U+003A ( : ) COLON and not U+FE13 ( ︓ ) PRESENTATION FORM FOR VERTICAL COLON and not U+002E ( . ) FULL STOP`",2,N],[13,"Numeric","","`text Line_Break = Numeric and not U+066C ( ٬ ) ARABIC THOUSANDS SEPARATOR`",2,N],[13,"ExtendNumLet","","`text General_Category = Connector_Punctuation, or U+202F NARROW NO-BREAK SPACE (NNBSP)`",2,N],[13,"EBase","","Emoji characters listed as `Emoji_Modifier_Base=Yes` in `emoji-data.txt`, which do not occur after ZWJ in `emoji-zwj-sequences.txt`.",2,N],[13,"EModifier","","Emoji characters listed as `Emoji_Modifer=Yes` in `emoji-data.txt`.",2,N],[13,"GlueAfterZwj","","Emoji characters that do not break from a previous ZWJ in a defined emoji ZWJ sequence, and are not listed as `Emoji_Modifier_Base=Yes` in `emoji-data.txt`.",2,N],[13,"EBaseGAZ","","Emoji characters listed as `Emoji_Modifer_Base=Yes` in `emoji_data.txt`, and also occur after ZWJ in `emoji-zwj-sequences.txt`.",2,N],[13,"Other","","All other characters",2,N],[0,"abbr_names","","Abbreviated name aliases for the Word_Break property.",N,N],[0,"long_names","","Long name aliases for the Word_Break property.",N,N],[11,"clone","","",2,[[["self"]],["wordbreak"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["wordbreak"]],["bool"]]],[11,"hash","","",2,N],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"prop_abbr_name","","",2,[[],["str"]]],[11,"prop_long_name","","",2,[[],["str"]]],[11,"prop_human_name","","",2,[[],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"all_values","","",2,N],[11,"abbr_name","","",2,[[["self"]],["str"]]],[11,"long_name","","",2,[[["self"]],["str"]]],[11,"human_name","","",2,[[["self"]],["str"]]],[11,"of","","",2,[[["char"]],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"of","","Find the character Word_Break property value.",2,[[["char"]],["wordbreak"]]],[17,"PKG_DESCRIPTION","unic_ucd_segment","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N]],"paths":[[4,"GraphemeClusterBreak"],[4,"SentenceBreak"],[4,"WordBreak"]]};
searchIndex["unic_ucd_version"]={"doc":"UNIC — UCD — Core","items":[[3,"UnicodeVersion","unic_ucd_version","Represents a Unicode Version type.",N,N],[12,"major","","Major version.",0,N],[12,"minor","","Minor version.",0,N],[12,"micro","","Micro (or Update) version.",0,N],[17,"PKG_DESCRIPTION","","UNIC component description.",N,N],[17,"PKG_NAME","","UNIC component name.",N,N],[17,"PKG_VERSION","","UNIC component version.",N,N],[17,"UNICODE_VERSION","","The Version of The Unicode Standard of the Unicode Character Database in use.",N,N],[11,"hash","","",0,N],[11,"default","","",0,[[],["unicodeversion"]]],[11,"cmp","","",0,[[["self"],["unicodeversion"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["unicodeversion"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"clone","","",0,[[["self"]],["unicodeversion"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",0,[[["self"],["unicodeversion"]],["bool"]]]],"paths":[[3,"UnicodeVersion"]]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"clone","","",5,[[["self"]],["level"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",5,[[["self"],["level"]],["ordering"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"from","","Create level by number",5,[[["u8"]],["level"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bidiclass"]],["bool"]]],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[11,"clone","","",1,[[["self"]],["decompositions"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"next","","",3,[[["self"]],["option",["char"]]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,[[["self"]],["streamsafe"]]]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unidecode"]={"doc":"The `rust-unidecode` library is a Rust port of Sean M. Burke's famous `Text::Unidecode` module for Perl. It transliterates Unicode strings such as \"Æneid\" into pure ASCII ones such as \"AEneid.\" For a detailed explanation on the rationale behind using such a library, you can refer to both the documentation of the original module and this article written by Burke in 2001.","items":[[5,"unidecode","unidecode","This function takes any Unicode string and returns an ASCII transliteration of that string.",N,[[["str"]],["string"]]],[5,"unidecode_char","","This function takes a single Unicode character and returns an ASCII transliteration.",N,[[["char"]],["str"]]]],"paths":[]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"clone","","",2,[[["self"]],["host"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"hash","","",2,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["socketaddr"]]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"eq","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["opaqueorigin"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"drop","","",8,[[["self"]]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",8,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",8,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,[[["self"],["i"]],["self"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"index","","",9,[[["self"],["rangefull"]],["str"]]],[11,"index","","",9,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["range",["position"]]],["str"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",10,[[["self"]],["string"]]],[10,"finish","","",10,N],[16,"Finished","","",10,N],[11,"clone","","",11,[[["self"]],["parse"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,[[["self"]],["parseintoowned"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option",["str"]]]],[11,"size_hint","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"as_mut_string","url","",15,[[["self"]],["string"]]],[11,"finish","","",15,[[["self"]],["url"]]],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",14,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",14,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,N],[11,"clone","url","",9,[[["self"]],["url"]]],[11,"clone","","",16,[[["self"]],["parseoptions"]]],[11,"base_url","","Change the base URL",16,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",16,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"parse","","Parse an absolute URL from a string.",9,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",9,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",9,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",9,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",9,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",9,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",9,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",9,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",9,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",9,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",9,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,[[["self"]],["result",["pathbuf"]]]],[11,"to_socket_addrs","","",9,[[["self"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"as_ref","","",9,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drop","","",15,[[["self"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8"]={"doc":"","items":[[3,"LossyDecoder","utf8","A push-based, lossy decoder for UTF-8. Errors are replaced with the U+FFFD replacement character.",N,N],[3,"BufReadDecoder","","Wraps a `std::io::BufRead` buffered byte stream and decode it as UTF-8.",N,N],[3,"Incomplete","","",N,N],[12,"buffer","","",0,N],[12,"buffer_len","","",0,N],[4,"BufReadDecoderError","","",N,N],[13,"InvalidByteSequence","","Represents one UTF-8 error in the byte stream.",1,N],[13,"Io","","An I/O error from the underlying byte stream",1,N],[4,"DecodeError","","",N,N],[13,"Invalid","","In lossy decoding insert `valid_prefix`, then `\"\\u{FFFD}\"`, then call `decode()` again with `remaining_input`.",2,N],[12,"valid_prefix","utf8::DecodeError","",2,N],[12,"invalid_sequence","","",2,N],[12,"remaining_input","","",2,N],[13,"Incomplete","utf8","Call the `incomplete_suffix.try_complete` method with more input when available. If no more input is available, this is an invalid byte sequence.",2,N],[12,"valid_prefix","utf8::DecodeError","",2,N],[12,"incomplete_suffix","","",2,N],[5,"decode","utf8","",N,N],[11,"new","","Create a new decoder from a callback.",3,[[["f"]],["self"]]],[11,"feed","","Feed one chunk of input into the decoder.",3,N],[11,"drop","","",3,[[["self"]]]],[11,"lossy","","Replace UTF-8 errors with U+FFFD",1,[[["self"]],["result",["str","error"]]]],[11,"read_to_string_lossy","","This is to `Read::read_to_string` what `String::from_utf8_lossy` is to `String::from_utf8`.",4,[[["b"]],["result",["string"]]]],[11,"new","","",4,[[["b"]],["self"]]],[11,"next_lossy","","Same as `BufReadDecoder::next_strict`, but replace UTF-8 errors with U+FFFD.",4,[[["self"]],["option",["result"]]]],[11,"next_strict","","Decode and consume the next chunk of UTF-8 input.",4,[[["self"]],["option",["result"]]]],[17,"REPLACEMENT_CHARACTER","","The replacement character, U+FFFD. In lossy decoding, insert it for every decoding error.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["decodeerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["incomplete"]]],[11,"empty","","",0,[[],["self"]]],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"new","","",0,N],[11,"try_complete","","`None``try_complete``Some((result, remaining_input))``Incomplete``remaining_input``decode()`",0,N]],"paths":[[3,"Incomplete"],[4,"BufReadDecoderError"],[4,"DecodeError"],[3,"LossyDecoder"],[3,"BufReadDecoder"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["want"]={"doc":"A Futures channel-like utility to signal when a value is wanted.","items":[[3,"Giver","want","An entity that gives a value when wanted.",N,N],[3,"Taker","","An entity that wants a value.",N,N],[3,"SharedGiver","","A cloneable `Giver`.",N,N],[3,"Closed","","The `Taker` has canceled its interest in a value.",N,N],[5,"new","","Create a new `want` channel.",N,N],[11,"clone","","",0,[[["self"]],["sharedgiver"]]],[11,"poll_want","","Poll whether the `Taker` has registered interest in another value.",1,[[["self"]],["poll",["closed"]]]],[11,"give","","Mark the state as idle, if the Taker currently is wanting.",1,[[["self"]],["bool"]]],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",1,[[["self"]],["bool"]]],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",1,[[["self"]],["bool"]]],[11,"shared","","Converts this into a `SharedGiver`.",1,[[["self"]],["sharedgiver"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",0,[[["self"]],["bool"]]],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cancel","","Signal to the `Giver` that the want is canceled.",2,[[["self"]]]],[11,"want","","Signal to the `Giver` that a value is wanted.",2,[[["self"]]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"SharedGiver"],[3,"Giver"],[3,"Taker"],[3,"Closed"]]};
initSearch(searchIndex);
